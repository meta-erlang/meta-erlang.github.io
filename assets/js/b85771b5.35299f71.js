"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[7898],{7680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>m});var a=n(7007),o=n(4848),r=n(8453);const i={title:"meta-erlang meets atomvm",authors:["joaohf"],tags:["meta-erlang","atomvm"]},l=void 0,s={authorsImageUrls:[void 0]},m=[{value:"Intro",id:"intro",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",h2:"h2",p:"p",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"intro",children:"Intro"}),"\n",(0,o.jsxs)(t.p,{children:["From ",(0,o.jsx)(t.a,{href:"https://www.atomvm.net/",children:"atomvm.net"})," website, atomvm is:"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"AtomVM is a lightweight implementation of the the Bogdan Erlang Abstract\nMachine (aka, the BEAM), a virtual machine that can execute byte-code\ninstructions compiled from Erlang or Elixir source code. AtomVM supports a\nlimited but functional subset of the BEAM opcodes, and also includes a small\nsubset of the Erlang/OTP standard libraries, all optimized to run on tiny\nmicro-controllers. With AtomVM, you can write your IoT applications in a\nfunctional programming language, using a modern actor-based concurrency model,\nmaking them vastly easier to write and understand!"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"One of the atomvm goals is the possibility to run BEAM code on really small\nsystems like MCUs."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(6540);const o={},r=a.createContext(o);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:t},e.children)}},7007:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/11/02/index","editUrl":"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2023-11-02/index.md","source":"@site/blog/2023-11-02/index.md","title":"meta-erlang meets atomvm","description":"Intro","date":"2023-11-02T00:00:00.000Z","tags":[{"inline":true,"label":"meta-erlang","permalink":"/blog/tags/meta-erlang"},{"inline":true,"label":"atomvm","permalink":"/blog/tags/atomvm"}],"readingTime":3.99,"hasTruncateMarker":true,"authors":[{"name":"Jo\xe3o Henrique Ferreira de Freitas","title":"Maintainer of meta-erlang","url":"https://github.com/joaohf","imageURL":"https://github.com/joaohf.png","key":"joaohf","page":null}],"frontMatter":{"title":"meta-erlang meets atomvm","authors":["joaohf"],"tags":["meta-erlang","atomvm"]},"unlisted":false,"prevItem":{"title":"New Erlang releases 24.3.4.15, 25.3.2.8, 26.2.1","permalink":"/blog/2023/12/25/index"},"nextItem":{"title":"Exploring x32 psABI for Erlang/OTP","permalink":"/blog/2023/09/02/index"}}')}}]);