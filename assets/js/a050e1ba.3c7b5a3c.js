"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[2246],{6985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=n(4848),r=n(8453);const o={title:"Running Erlang/OTP test suite on target with ptest",authors:["joaohf"],tags:["meta-erlang"]},i=void 0,a={permalink:"/blog/2024/10/12/index",editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2024-10-12/index.md",source:"@site/blog/2024-10-12/index.md",title:"Running Erlang/OTP test suite on target with ptest",description:"ptest (package test) means packaging and installing runtime tests that are",date:"2024-10-12T00:00:00.000Z",tags:[{inline:!0,label:"meta-erlang",permalink:"/blog/tags/meta-erlang"}],readingTime:5.85,hasTruncateMarker:!0,authors:[{name:"Jo\xe3o Henrique Ferreira de Freitas",title:"Maintainer of meta-erlang",url:"https://github.com/joaohf",imageURL:"https://github.com/joaohf.png",key:"joaohf",page:null}],frontMatter:{title:"Running Erlang/OTP test suite on target with ptest",authors:["joaohf"],tags:["meta-erlang"]},unlisted:!1,prevItem:{title:"Introducing Gleam to meta-erlang layer",permalink:"/blog/2024/11/03/index"},nextItem:{title:"Anatomy of erlang and elixir packages for YP/OE",permalink:"/blog/2024/10/06/index"}},l={authorsImageUrls:[void 0]},c=[{value:"How does ptest work ?",id:"how-does-ptest-work-",level:2},{value:"Running Erlang/OTP ptest",id:"running-erlangotp-ptest",level:2},{value:"Running Elixir ptest",id:"running-elixir-ptest",level:2},{value:"Why running ptest for Erlang/OTP on Yocto builds is important ?",id:"why-running-ptest-for-erlangotp-on-yocto-builds-is-important-",level:2}];function p(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"ptest (package test) means packaging and installing runtime tests that are\nincluded in many upstream packages. At the end of the day it runs Erlang/OTP\ncross compiled test suite on the target hardware. The aim is to detect a range\nof problems when running test suites on different combinations of architecture\nprocessors and libc."}),"\n",(0,s.jsxs)(t.p,{children:["The Erlang/OTP howto about\n",(0,s.jsx)(t.a,{href:"https://github.com/erlang/otp/blob/master/HOWTO/TESTING.md",children:"TESTING.md"}),"\nexplains most of the details when running tests. While the Yocto's documentation\nabout\n",(0,s.jsx)(t.a,{href:"https://docs.yoctoproject.org/dev-manual/packages.html#testing-packages-with-ptest",children:"Testing Packages With ptest"}),"\nexplains the ptest configuration."]}),"\n",(0,s.jsx)(t.p,{children:"So, this post is about how to run those tests using ptest approach on Yocto\nbuilds."}),"\n",(0,s.jsx)(t.h2,{id:"how-does-ptest-work-",children:"How does ptest work ?"}),"\n",(0,s.jsxs)(t.p,{children:["Recipes with ptest enabled includes a shell script called ",(0,s.jsx)(t.em,{children:"run-ptest"})," with the\nsteps necessary to start the test suite provided by the target software (e.g.:\nErlang/OTP)."]}),"\n",(0,s.jsxs)(t.p,{children:["The run-ptest script is responsible for starting the test suite and\nconsolidating the test results into a single format. The format is the\n",(0,s.jsx)(t.a,{href:"https://www.gnu.org/software/automake/manual/automake.html#Simple-Tests",children:"automake simple test"}),"\nformat:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"result: testName\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Where: ",(0,s.jsx)(t.em,{children:"result"})," is one of PASS, FAIL or SKIP and ",(0,s.jsx)(t.em,{children:"testName"})," can be anything."]}),"\n",(0,s.jsx)(t.p,{children:"The erlang recipe from meta-erlang layer supports ptest. And, when activated,\nthe package erlang-ptest is installed into the final image. It has the erlang\ntest suite cross compiled and ready to be executed."}),"\n",(0,s.jsx)(t.p,{children:"When ptest for erlang recipe gets executed, it finishes the erlang test suite\nconfiguration and starts to run each test configured in run-ptest script."}),"\n",(0,s.jsxs)(t.p,{children:["The Erlang/OTP requires several hours to finish. Because of that, ptest for\nerlang just executes a small set of all tests available (currently only\n",(0,s.jsx)(t.em,{children:"emulator"})," and ",(0,s.jsx)(t.em,{children:"kernel"})," tests are enabled)."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["To get a better idea about how to run Erlang/OTP test suites the documentation\n",(0,s.jsx)(t.a,{href:"https://github.com/erlang/otp/blob/master/HOWTO/TESTING.md",children:"TESTING.md"}),",\nspecially the session Running the tests."]})}),"\n",(0,s.jsxs)(t.p,{children:["The erlang-ptest package installs the test suite and also the run-ptest script\nat ",(0,s.jsx)(t.em,{children:"/usr/lib/erlang/ptest"})," folder."]}),"\n",(0,s.jsx)(t.p,{children:"One point very important is that Erlang/OTP test suites need some tools\ninstalled into the target image in order to execute some tests. For example, to\nrun emulator and kernel tests the target OS needs tmux and openssh packages.\nHowever the erlang recipe takes care of these details."}),"\n",(0,s.jsxs)(t.p,{children:["Each test suite might require additional packages. As there is no documentation\ndescribing all the requirements the best strategy is to inspect the test suite\nfor each Erlang/OTP application\n(",(0,s.jsx)(t.a,{href:"https://github.com/erlang/otp/tree/master/lib",children:"lib/*/test"})," and\n",(0,s.jsx)(t.a,{href:"https://github.com/erlang/otp/tree/master/erts/test",children:"erts/test"})," folders)."]}),"\n",(0,s.jsx)(t.h2,{id:"running-erlangotp-ptest",children:"Running Erlang/OTP ptest"}),"\n",(0,s.jsx)(t.p,{children:"Yocto provides some configuration when enabling ptest. As it is only relevant\nfor testing purposes."}),"\n",(0,s.jsx)(t.p,{children:"A specific image feature exists that enables ptest. So, in the local.conf\nconfiguration file:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'# ptest image\nEXTRA_IMAGE_FEATURES += "ptest-pkgs"\n'})}),"\n",(0,s.jsx)(t.p,{children:"This is all that is necessary to do in order to enable ptest build."}),"\n",(0,s.jsx)(t.p,{children:"As we want to install erlang in the final image, we also need to add it to the\nfinal image. On build/local.conf configuration file:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'# installing erlang and elixir\nIMAGE_INSTALL:append:pn-core-image-minimal = " erlang erlang-modules-dev elixir elixir-modules-dev links"\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.em,{children:"links"})," package here is necessary to open HTML common test reports from\nconsole."]})}),"\n",(0,s.jsx)(t.p,{children:"It's ready to build the core-image-minimal image:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"bitbake core-image-minimal\n"})}),"\n",(0,s.jsx)(t.p,{children:"And, for testing purposes, run the generated image using qemu emulator:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"runqemu slirp kvm nographic serialstdio core-image-minimal\n"})}),"\n",(0,s.jsx)(t.p,{children:"Logging into the running system and execute ptest for erlang:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Poky (Yocto Project Reference Distro) 5.1 qemux86-64 ttyS0\n\nqemux86-64 login: root\n\nWARNING: Poky is a reference Yocto Project distribution that should be used for\ntesting and development purposes only. It is recommended that you create your\nown distribution for production use.\n\nroot@qemux86-64:~# ptest-run erlang\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The script /usr/lib/erlang/ptest/run-ptest starts execute controlled by the\napplication called ",(0,s.jsx)(t.a,{href:"https://git.yoctoproject.org/ptest-runner2/",children:"ptest runner"}),".\nAfter several hours we get the following results:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"START: ptest-runner\n2024-10-14T17:15\nBEGIN: /usr/lib/erlang/ptest\n\nFAIL: emulator\n... lots of console messages ...\nFAIL: kernel\n... lots of console messages ...\n\n=== common test Summary ===\nTesting tests.emulator_test: TEST COMPLETE, 2112 ok, 4 failed, 82 skipped of 2198 test cases\nTesting tests.kernel_test: TEST COMPLETE, 1338 ok, 20 failed, 293 skipped of 1651 test cases\n=== Test Summary ===\nTOTAL: 2\nPASSED: 0\nFAILED: 2\nDURATION: 5822\nEND: /usr/lib/erlang/ptest\n2024-10-14T01:39\nSTOP: ptest-runner\nTOTAL: 1 FAIL: 0\n"})}),"\n",(0,s.jsx)(t.p,{children:"Well, we got 4 fails for emulator tests and 20 fails for kernel tests. Not bad,\nbut I don't know if it is also good."}),"\n",(0,s.jsx)(t.p,{children:"For further inspection, it's possible to also check output messages for each\ntest. The run-ptest script writes a specific log console for each test executed:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"root@qemux86-64:~# ls /usr/lib/erlang/ptest/ -l\ntotal 14680\n-rw-r--r--  1 root root   236964 Oct 14 00:40 erlang_ptest_emulator_20241014-000215.log\n-rw-r--r--  1 root root 14770546 Oct 14 01:39 erlang_ptest_kernel_20241014-004016.log\n-rwxr-xr-x  1 root root      807 Oct 14 00:01 run-ptest\ndrwxr-xr-x 39 root root     4096 Apr  5  2011 tests\n\n"})}),"\n",(0,s.jsxs)(t.p,{children:["As usual when running common tests (remember Erlang/OTP test suites are just\ncommon tests), the HTML reports were written at\n",(0,s.jsx)(t.em,{children:"/usr/lib/erlang/ptest/tests/test_server/index.html"}),". Opening it with links\ncommand to check the results:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"links /usr/lib/erlang/ptest/tests/test_server/index.html\n"})}),"\n",(0,s.jsx)(t.p,{children:"ptest produces a lot of data to inspect."}),"\n",(0,s.jsx)(t.h2,{id:"running-elixir-ptest",children:"Running Elixir ptest"}),"\n",(0,s.jsx)(t.p,{children:"The steps for running elixir ptest are almost the same for erlang. We just call\nptest-run with the argument elixir:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"root@qemux86-64:~# ptest-run elixir\n"})}),"\n",(0,s.jsx)(t.p,{children:"The above command runs elixir ptest and reports some results:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"START: ptest-runner\n2024-10-18T02:27\nBEGIN: /usr/lib/elixir/ptest\nPASS: erlang\nFAIL: stdlib\nPASS: ex_unit\nFAIL: logger\nPASS: eex\nFAIL: mix\nFAIL: iex\n=== Test Summary ===\nTOTAL: 7\nPASSED: 3\nFAILED: 4\nDURATION: 148\nEND: /usr/lib/elixir/ptest\n2024-10-18T02:30\nSTOP: ptest-runner\nTOTAL: 1 FAIL: 0\n"})}),"\n",(0,s.jsx)(t.p,{children:"For further inspection, it's possible to also check output messages for each\ntest. The run-ptest script writes a specific log console for each test executed:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"root@qemux86-64:~# ls /usr/lib/elixir/ptest/ -l\ntotal 64\ndrwxr-xr-x 6 root root  4096 Apr  5  2011 elixir\n-rw-r--r-- 1 root root   840 Oct 18 02:28 elixir_ptest_eex_20241018-022812.log\n-rw-r--r-- 1 root root   323 Oct 18 02:27 elixir_ptest_erlang_20241018-022744.log\n-rw-r--r-- 1 root root  1156 Oct 18 02:28 elixir_ptest_ex_unit_20241018-022806.log\n-rw-r--r-- 1 root root  4230 Oct 18 02:30 elixir_ptest_iex_20241018-023005.log\n-rw-r--r-- 1 root root  2648 Oct 18 02:28 elixir_ptest_logger_20241018-022810.log\n-rw-r--r-- 1 root root 11243 Oct 18 02:30 elixir_ptest_mix_20241018-022814.log\n-rw-r--r-- 1 root root 16895 Oct 18 02:28 elixir_ptest_stdlib_20241018-022745.log\n-rwxr-xr-x 1 root root   950 Oct 18 02:27 run-ptest\n"})}),"\n",(0,s.jsx)(t.p,{children:"Again, ptest produces a lot of data to inspect."}),"\n",(0,s.jsx)(t.h2,{id:"why-running-ptest-for-erlangotp-on-yocto-builds-is-important-",children:"Why running ptest for Erlang/OTP on Yocto builds is important ?"}),"\n",(0,s.jsx)(t.p,{children:"Now that we know what is ptest. Given the following question:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"How do we know that a cross compiled Erlang/OTP build really works on the\ntarget hardware ?"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The answer could be: testing it using tests provided by Erlang/OTP source code."}),"\n",(0,s.jsx)(t.p,{children:"So, ptest is great for detecting problems."}),"\n",(0,s.jsx)(t.p,{children:"As ptest has the ability of running Erlang/OTP test suites on the final image\nand reporting the results, we can get a baseline when comparing tests executed\non different combinations of processor architectures and C standard libraries\n(libc) or any other aspect like different linux kernel versions. It's possible\nto detect regressions or find weak spots not covered by tests in a specific\nplatform."}),"\n",(0,s.jsx)(t.p,{children:"Also, the mechanism of executing those tests is simple. The user does not need\nto be an Erlang expert to check that something is not ok on some platform."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);