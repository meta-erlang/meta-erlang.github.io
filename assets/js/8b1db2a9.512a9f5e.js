"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[2794],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(a),p=o,h=c["".concat(s,".").concat(p)]||c[p]||m[p]||r;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},6594:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=a(7462),o=(a(7294),a(3905));const r={title:"meta-erlang on cloud I, EWAOL based",authors:["joaohf"],tags:["meta-erlang","cloud"]},i=void 0,l={permalink:"/blog/2023/01/29/index",editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2023-01-29/index.md",source:"@site/blog/2023-01-29/index.md",title:"meta-erlang on cloud I, EWAOL based",description:"\x3c!---",date:"2023-01-29T00:00:00.000Z",formattedDate:"January 29, 2023",tags:[{label:"meta-erlang",permalink:"/blog/tags/meta-erlang"},{label:"cloud",permalink:"/blog/tags/cloud"}],readingTime:4.085,hasTruncateMarker:!1,authors:[{name:"Jo\xe3o Henrique Ferreira de Freitas",title:"Maintainer of meta-erlang",url:"https://github.com/joaohf",imageURL:"https://github.com/joaohf.png",key:"joaohf"}],frontMatter:{title:"meta-erlang on cloud I, EWAOL based",authors:["joaohf"],tags:["meta-erlang","cloud"]},prevItem:{title:"meta-erlang on cloud II, build your own application",permalink:"/blog/2023/02/04/index"},nextItem:{title:"New Erlang releases 24.3.4.8, 25.1.2.1, 25.2.1",permalink:"/blog/2023/01/22/index"}},s={authorsImageUrls:[void 0]},d=[{value:"Intro",id:"intro",level:2},{value:"Putting everything together, first experiment",id:"putting-everything-together-first-experiment",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}],u={toc:d};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"intro"},"Intro"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://www.yoctoproject.org/"},"Yocto Project")," has been made to create\nspecific embedded Linux distributions. And still does a great job on this field\nmaking it possible to run softwares in a range of target architectures."),(0,o.kt)("p",null,"But, the term ",(0,o.kt)("em",{parentName:"p"},"embedded Linux distribution")," should be expanded a bit more; it's\nnot only about creating tiny filesystem within cross-compiled software, scripts\nand configurations targeting platforms with small footprint, CPU and memory\nconstraints."),(0,o.kt)("p",null,"We could do more, actually there are people using the not so newly but still new\nARM processors that runs on cloud environment. For sure the most famous one is\nthe\n",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/ec2/graviton/"},"Graviton EC2 instances, on AWS cloud"),"."),(0,o.kt)("p",null,"Looking into these Graviton processors and Yocto Project, what would it be\npossible ? Maybe running Yocto images on Graviton instances could be feasible\nenough to run some workload. And what about adding Erlang/OTP and Elixir to that\nmix ? Or running some advanced database or broker made with Erlang ?"),(0,o.kt)("p",null,"That is exactly what we will try to experiment. In this first post about running\nmeta-erlang on cloud, we are going to look how it would be possible."),(0,o.kt)("p",null,"Actually there are folks whose made possible to run Yocto images on Graviton\ninstances. Technically is pretty simple and all bits and bytes have been\ndescribed in the blog post\n",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/blogs/industries/building-an-automotive-embedded-linux-image-for-edge-using-arm-graviton-yocto-project-soafee/"},"Building an Automotive Embedded Linux Image for Edge and Cloud Using Arm-based Graviton Instances, Yocto Project, and SOAFEE"),".\nThe companion repository also worth the reading\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aws4embeddedlinux/meta-aws-ewaol"},"The meta-aws-ewaol repository"),"."),(0,o.kt)("p",null,"The idea that ","[1]"," brings is part of another idea related to Software-Defined\nVehicles through Cloud ","[2]"," which is very excited. These references also cites a\nframework to build Edge Workloads ","[3]"," and in fact the EWAOL (Edge Workload\nAbstraction and Orchestration Layer) was used as a base to produce the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aws4embeddedlinux/meta-aws-ewaol"},"meta-aws-ewaol")," layer."),(0,o.kt)("h2",{id:"putting-everything-together-first-experiment"},"Putting everything together, first experiment"),(0,o.kt)("p",null,"So, based on all what has been described so far and as a first experience, I've\ntested meta-aws-ewaol setup and added meta-erlang into that. The aim was to run\n",(0,o.kt)("inlineCode",{parentName:"p"},"erl")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"iex")," console on Graviton EC2 instances."),(0,o.kt)("p",null,"I had to make a few fixes on meta-aws-ewaol and pushed the results here:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang"},"meta-aws-ewaol with meta-erlang"),".\nThe rest of this session is a small guide that I made in order to run our first\nexperiment."),(0,o.kt)("p",null,"With a ready Yocto environment, following the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#building-ewaol"},"Building EWAOL"),"\nsession is enough to get the system built. It's just Yocto, nothing more."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"You can create a free AWS account. There are Graviton instances included in\nthe AWS free tier. It's more than sufficient."),(0,o.kt)("li",{parentName:"ul"},"Bear in mind that you don't need to be an AWS master but you will end up\nspending some time learning how to create AWS services."))),(0,o.kt)("p",null,"The next step is to create and setup all the AWS infrastructure needed in order\nto push the Yocto image as AWS AMI and start the Graviton Instance. Lucky, there\nis a Cloud Formation template which performs the initial setup. The session\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#pre-requisites"},"Pre-requisites"),"\nhelps to clarify it."),(0,o.kt)("p",null,"Then, having the Yocto image and the basic AWS account in place. It's time to\nuse\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/joaohf/meta-aws-ewaol/blob/main-add-meta-erlang/scripts/create-ami.sh"},"a special script"),"\nto convert Yocto image to an AMI image. Most of the job is done by awscli\ncommands. There is nothing related to Yocto here. The session\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#creating-ami-from-image-file"},"Creating AMI from image file"),"\ntells what is necessary to do."),(0,o.kt)("p",null,"Finally, the last part. After pushing the AMI image to the S3 bucket. The fun\npart is to instantiate a Graviton instance (please refer to the session\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#launch-the-ec2-image-as-usual-using-your-newly-created-ami"},"Launch the EC2 Image as usual using your newly created AMI"),")\nan run the EWAOL based image and test how Erlang and Elixir looks like."),(0,o.kt)("p",null,"I've added two screenshots below just to have a taste of the final results:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"alt Erlang console",src:a(7275).Z,title:"Erlang console",width:"1229",height:"988"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"alt Elixir console",src:a(3634).Z,title:"Elixir console",width:"1007",height:"167"})),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"This first experiment has finished and I can conclude two main bullets:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It is possible to build a Yocto image and run it on Graviton instances"),(0,o.kt)("li",{parentName:"ul"},"meta-aws-ewaol is a great start point. And the EWAOL framework looks solid for\nwhat it has been planned for.")),(0,o.kt)("p",null,"However, what I am looking for is to run a tiny image with just the necessary to\nput one Erlang/Elixir up and running on ARM cloud instances. That is what the\nnext blog post will do:\n",(0,o.kt)("a",{parentName:"p",href:"/blog/2023/02/04/index"},"meta-erlang on cloud II, build your own application")),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"[1]",":\n",(0,o.kt)("a",{parentName:"li",href:"https://aws.amazon.com/blogs/industries/building-an-automotive-embedded-linux-image-for-edge-using-arm-graviton-yocto-project-soafee/"},"Building an Automotive Embedded Linux Image for Edge and Cloud Using Arm-based Graviton Instances, Yocto Project, and SOAFEE")),(0,o.kt)("li",{parentName:"ul"},"[2]",":\n",(0,o.kt)("a",{parentName:"li",href:"https://armkeil.blob.core.windows.net/developer/Files/pdf/white-paper/arm-aws-edge-environmental-parity-wp.pdf"},"Accelerating Software-Defined Vehicles through Cloud-To-Vehicle Edge Environmental Parity")),(0,o.kt)("li",{parentName:"ul"},"[3]",":\n",(0,o.kt)("a",{parentName:"li",href:"https://ewaol.docs.arm.com/en/kirkstone-dev/index.html"},"Edge Workload Abstraction and Orchestration Layer (EWAOL) Documentation"))))}c.isMDXComponent=!0},7275:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/meta-erlang-gravitron-erl-74d44c9d063c73e6a3f61183f0bfcb5e.jpg"},3634:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/meta-erlang-gravitron-iex-96e0e9113e0029ca640a1e9d74e3eb94.jpg"}}]);