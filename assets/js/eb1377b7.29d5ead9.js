"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[196],{5788:(e,n,t)=>{t.d(n,{Iu:()=>g,yg:()=>m});var r=t(1504);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,m=p["".concat(c,".").concat(d)]||p[d]||u[d]||i;return t?r.createElement(m,o(o({ref:n},g),{},{components:t})):r.createElement(m,o({ref:n},g))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6588:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(5072),a=(t(1504),t(5788));const i={description:"How to contribute with meta-erlang project."},o="Contributing with meta-erlang",l={unversionedId:"contributing/contributing-meta-erlang",id:"version-nanbield/contributing/contributing-meta-erlang",title:"Contributing with meta-erlang",description:"How to contribute with meta-erlang project.",source:"@site/versioned_docs/version-nanbield/contributing/contributing-meta-erlang.md",sourceDirName:"contributing",slug:"/contributing/contributing-meta-erlang",permalink:"/docs/nanbield/contributing/contributing-meta-erlang",draft:!1,editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/versioned_docs/version-nanbield/contributing/contributing-meta-erlang.md",tags:[],version:"nanbield",frontMatter:{description:"How to contribute with meta-erlang project."},sidebar:"tutorialSidebar",previous:{title:"Documentation",permalink:"/docs/nanbield/contributing/contributing-doc-site"},next:{title:"Thanks",permalink:"/docs/nanbield/thanks"}},c={},s=[{value:"Add a new erlang version",id:"add-a-new-erlang-version",level:2},{value:"Add a new elixir version",id:"add-a-new-elixir-version",level:2}],g={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.c)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"contributing-with-meta-erlang"},"Contributing with meta-erlang"),(0,a.yg)("p",null,"To develop the meta-erlang layer, you need to setup the Yocto project\nenvironment and starting to make changes in meta-erlang code."),(0,a.yg)("h2",{id:"add-a-new-erlang-version"},"Add a new erlang version"),(0,a.yg)("p",null,"When ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/erlang/otp"},"Erlang OTP")," team releases a new version,\nand you wish to try that version with meta-erlang then you can do the follow\nsteps:"),(0,a.yg)("p",null,"Run the manifest script to create the bitbake files:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"scripts/contrib/erlang/generate-manifest --erlang-version 21.3.2 > recipes-devtools/erlang/erlang-21.3.2-manifest.inc\n")),(0,a.yg)("p",null,"Copy the erlang recipe to the new version:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"cp recipes-devtools/erlang/erlang_21.1.0.bb recipes-devtools/erlang/erlang_21.3.2.bb\n")),(0,a.yg)("p",null,"Create include file to hold the ",(0,a.yg)("inlineCode",{parentName:"p"},"SRCREV")," and point to the git sha1 commit that\nrepresents the Erlang OTP version:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"echo 'SRCREV = \"7e6fff1e849998a3dd747b4d3cf35f39cb896aa0\"' >> recipes-devtools/erlang/erlang-21.3.2.inc\n")),(0,a.yg)("h2",{id:"add-a-new-elixir-version"},"Add a new elixir version"),(0,a.yg)("p",null,"Copy the elixir recipe to the new version:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"cp recipes-devtools/elixir/elixir_1.8.2.bb recipes-devtools/elixir/elixir_1.9.0.bb\n")),(0,a.yg)("p",null,"Open the elixir_1.9.0.bb and change the following:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"SRCREV"),": must point to the sha1 commit that represents the new elixir version"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"SRC_URL"),": change the version ('branch=') to the base elixir version branch.\nExample: 'v1.8'")))}u.isMDXComponent=!0}}]);