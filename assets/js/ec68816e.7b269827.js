"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[2324],{5788:(e,t,n)=>{n.d(t,{Iu:()=>p,yg:()=>d});var a=n(1504);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,d=m["".concat(l,".").concat(u)]||m[u]||g[u]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(5072),r=(n(1504),n(5788));const i={sidebar_position:5.1,sidebar_label:"Axon",sidebar_class_name:"green",description:"Using meta-erlang to build a distro made with YP/OE."},o="Axon distro",s={unversionedId:"distro/guides-axon-layer",id:"version-kirkstone/distro/guides-axon-layer",title:"Axon distro",description:"Using meta-erlang to build a distro made with YP/OE.",source:"@site/versioned_docs/version-kirkstone/distro/guides-axon-layer.md",sourceDirName:"distro",slug:"/distro/guides-axon-layer",permalink:"/docs/kirkstone/distro/guides-axon-layer",draft:!1,editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/versioned_docs/version-kirkstone/distro/guides-axon-layer.md",tags:[],version:"kirkstone",sidebarPosition:5.1,frontMatter:{sidebar_position:5.1,sidebar_label:"Axon",sidebar_class_name:"green",description:"Using meta-erlang to build a distro made with YP/OE."},sidebar:"tutorialSidebar",previous:{title:"Distro",permalink:"/docs/kirkstone/category/distro"},next:{title:"Contributing",permalink:"/docs/kirkstone/category/contributing"}},l={},c=[],p={toc:c},m="wrapper";function g(e){let{components:t,...i}=e;return(0,r.yg)(m,(0,a.c)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"axon-distro"},"Axon distro"),(0,r.yg)("p",null,"In this guide we are going to use a layer called\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/joaohf/meta-axon"},"meta-axon")," to hold:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"the\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/joaohf/meta-axon/blob/master/recipes-extended/axon/axon_git.bb"},"axon"),"\nrecipe application"),(0,r.yg)("li",{parentName:"ul"},"the\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/joaohf/meta-axon/blob/master/recipes-extended/axon/axon-scenic_git.bb"},"axon scenic"),"\nrecipe application"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/joaohf/meta-axon/blob/master/recipes-extended/image/axon-image-minimal.bb"},"axon-image-minimal"),",\na basic image to run axon application"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/joaohf/meta-axon/blob/master/recipes-graphics/images/axon-image-x11.bb"},"axon-image-x11"),",\na basic image with x11 to run axon scenic demo application"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/joaohf/meta-axon/blob/master/recipes-extended/image/axon-embedded-image-minimal.bb"},"axon-embedded-image-minimal"),",\na very basic image with axon application and erlang embedded init script\npackage group, with ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/nerves-project/erlinit"},"erlinit")," as\nreplacement for '/sbin/init'")),(0,r.yg)("p",null,"The idea is to show two examples about how to run erlang and elixir\napplications. However this layer is just to demonstration purposes."),(0,r.yg)("p",null,"In order to test the axon layer and build images, the first step is clone the\nlayer repository:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd $HOME\ngit clone https://github.com/joaohf/meta-axon.git\n")),(0,r.yg)("p",null,"Then, go to the previous build environment directory and add meta-axon to\n'conf/bblayers.conf':"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"bitbake-layers add-layer $HOME/meta-axon\n")),(0,r.yg)("p",null,"Now its time to build the images and runqemu to check the results:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Emebedded erlang application:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"bitbake axon-image-minimal\nrunqemu axon-image-minimal\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Embedded elixir application with scenic:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"bitbake axon-image-x11\nrunqemu axon-image-x11\n")),(0,r.yg)("p",null,"The follow screenshot shows a qemu session running axon scenic application:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"scenic inside qemu",src:n(8076).c,width:"960",height:"723"})))}g.isMDXComponent=!0},8076:(e,t,n)=>{n.d(t,{c:()=>a});const a=n.p+"assets/images/axon_scenic_qemu-d9fd59901f8c28b8a5e325fe68a6934c.png"}}]);