"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[3220],{5788:(e,t,a)=>{a.d(t,{Iu:()=>u,yg:()=>d});var n=a(1504);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=p(a),c=r,d=g["".concat(l,".").concat(c)]||g[c]||m[c]||i;return a?n.createElement(d,o(o({ref:t},u),{},{components:a})):n.createElement(d,o({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1212:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(5072),r=(a(1504),a(5788));const i={title:"fwup for A/B image upgrades",authors:["joaohf"],tags:["meta-erlang","fwup"]},o=void 0,s={permalink:"/blog/2024/09/24/index",editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2024-09-24/index.md",source:"@site/blog/2024-09-24/index.md",title:"fwup for A/B image upgrades",description:"This blog post is a tutorial about how to make A/B software updates with fwup",date:"2024-09-24T00:00:00.000Z",formattedDate:"September 24, 2024",tags:[{label:"meta-erlang",permalink:"/blog/tags/meta-erlang"},{label:"fwup",permalink:"/blog/tags/fwup"}],readingTime:8.935,hasTruncateMarker:!1,authors:[{name:"Jo\xe3o Henrique Ferreira de Freitas",title:"Maintainer of meta-erlang",url:"https://github.com/joaohf",imageURL:"https://github.com/joaohf.png",key:"joaohf"}],frontMatter:{title:"fwup for A/B image upgrades",authors:["joaohf"],tags:["meta-erlang","fwup"]},nextItem:{title:"New Erlang releases 27.0",permalink:"/blog/2024/05/31/index"}},l={authorsImageUrls:[void 0]},p=[{value:"Objectives and Tools",id:"objectives-and-tools",level:2},{value:"What is fwup ?",id:"what-is-fwup-",level:2},{value:"YP/OE setup",id:"ypoe-setup",level:2},{value:"Configuring the build environment",id:"configuring-the-build-environment",level:2},{value:"Deploying .fw images",id:"deploying-fw-images",level:2},{value:"burn a complete image",id:"burn-a-complete-image",level:3},{value:"move to B partition",id:"move-to-b-partition",level:3},{value:"move from B to A partition",id:"move-from-b-to-a-partition",level:3},{value:"Conclusions",id:"conclusions",level:2}],u={toc:p},g="wrapper";function m(e){let{components:t,...a}=e;return(0,r.yg)(g,(0,n.c)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"This blog post is a tutorial about how to make A/B software updates with fwup\ntool and Yocto Project."),(0,r.yg)("h2",{id:"objectives-and-tools"},"Objectives and Tools"),(0,r.yg)("p",null,"A short sentence as requirement for this tutorial is:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"I wish to make an image using Yocto Project and be able to run software\nupdates using A/B approach.")),(0,r.yg)("p",null,"There are many references on the Internet for A/B software updates. It's a\nwell-known approach with many different implementations. In short it's strategy\nto minimize downtime when changing the firmware of embedded devices. While the\nnew software gets written to the unused slot and the current slot is still\nrunning. When everything are ready to swap, the system gets restarted. Booting\nusing the unused slot (now it becomes the current slot)."),(0,r.yg)("p",null,"So, in this blog post we are going to play with A/B software updates using fwup\ntool."),(0,r.yg)("h2",{id:"what-is-fwup-"},"What is fwup ?"),(0,r.yg)("p",null,"The best ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/fwup-home/fwup"},"fwup")," definition is from its\nofficial project home:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"fwup is a configurable image-based software update utility for embedded\nLinux-based systems. It primarily supports software upgrade strategies that\nupdate entire root filesystem images at once. This includes strategies like\nswapping back and forth between A and B partitions, recovery partitions, and\nvarious trial update/failback scenarios. All software update information is\ncombined into a ZIP archive that may optionally be cryptographically signed.\nfwup has minimal dependencies and runtime requirements. Scripts are\nintentionally limited to make failure scenarios easier to reason about.\nDistribution of software update archives is not a feature. Users can call out\nto fwup to run upgrades from external media, stream them from the network, or\nscript them using a tool like Ansible if so desired.")),(0,r.yg)("p",null,"In practice, fwup is simple and easy to use."),(0,r.yg)("h2",{id:"ypoe-setup"},"YP/OE setup"),(0,r.yg)("p",null,"I'll try to simplify the YP/OE setup to just tree small steps:"),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"The YP documentation is very good. I strong recommend its reading. For this\nsection the release version used is\n",(0,r.yg)("a",{parentName:"p",href:"https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html"},"scarthgap"),"."),(0,r.yg)("p",{parentName:"admonition"},"One important point is to double check the\n",(0,r.yg)("a",{parentName:"p",href:"https://docs.yoctoproject.org/ref-manual/system-requirements.html#required-packages-for-the-build-host."},"Required Packages for the Build Host"))),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Cloning all repositories for scarthgap release:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"git clone --branch scarthgap git://git.yoctoproject.org/poky\ngit clone --branch scarthgap https://github.com/openembedded/meta-openembedded.git\ngit clone --branch scarthgap https://github.com/fwup-home/meta-fwup\ngit clone --branch scarthgap https://github.com/meta-erlang/meta-erlang\ngit clone --branch scarthgap https://github.com/meta-erlang/meta-axon\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Source the init build environment script:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd poky\nsource oe-init-build-env ../build\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Add the needed layers:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"bitbake-layers add-layer ../meta-openembedded/meta-oe\nbitbake-layers add-layer ../meta-erlang\nbitbake-layers add-layer ../meta-axon\nbitbake-layers add-layer ../meta-fwup\n")))),(0,r.yg)("p",null,"Why four layers are needed ? Because the YP/OE approach is to isolate components\ninto layer in order to maximize the software reusability."),(0,r.yg)("h2",{id:"configuring-the-build-environment"},"Configuring the build environment"),(0,r.yg)("p",null,"For this tutorial, the quickest way is edit and add the ",(0,r.yg)("em",{parentName:"p"},"conf/local.conf"),"\nconfiguration file."),(0,r.yg)("p",null,"We start defining the MACHINE and DISTRO:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'MACHINE = "raspberrypi0-wifi"\nDISTRO = "poky"\n')),(0,r.yg)("p",null,"The layer\n",(0,r.yg)("a",{parentName:"p",href:"https://meta-raspberrypi.readthedocs.io/en/latest/readme.html"},"meta-raspberry"),"\nprovides the machine ",(0,r.yg)("em",{parentName:"p"},"raspberrypi0-wifi")," which is what I'm using for this\ndemonstration as my current development board is a raspberry pi 0."),(0,r.yg)("p",null,"Next, we need to enable some raspberry features like UART and USB host support\n(it's important to get some network connectivity):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'tee -a <<EOF\n# https://meta-raspberrypi.readthedocs.io/en/latest/extra-build-config.html#enable-uart\nENABLE_UART = "1"\n\n# https://meta-raspberrypi.readthedocs.io/en/latest/extra-build-config.html#enable-usb-host-support\nENABLE_DWC2_PERIPHERAL = "1"\n\n# add some package to allow networking\nIMAGE_INSTALL:append = " raspi2go kernel-module-libcomposite kernel-module-g-ether kernel-module-dwc2"\nEOF\n')),(0,r.yg)("p",null,"As YP/OE supports many types of image outputs, we want to be specific here and\npick only the ",(0,r.yg)("em",{parentName:"p"},"fwup")," type."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'tee -a <<EOF\n# enable support for making fwup images\nIMAGE_CLASSES += "image_types_fwup"\nIMAGE_FSTYPES = "fwup"\nEOF\n')),(0,r.yg)("p",null,"The fwup type is provided by the bbclass\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/fwup-home/meta-fwup/blob/master/classes/image_types_fwup.bbclass"},"image_types_fwup.bbclass"),".\nIt relies on wic image generator and uses their build artifacts for bootloader\nand rootfs."),(0,r.yg)("p",null,"Ok, now we also want to include Erlang/OTP and Elixir. As meta-erlang provides\nmany versions, I recommend to stick with a specific one. In our case the latest\n1.17.x and 27.0.x are good:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'tee -a <<EOF\n# select specific elixir and erlang versions\nPREFERRED_VERSION_elixir = "1.17%"\nPREFERRED_VERSION_elixir-native = "1.17%"\nPREFERRED_VERSION_nativesdk-elixir = "1.17%"\nPREFERRED_VERSION_erlang = "27.0%"\nPREFERRED_VERSION_erlang-native = "27.0%"\nPREFERRED_VERSION_nativesdk-erlang = "27.0%"\nEOF\n')),(0,r.yg)("p",null,"Finally, add erlang and elixir to the image:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'tee -a <<EOF\n# add erlang and elixir into image\nIMAGE_INSTALL:append = " erlang elixir"\nEOF\n')),(0,r.yg)("p",null,"Now that the configuration is over. Let's start a build:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"bitbake core-image-full-cmdline\n")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"It might take some time for the first build. As YP/OE will build everything from\nscratch. The next builds should be faster.")),(0,r.yg)("p",null,"Once the build has finished, let's inspect the build outputs:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd tmp/deploy/images/raspberrypi0-wifi\nls -l core-image-full-cmdline*\n-rw-r--r-- 2 builder builder 68465478 Sep 24 21:19 core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw\nlrwxrwxrwx 2 builder builder       66 Sep 24 21:19 core-image-full-cmdline-raspberrypi0-wifi.rootfs.fw -> core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw\n")),(0,r.yg)("p",null,"The folder ",(0,r.yg)("em",{parentName:"p"},"tmp/deploy/images/raspberrypi0-wifi")," has many files generated from\nthe build tasks. We are interested only the final .fw file. In this case we the\nfile ",(0,r.yg)("em",{parentName:"p"},"core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw")," is\nwhat we need."),(0,r.yg)("h2",{id:"deploying-fw-images"},"Deploying .fw images"),(0,r.yg)("p",null,"Before deploying, let's understand a bit the image partition layout created by\nYP/OE and fwup tool:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"# +----------------------------+\n# | MBR                        |\n# +----------------------------+\n# | Firmware configuration data|\n# | (formatted as uboot env)   |\n# +----------------------------+\n# | p0*: Boot A (FAT32)        |\n# | zImage, bootcode.bin,      |\n# | config.txt, etc.           |\n# +----------------------------+\n# | p0*: Boot B (FAT32)        |\n# +----------------------------+\n# | p1*: Rootfs A (ext4)       |\n# +----------------------------+\n# | p1*: Rootfs B (ext4)       |\n# +----------------------------+\n# | p2: Application (ext4)     |\n# +----------------------------+\n")),(0,r.yg)("p",null,"There is a total of three partitions. Where partition p0 and p1 have been\ndivided by half each one. It's not clear to get this idea. So, I recommend you\nto take a look into fwup configuration file used by this tutorial,\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-axon/blob/master/fwup/core-image-full-cmdline.raspberrypi0-wifi.fwup"},"core-image-full-cmdline.raspberrypi0-wifi.fwup"),".\nThat file has been adapted from the original\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/nerves-project/nerves_system_rpi0/blob/main/fwup.conf"},"nerves_system_rpi0 fwup configuration"),"."),(0,r.yg)("h3",{id:"burn-a-complete-image"},"burn a complete image"),(0,r.yg)("p",null,"My target sdcard has 16GB there is enough space for the core-image-full-cmdline\nimage. To start using it we need write a ",(0,r.yg)("em",{parentName:"p"},"complete")," image to the sdcard. By\ncomplete image also means the the partition A will be used when the board gets\nbooted."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ sudo fwup -a -d /dev/sda -t complete -i core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw\n100% [====================================] 68.46 MB in / 382.20 MB out\nSuccess!\nElapsed time: 55.932 s\n")),(0,r.yg)("p",null,"When I inserted the sdcard into my workstation, my host Linux recognized it as\n",(0,r.yg)("em",{parentName:"p"},"/dev/sda")," device, using sudo when calling fwup took almost 56 seconds to write\n382 MB to the sdcard."),(0,r.yg)("p",null,"That is all we need to get the sdcard and boot it into raspberry board."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"The next output is just the partition layout for a real board booted from the\nsdcard.")),(0,r.yg)("p",null,"And in fact, it works as expected:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"root@raspberrypi0-wifi:~# sfdisk -l /dev/mmcblk0\nDisk /dev/mmcblk0: 14.84 GiB, 15931539456 bytes, 31116288 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x00000000\n\nDevice         Boot   Start      End  Sectors  Size Id Type\n/dev/mmcblk0p1 *         63   266302   266240  130M  c W95 FAT32 (LBA)\n/dev/mmcblk0p2       532543  1011774   479232  234M 83 Linux\n/dev/mmcblk0p3      1491007 31116287 29625281 14.1G 83 Linux\n")),(0,r.yg)("p",null,"Checking erl and iex versions:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"root@raspberrypi0-wifi:~# erl\nErlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nEshell V15.0.1 (press Ctrl+G to abort, type help(). for help)\n1>\nUser switch command (type h for help)\n --\x3e q\n\nroot@raspberrypi0-wifi:~# iex\nErlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nwarning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche\nInteractive Elixir (1.17.1) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)>\n")),(0,r.yg)("h3",{id:"move-to-b-partition"},"move to B partition"),(0,r.yg)("p",null,"Still using the image\ncore-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw, I want to\ntest the B upgrade path. For that, the easiest way is to call fwup (which has\nbeen installed into the image) passing some usual flags for this\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/fwup-home/fwup?tab=readme-ov-file#whats-something-cool-that-you-can-do-with-fwup"},"kind of operation"),":"),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"The instructions for setting board's network stack using USB is not part of the scope of this tutorial.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ cat core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw | ssh root@192.168.7.7 'fwup -v -a -U -d /dev/mmcblk0 -t upgrade.b'\nfwup: require-partition-offset(1, 532543) -> met\nfwup: require-uboot-variable(uboot-env, a.nerves_fw_platform) -> met\nfwup: require-uboot-variable(uboot-env, a.nerves_fw_architecture) -> met\nfwup: Upgrading partition B\n100% [====================================] 68.46 MB in / 381.82 MB out\nSuccess!\nElapsed time: 1 min 30 s\n")),(0,r.yg)("p",null,"The important argument is the ",(0,r.yg)("inlineCode",{parentName:"p"},"-t upgrade.b")," telling to fwup which partition\nwill be upgraded."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"In my setup I called ",(0,r.yg)("inlineCode",{parentName:"p"},"reboot")," to get raspberry rebooted.")),(0,r.yg)("p",null,"Checking erl and iex versions:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"root@raspberrypi0-wifi:~# erl\nErlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nEshell V15.0.1 (press Ctrl+G to abort, type help(). for help)\n1>\nUser switch command (type h for help)\n --\x3e q\n\nroot@raspberrypi0-wifi:~# iex\nErlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nwarning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche\nInteractive Elixir (1.17.1) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)>\n")),(0,r.yg)("p",null,"The versions are still 1.17.x and 27.0.x, as expected."),(0,r.yg)("h3",{id:"move-from-b-to-a-partition"},"move from B to A partition"),(0,r.yg)("p",null,"For testing purposes, let's change the Elixir preferred version from 1.17.x to\n1.16.x. For that, edit the local.conf file and change the\n",(0,r.yg)("inlineCode",{parentName:"p"},"PREFERRED_VERSION_elixir*")," variables:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'tee -a <<EOF\n# select specific elixir and erlang versions\nPREFERRED_VERSION_elixir = "1.16%"\nPREFERRED_VERSION_elixir-native = "1.16%"\nPREFERRED_VERSION_nativesdk-elixir = "1.16%"\nEOF\n')),(0,r.yg)("p",null,"Running the build again:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"bitbake core-image-full-cmdline\n")),(0,r.yg)("p",null,"The result will be a new core-image-full-cmdline-raspberrypi0-wifi.rootfs-","*",".fw\nfilename which is ready to be used:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ cat core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240920190231.fw | ssh root@192.168.7.7 'fwup -v -a -U -d /dev/mmcblk0 -t upgrade.a'\nfwup: require-partition-offset(1, 1011775) -> met\nfwup: require-uboot-variable(uboot-env, b.nerves_fw_platform) -> met\nfwup: require-uboot-variable(uboot-env, b.nerves_fw_architecture) -> met\nfwup: Upgrading partition A\n100% [====================================] 68.46 MB in / 381.82 MB out\nSuccess!\nElapsed time: 1 min 30 s\n")),(0,r.yg)("p",null,"Rebooting the board and checking the iex version, we get:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"root@raspberrypi0-wifi:~# erl\nErlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nEshell V15.0.1 (press Ctrl+G to abort, type help(). for help)\n1>\nUser switch command (type h for help)\n --\x3e q\nroot@raspberrypi0-wifi:~# iex\nwarning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche\nErlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nInteractive Elixir (1.16.3) - press Ctrl+C to exit (type h() ENTER for help)\n")),(0,r.yg)("p",null,"That works! Erlang/OTP 27 and Elixir 1.16.3."),(0,r.yg)("h2",{id:"conclusions"},"Conclusions"),(0,r.yg)("p",null,"The ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/fwup-home/fwup"},"fwup")," tool has shown as a feasibly\napproach for image A/B software upgrades. It is integrated into YP/OE ecosystem\nthrough ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/fwup-home/meta-fwup"},"meta-fwup")," layer and ready to\ntry."),(0,r.yg)("p",null,"fwup is also used by Nerves Project together with others Elixir components in\norder to provide a full\n",(0,r.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Over-the-air_update"},"OTA updates"),"."))}m.isMDXComponent=!0}}]);