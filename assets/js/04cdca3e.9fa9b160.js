"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[2536],{5788:(e,t,r)=>{r.d(t,{Iu:()=>m,yg:()=>u});var a=r(1504);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,l=function(e,t){if(null==e)return{};var r,a,l={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var p=a.createContext({}),g=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=g(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,l=e.mdxType,n=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=g(r),d=l,u=s["".concat(p,".").concat(d)]||s[d]||h[d]||n;return r?a.createElement(u,i(i({ref:t},m),{},{components:r})):a.createElement(u,i({ref:t},m))}));function u(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=r.length,i=new Array(n);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:l,i[1]=o;for(var g=2;g<n;g++)i[g]=r[g];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},524:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>g});var a=r(5072),l=(r(1504),r(5788));const n={sidebar_position:4,description:"Hello world examples like."},i="Hello World examples for meta-erlang",o={unversionedId:"guides/guides-hello-world",id:"version-scarthgap/guides/guides-hello-world",title:"Hello World examples for meta-erlang",description:"Hello world examples like.",source:"@site/versioned_docs/version-scarthgap/guides/guides-hello-world.md",sourceDirName:"guides",slug:"/guides/guides-hello-world",permalink:"/docs/scarthgap/guides/guides-hello-world",draft:!1,editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/versioned_docs/version-scarthgap/guides/guides-hello-world.md",tags:[],version:"scarthgap",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Hello world examples like."},sidebar:"tutorialSidebar",previous:{title:"My application example",permalink:"/docs/scarthgap/guides/guides-my-application"},next:{title:"Building SDKs",permalink:"/docs/scarthgap/guides/guides-development"}},p={},g=[],m={toc:g},s="wrapper";function h(e){let{components:t,...r}=e;return(0,l.yg)(s,(0,a.c)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"hello-world-examples-for-meta-erlang"},"Hello World examples for meta-erlang"),(0,l.yg)("p",null,"The meta-erlang layer has many recipes for real world applications. On the other\nhand there is a repository called\n",(0,l.yg)("a",{parentName:"p",href:"https://github.com/meta-erlang/hello-world"},"meta-erlang/hello-world")," which has\na few examples showing how application written in Erlang and Elixir could be\nimplemented and integrated with YP/OE recipes."),(0,l.yg)("p",null,"For each example there is a correspondent recipe. The following table sumarize\nthe current examples:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Example Name"),(0,l.yg)("th",{parentName:"tr",align:null},"Language"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Recipe"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/hello-world/tree/master/hello-http-server"},"hello-http-server")),(0,l.yg)("td",{parentName:"tr",align:null},"Erlang"),(0,l.yg)("td",{parentName:"tr",align:null},"A minimal http server written in Nitrogen"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-http-server/hello-http-server_0.1.0.bb"},"hello-http-server_0.1.0.bb"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/hello-world/tree/master/hello-rabbitmq"},"hello-rabbitmq")),(0,l.yg)("td",{parentName:"tr",align:null},"Erlang"),(0,l.yg)("td",{parentName:"tr",align:null},"A minimal client that sends heart beats to a rabbitmq server"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-rabbitmq/hello-rabbitmq_0.1.0.bb"},"hello-rabbitmq_0.1.0.bb"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/hello-world/tree/master/hello-erlang-interoperability"},"hello-erlang-interoperability")),(0,l.yg)("td",{parentName:"tr",align:null},"Erlang"),(0,l.yg)("td",{parentName:"tr",align:null},"A minimal Erlang application with Erlang port driver written in C"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-erlang-interoperability/hello-erlang-interoperability_0.1.0.bb"},"hello-erlang-interoperability_0.1.0.bb"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/hello-world/tree/master/hello-erlang-c-node"},"hello-erlang-c-node")),(0,l.yg)("td",{parentName:"tr",align:null},"Erlang"),(0,l.yg)("td",{parentName:"tr",align:null},"A minimal Erlang C Node"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-erlang-interoperability/hello-erlang-c-node_0.1.0.bb"},"hello-erlang-c-node_0.1.0.bb"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/hello-world/tree/master/hello-phoenix"},"hello-phoenix")),(0,l.yg)("td",{parentName:"tr",align:null},"Elixir"),(0,l.yg)("td",{parentName:"tr",align:null},"A minimal phoenix server"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-phoenix/hello-phoenix_0.1.0.bb"},"hello-phoenix_0.1.0.bb"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/hello-world/tree/master/hello-elixir-interoperability"},"hello-elixir-interoperability")),(0,l.yg)("td",{parentName:"tr",align:null},"Elixir"),(0,l.yg)("td",{parentName:"tr",align:null},"A minimal Elixir application with Erlang NIF written in C"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-elixir-interoperability/hello-elixir-interoperability_0.1.0.bb"},"hello-elixir-interoperability_0.1.0.bb"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/hello-world/tree/master/hello-elixir-rustler"},"hello-elixir-rustler")),(0,l.yg)("td",{parentName:"tr",align:null},"Elixir"),(0,l.yg)("td",{parentName:"tr",align:null},"A ",(0,l.yg)("a",{parentName:"td",href:"https://github.com/rusterlium/rustler"},"rustler")," getting started application"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-elixir-rustler/hello-elixir-rustler_0.1.0.bb"},"hello-elixir-rustler_0.1.0.bb"))))),(0,l.yg)("p",null,"Those examples are great to check how the build tool (rebar3, mix, Makefiles)\nwere implemented in order to build successfuly in a cross-compile environment.\nHowever, bear in mind that the examples are very simple and does not do anything\nreally useful. When trying the examples, make sure to use a recent YP/OE version\nas there is no guarantee that they will works with all Erlang, Elixir and YP/OE\nversion combinations."))}h.isMDXComponent=!0}}]);