"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[4272],{5788:(e,t,a)=>{a.d(t,{Iu:()=>p,yg:()=>h});var n=a(1504);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),c=s(a),g=o,h=c["".concat(l,".").concat(g)]||c[g]||u[g]||r;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=g;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[c]="string"==typeof e?e:o,i[1]=m;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},4756:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>m,toc:()=>s});var n=a(5072),o=(a(1504),a(5788));const r={title:"meta-erlang meets atomvm",authors:["joaohf"],tags:["meta-erlang","atomvm"]},i=void 0,m={permalink:"/blog/2023/11/02/index",editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2023-11-02/index.md",source:"@site/blog/2023-11-02/index.md",title:"meta-erlang meets atomvm",description:"Intro",date:"2023-11-02T00:00:00.000Z",formattedDate:"November 2, 2023",tags:[{label:"meta-erlang",permalink:"/blog/tags/meta-erlang"},{label:"atomvm",permalink:"/blog/tags/atomvm"}],readingTime:3.975,hasTruncateMarker:!1,authors:[{name:"Jo\xe3o Henrique Ferreira de Freitas",title:"Maintainer of meta-erlang",url:"https://github.com/joaohf",imageURL:"https://github.com/joaohf.png",key:"joaohf"}],frontMatter:{title:"meta-erlang meets atomvm",authors:["joaohf"],tags:["meta-erlang","atomvm"]},prevItem:{title:"New Erlang releases 24.3.4.15, 25.3.2.8, 26.2.1",permalink:"/blog/2023/12/25/index"},nextItem:{title:"Exploring x32 psABI for Erlang/OTP",permalink:"/blog/2023/09/02/index"}},l={authorsImageUrls:[void 0]},s=[{value:"Intro",id:"intro",level:2},{value:"atomvm recipe",id:"atomvm-recipe",level:3},{value:"atomvm examples",id:"atomvm-examples",level:3},{value:"Build and run session",id:"build-and-run-session",level:3},{value:"Integration outcomes and questions",id:"integration-outcomes-and-questions",level:3}],p={toc:s},c="wrapper";function u(e){let{components:t,...a}=e;return(0,o.yg)(c,(0,n.c)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"intro"},"Intro"),(0,o.yg)("p",null,"From ",(0,o.yg)("a",{parentName:"p",href:"https://www.atomvm.net/"},"atomvm.net")," website, atomvm is:"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"AtomVM is a lightweight implementation of the the Bogdan Erlang Abstract\nMachine (aka, the BEAM), a virtual machine that can execute byte-code\ninstructions compiled from Erlang or Elixir source code. AtomVM supports a\nlimited but functional subset of the BEAM opcodes, and also includes a small\nsubset of the Erlang/OTP standard libraries, all optimized to run on tiny\nmicro-controllers. With AtomVM, you can write your IoT applications in a\nfunctional programming language, using a modern actor-based concurrency model,\nmaking them vastly easier to write and understand!")),(0,o.yg)("p",null,"One of the atomvm goals is the possibility to run BEAM code on really small\nsystems like MCUs."),(0,o.yg)("p",null,"For a while, I was wondering what could be the benefits of integrating atomvm\ninto meta-erlang recipes. It didn't look to make any sense for me. Then, I\nstarted playing with that just to see if I was able to run an atomvm program in\nQemu emulation."),(0,o.yg)("p",null,"Suddenly, I ended up with all pieces to run atomvm programs integrated with\nmeta-erlang. So this post is about how it is possible to use atomvm in Linux\nimages based on YP/OE."),(0,o.yg)("h3",{id:"atomvm-recipe"},"atomvm recipe"),(0,o.yg)("p",null,"The\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/atomvm_0.6.0-alpha1.bb"},"atomvm.bb"),"\nrecipe is very simple because the atomvm project is based on CMake and YP has\nsupport to it."),(0,o.yg)("p",null,"However, I had to make a specific recipe to isolate the tool packbeam. The\npackbeam tool lives inside atomvm source code I've created a recipe called\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/packbeam_0.6.0-alpha1.bb"},"packbeam.bb"),"\nwhich compiles packbeam as native (that is runs on build host machine). That was\nnecessary because the atomvm recipe crosscompile the atomvm and packbeam is used\nby CMake to pack all .beam files to create .avm files."),(0,o.yg)("p",null,"To make atomvm recipe works, I applied a patch\n(",(0,o.yg)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/files/0001-Remove-PackBEAM-dependency-rules.patch"},"0001-Remove-PackBEAM-dependency-rules.patch"),")\nto disable the packbeam dependency internally. That allows me to use my packbeam\ntool from sysroot-native instead."),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"The mentioned patch works for my needs but is not target for sending a PR to\natomvm project.")),(0,o.yg)("h3",{id:"atomvm-examples"},"atomvm examples"),(0,o.yg)("p",null,"There is the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/atomvm/atomvm_examples"},"atomvm_examples"),"\nproject that provides great source of ideas and examples. I wish to create some\nrecipes to build and pack each example. So I started with the\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/atomvm/atomvm_examples/tree/master/erlang/system_info"},"system_info"),"."),(0,o.yg)("p",null,"The following code is the\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-erlang/blob/master/recipes-examples/atomvm-examples/atomvm-examples-system-info_0.1.0.bb"},"atomvm-examples-system-info_0.1.0.bb"),"\nrecipe. And should be enough for any Erlang project build which uses\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/atomvm/atomvm_rebar3_plugin"},"atomvm_rebar3_plugin"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'SUMMARY = "Collects and displays various information about AtomVM and the environment in which it is running."\nSECTION = "examples"\nLICENSE = "Apache-2.0"\nLIC_FILES_CHKSUM = "file://LICENSE;md5=745e8b23501916820b8a509f8e3ba3d4"\n\nATOMVM_EXAMPLE = "erlang/system_info"\n\nS = "${WORKDIR}/system_info"\n\nSRCREV = "8e54aaf475a74b59a20f914e575202b1810a7954"\nPV = "0.1.0+git${SRCPV}"\nSRC_URI = "git://github.com/atomvm/atomvm_examples;branch=master;subpath=${ATOMVM_EXAMPLE};protocol=https"\n\ninherit atomvm\n')),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"inherit atomvm")," inherits the\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-erlang/blob/master/classes/atomvm.bbclass"},"atomvm.bbclass"),"\nwhich implements rebar3 commands to compile and create avm files."),(0,o.yg)("h3",{id:"build-and-run-session"},"Build and run session"),(0,o.yg)("p",null,"To build the atomvm-examples-system-info recipe, we call bitbake like that:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"bitbake atomvm-examples-system-info\n")),(0,o.yg)("p",null,"Now, we want to run system_info application inside Qemu. The first step is to\ninstall the atomvm-examples-system-info in the final image."),(0,o.yg)("p",null,"In ",(0,o.yg)("em",{parentName:"p"},"conf/local.conf")," file add the recipe name to the IMAGE_INSTALL variable:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'IMAGE_INSTALL:append:pn-core-image-minimal = " atomvm-examples-system-info"\n')),(0,o.yg)("p",null,"When building the core-image-minimal image and running it with Qemu:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"runqemu core-image-minimal slirp nographic serialstdio\n")),(0,o.yg)("p",null,"Inside the Qemu, let's run our first atomvm program:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'root@qemux86-64:~# uname -a\nLinux qemux86-64 6.5.7-yocto-standard #1 SMP PREEMPT_DYNAMIC Thu Oct 19 14:51:09 UTC 2023 x86_64 GNU/Linux\nroot@qemux86-64:~# atomvm /usr/share/atomvm-examples-system-info/system_info.avm\nUnsupported line_ref tag: 0\nSystemInfo:\n===========\natom_count: 162\nport_count: 0\nprocess_count: 1\nsystem_architecture: <<"Linux--x86_64">>\nword_size: 8\n\nPlatformInfo:\n=============\n\nProcessInfo:\n============\nPid: <0.1.0>\nheap_size: 51\nmemory: 848\nmessage_queue_len: 0\nstack_size: 9\n\nReturn value: ok\n')),(0,o.yg)("p",null,"That works as expected."),(0,o.yg)("h3",{id:"integration-outcomes-and-questions"},"Integration outcomes and questions"),(0,o.yg)("p",null,"The recipes created so far covers running atomvm for generic unix (Linux in my\ncase). Well, if you can afford running Erlang/Elixir on Linux, then there is no\nselling point to use atomvm. That is true if we look at the current state of\natomvm project for generic unix platform."),(0,o.yg)("p",null,"Maybe in the future we can see extensions to generic unix allowing it to talk\nwith i2c, gpio, spi on Linux for example, then atomvm and meta-erlang starts to\ncover a lot of possibilities. Projects like\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/eclipse/mraa"},"Eclipse Mraa")," could be integrated with atomvm\nproviding all the low level access for low speed IO."),(0,o.yg)("p",null,"There is another idea for meta-erlang and atomvm which is the heterogeneous\nsystem with a combination of:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'Linux based images running on the "application processing unit" (CPU)'),(0,o.yg)("li",{parentName:"ul"},'and "real-time processing unit" (MCU) running an atomvm program.')),(0,o.yg)("p",null,"meta-erlang could build atomvm images for MCU as well for CPU. The seeds for\nthis integration was described in this talk\n",(0,o.yg)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=mFgiIXv7b5U"},"One Build to Rule Them All: Building FreeRTOS & Linux Using Yocto - Alejandro Hernandez"),"\n(the pdf is\n",(0,o.yg)("a",{parentName:"p",href:"https://elinux.org/images/9/9f/ELC_Europe_2019_Presentation_AlejandroHernandez_FreeRTOS_ToUpload.pdf"},"here"),").\nIn that talk Alejandro shows how YP/OE projects can build MCU target images.\nUsing the same principles also works for meta-erlang."))}u.isMDXComponent=!0}}]);