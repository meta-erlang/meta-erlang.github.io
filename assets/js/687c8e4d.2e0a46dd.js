"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[8036],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(g,i(i({ref:t},s),{},{components:n})):a.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2,sidebar_label:"Quickstart",sidebar_class_name:"green",description:"Getting start with meta-erlang."},i="Quickstart",l={unversionedId:"guides-quickstart",id:"guides-quickstart",title:"Quickstart",description:"Getting start with meta-erlang.",source:"@site/docs/guides-quickstart.md",sourceDirName:".",slug:"/guides-quickstart",permalink:"/docs/guides-quickstart",draft:!1,editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/docs/guides-quickstart.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Quickstart",sidebar_class_name:"green",description:"Getting start with meta-erlang."},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/"},next:{title:"Guides",permalink:"/docs/category/guides"}},p={},c=[],s={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"This quickstart guide uses the same steps stated at\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.yoctoproject.org/brief-yoctoprojectqs/brief-yoctoprojectqs.html"},"Yocto Project Quick Build"),"\nwith additional steps to get an erlang runtime up and running on the target\ndevice."),(0,r.kt)("p",null,"Clone ",(0,r.kt)("em",{parentName:"p"},"meta-erlang"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/meta-erlang/meta-erlang.git\n")),(0,r.kt)("p",null,"Clone ",(0,r.kt)("em",{parentName:"p"},"poky")," and checkout branch ",(0,r.kt)("em",{parentName:"p"},"kirkstone"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --branch kirkstone git://git.yoctoproject.org/poky\n")),(0,r.kt)("p",null,"Clone ",(0,r.kt)("em",{parentName:"p"},"meta-openembedded")," and checkout branch ",(0,r.kt)("em",{parentName:"p"},"kirkstone"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --branch kirkstone https://github.com/openembedded/meta-openembedded.git\n")),(0,r.kt)("p",null,"Move to ",(0,r.kt)("em",{parentName:"p"},"poky")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd poky\n")),(0,r.kt)("p",null,"Initialize the build environment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"source oe-init-build-env ../build\n")),(0,r.kt)("p",null,"Add ",(0,r.kt)("em",{parentName:"p"},"meta-oe")," and ",(0,r.kt)("em",{parentName:"p"},"meta-erlang")," to ",(0,r.kt)("em",{parentName:"p"},"conf/layer.conf"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bitbake-layers add-layer ../meta-openembedded/meta-oe\nbitbake-layers add-layer ../meta-erlang\n")),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"erlang")," package to ",(0,r.kt)("inlineCode",{parentName:"p"},"IMAGE_INSTAL")," in ",(0,r.kt)("em",{parentName:"p"},"conf/local.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'IMAGE_INSTALL:append = \" erlang\"' >> conf/local.conf\n")),(0,r.kt)("p",null,"Build the ",(0,r.kt)("em",{parentName:"p"},"core-image-minimal"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bitbake core-image-minimal\n")),(0,r.kt)("p",null,"Run the qemu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"runqemu qemux86\n")),(0,r.kt)("p",null,"A new window will open. Login as ",(0,r.kt)("em",{parentName:"p"},"root")," and call ",(0,r.kt)("em",{parentName:"p"},"erl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# erl\nErlang/OTP 21 [erts-10.1] [source] [smp:1:1] [ds:1:1:10] [async-threads:1]\n\nEshell V10.1 (abort with ^G)\n1> erlang:system_info(cpu_topology).\n[{processor,{logical,0}}]\n")),(0,r.kt)("p",null,"The other sections of this guide shows additional steps to create your own\nerlang application and run inside a custom image."))}m.isMDXComponent=!0}}]);