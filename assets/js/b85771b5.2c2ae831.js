"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[7898],{7680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var a=n(4848),o=n(8453);const r={title:"meta-erlang meets atomvm",authors:["joaohf"],tags:["meta-erlang","atomvm"]},i=void 0,l={permalink:"/blog/2023/11/02/index",editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2023-11-02/index.md",source:"@site/blog/2023-11-02/index.md",title:"meta-erlang meets atomvm",description:"Intro",date:"2023-11-02T00:00:00.000Z",tags:[{inline:!0,label:"meta-erlang",permalink:"/blog/tags/meta-erlang"},{inline:!0,label:"atomvm",permalink:"/blog/tags/atomvm"}],readingTime:3.99,hasTruncateMarker:!0,authors:[{name:"Jo\xe3o Henrique Ferreira de Freitas",title:"Maintainer of meta-erlang",url:"https://github.com/joaohf",imageURL:"https://github.com/joaohf.png",key:"joaohf",page:null}],frontMatter:{title:"meta-erlang meets atomvm",authors:["joaohf"],tags:["meta-erlang","atomvm"]},unlisted:!1,prevItem:{title:"New Erlang releases 24.3.4.15, 25.3.2.8, 26.2.1",permalink:"/blog/2023/12/25/index"},nextItem:{title:"Exploring x32 psABI for Erlang/OTP",permalink:"/blog/2023/09/02/index"}},s={authorsImageUrls:[void 0]},m=[{value:"Intro",id:"intro",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",h2:"h2",p:"p",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"intro",children:"Intro"}),"\n",(0,a.jsxs)(t.p,{children:["From ",(0,a.jsx)(t.a,{href:"https://www.atomvm.net/",children:"atomvm.net"})," website, atomvm is:"]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"AtomVM is a lightweight implementation of the the Bogdan Erlang Abstract\nMachine (aka, the BEAM), a virtual machine that can execute byte-code\ninstructions compiled from Erlang or Elixir source code. AtomVM supports a\nlimited but functional subset of the BEAM opcodes, and also includes a small\nsubset of the Erlang/OTP standard libraries, all optimized to run on tiny\nmicro-controllers. With AtomVM, you can write your IoT applications in a\nfunctional programming language, using a modern actor-based concurrency model,\nmaking them vastly easier to write and understand!"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"One of the atomvm goals is the possibility to run BEAM code on really small\nsystems like MCUs."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(6540);const o={},r=a.createContext(o);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);