"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[3648],{5788:(e,r,t)=>{t.d(r,{Iu:()=>p,yg:()=>g});var n=t(1504);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},b="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=c(t),d=a,g=b["".concat(s,".").concat(d)]||b[d]||u[d]||i;return t?n.createElement(g,o(o({ref:r},p),{},{components:t})):n.createElement(g,o({ref:r},p))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[b]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8708:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=t(5072),a=(t(1504),t(5788));const i={sidebar_position:4.5,sidebar_label:"ejabberd",sidebar_class_name:"green",description:"Shows how to set up and install ejabberd."},o="ejabberd",l={unversionedId:"applications/guides-ejabberd",id:"version-kirkstone/applications/guides-ejabberd",title:"ejabberd",description:"Shows how to set up and install ejabberd.",source:"@site/versioned_docs/version-kirkstone/applications/guides-ejabberd.md",sourceDirName:"applications",slug:"/applications/guides-ejabberd",permalink:"/docs/kirkstone/applications/guides-ejabberd",draft:!1,editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/versioned_docs/version-kirkstone/applications/guides-ejabberd.md",tags:[],version:"kirkstone",sidebarPosition:4.5,frontMatter:{sidebar_position:4.5,sidebar_label:"ejabberd",sidebar_class_name:"green",description:"Shows how to set up and install ejabberd."},sidebar:"tutorialSidebar",previous:{title:"riak",permalink:"/docs/kirkstone/applications/guides-riak"},next:{title:"tsung",permalink:"/docs/kirkstone/applications/guides-tsung"}},s={},c=[],p={toc:c},b="wrapper";function u(e){let{components:r,...t}=e;return(0,a.yg)(b,(0,n.c)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"ejabberd"},"ejabberd"),(0,a.yg)("p",null,"In this guide we are using the plain meta-erlang layer to build a XMPP server\ncalled ",(0,a.yg)("a",{parentName:"p",href:"https://www.ejabberd.im/"},"ejabberd"),"."),(0,a.yg)("p",null,"The recipe\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-erlang/blob/master/recipes-connectivity/ejabberd/ejabberd_20.03.bb"},"ejabberd_20.03.bb"),"\nbuilds the ejabberd using a crosscompile approach both to erlang and for the\nvarious Erlang NIFs. ejabberd uses a custom mix between autotools and rebar2.\nBasically rebar needs to know how to use the correct environment variables in\norder to compile all the C code."),(0,a.yg)("p",null,"As a final result, we are able to run an embedded ejabberd using qemu."),(0,a.yg)("p",null,"Follow the quickstart guide to get a basic working environment and then:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add ",(0,a.yg)("inlineCode",{parentName:"li"},"ejabberd")," package to ",(0,a.yg)("inlineCode",{parentName:"li"},"IMAGE_INSTAL")," in ",(0,a.yg)("em",{parentName:"li"},"conf/local.conf"))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"echo 'IMAGE_INSTALL:append = \" ejabberd\"' >> conf/local.conf\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Now its time to build the image:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"bitbake core-image-minimal\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"And check the results with qemu:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"runqemu core-image-minimal\n")),(0,a.yg)("p",null,"Connect to the qemu instance and call the main ejabberd admin tool:\n",(0,a.yg)("inlineCode",{parentName:"p"},"ejabberdctl"),"."),(0,a.yg)("p",null,"The default recipe creates a system user called ",(0,a.yg)("em",{parentName:"p"},"ejabberd")," by default."))}u.isMDXComponent=!0}}]);