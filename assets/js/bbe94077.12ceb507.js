"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[1455],{4376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var a=n(3762),i=n(4848),o=n(8453);const s={title:"meta-erlang on cloud I: EWAOL based",authors:["joaohf"],tags:["meta-erlang","cloud"]},r=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Intro",id:"intro",level:2},{value:"Putting everything together, first experiment",id:"putting-everything-together-first-experiment",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"intro",children:"Intro"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://www.yoctoproject.org/",children:"Yocto Project"})," has been made to create\nspecific embedded Linux distributions. And still does a great job on this field\nmaking it possible to run softwares in a range of target architectures."]}),"\n",(0,i.jsxs)(t.p,{children:["But, the term ",(0,i.jsx)(t.em,{children:"embedded Linux distribution"})," should be expanded a bit more; it's\nnot only about creating tiny filesystem within cross-compiled software, scripts\nand configurations targeting platforms with small footprint, CPU and memory\nconstraints."]}),"\n",(0,i.jsxs)(t.p,{children:["We could do more, actually there are people using the not so newly but still new\nARM processors that runs on cloud environment. For sure the most famous one is\nthe\n",(0,i.jsx)(t.a,{href:"https://aws.amazon.com/ec2/graviton/",children:"Graviton EC2 instances, on AWS cloud"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Looking into these Graviton processors and Yocto Project, what would it be\npossible ? Maybe running Yocto images on Graviton instances could be feasible\nenough to run some workload. And what about adding Erlang/OTP and Elixir to that\nmix ? Or running some advanced database or broker made with Erlang ?"}),"\n",(0,i.jsx)(t.p,{children:"That is exactly what we will try to experiment. In this first post about running\nmeta-erlang on cloud, we are going to look how it would be possible."}),"\n",(0,i.jsxs)(t.p,{children:["Actually there are folks whose made possible to run Yocto images on Graviton\ninstances. Technically is pretty simple and all bits and bytes have been\ndescribed in the blog post\n",(0,i.jsx)(t.a,{href:"https://aws.amazon.com/blogs/industries/building-an-automotive-embedded-linux-image-for-edge-using-arm-graviton-yocto-project-soafee/",children:"Building an Automotive Embedded Linux Image for Edge and Cloud Using Arm-based Graviton Instances, Yocto Project, and SOAFEE"}),".\nThe companion repository also worth the reading\n",(0,i.jsx)(t.a,{href:"https://github.com/aws4embeddedlinux/meta-aws-ewaol",children:"The meta-aws-ewaol repository"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The idea that [1] brings is part of another idea related to Software-Defined\nVehicles through Cloud [2] which is very excited. These references also cites a\nframework to build Edge Workloads [3] and in fact the EWAOL (Edge Workload\nAbstraction and Orchestration Layer) was used as a base to produce the\n",(0,i.jsx)(t.a,{href:"https://github.com/aws4embeddedlinux/meta-aws-ewaol",children:"meta-aws-ewaol"})," layer."]}),"\n",(0,i.jsx)(t.h2,{id:"putting-everything-together-first-experiment",children:"Putting everything together, first experiment"}),"\n",(0,i.jsxs)(t.p,{children:["So, based on all what has been described so far and as a first experience, I've\ntested meta-aws-ewaol setup and added meta-erlang into that. The aim was to run\n",(0,i.jsx)(t.code,{children:"erl"})," and ",(0,i.jsx)(t.code,{children:"iex"})," console on Graviton EC2 instances."]}),"\n",(0,i.jsxs)(t.p,{children:["I had to make a few fixes on meta-aws-ewaol and pushed the results here:\n",(0,i.jsx)(t.a,{href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang",children:"meta-aws-ewaol with meta-erlang"}),".\nThe rest of this session is a small guide that I made in order to run our first\nexperiment."]}),"\n",(0,i.jsxs)(t.p,{children:["With a ready Yocto environment, following the\n",(0,i.jsx)(t.a,{href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#building-ewaol",children:"Building EWAOL"}),"\nsession is enough to get the system built. It's just Yocto, nothing more."]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"You can create a free AWS account. There are Graviton instances included in\nthe AWS free tier. It's more than sufficient."}),"\n",(0,i.jsx)(t.li,{children:"Bear in mind that you don't need to be an AWS master but you will end up\nspending some time learning how to create AWS services."}),"\n"]})}),"\n",(0,i.jsxs)(t.p,{children:["The next step is to create and setup all the AWS infrastructure needed in order\nto push the Yocto image as AWS AMI and start the Graviton Instance. Lucky, there\nis a Cloud Formation template which performs the initial setup. The session\n",(0,i.jsx)(t.a,{href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#pre-requisites",children:"Pre-requisites"}),"\nhelps to clarify it."]}),"\n",(0,i.jsxs)(t.p,{children:["Then, having the Yocto image and the basic AWS account in place. It's time to\nuse\n",(0,i.jsx)(t.a,{href:"https://github.com/joaohf/meta-aws-ewaol/blob/main-add-meta-erlang/scripts/create-ami.sh",children:"a special script"}),"\nto convert Yocto image to an AMI image. Most of the job is done by awscli\ncommands. There is nothing related to Yocto here. The session\n",(0,i.jsx)(t.a,{href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#creating-ami-from-image-file",children:"Creating AMI from image file"}),"\ntells what is necessary to do."]}),"\n",(0,i.jsxs)(t.p,{children:["Finally, the last part. After pushing the AMI image to the S3 bucket. The fun\npart is to instantiate a Graviton instance (please refer to the session\n",(0,i.jsx)(t.a,{href:"https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#launch-the-ec2-image-as-usual-using-your-newly-created-ami",children:"Launch the EC2 Image as usual using your newly created AMI"}),")\nan run the EWAOL based image and test how Erlang and Elixir looks like."]}),"\n",(0,i.jsx)(t.p,{children:"I've added two screenshots below just to have a taste of the final results:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt Erlang console",src:n(4503).A+"",title:"Erlang console",width:"1229",height:"988"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"alt Elixir console",src:n(9086).A+"",title:"Elixir console",width:"1007",height:"167"})}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"This first experiment has finished and I can conclude two main bullets:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"It is possible to build a Yocto image and run it on Graviton instances"}),"\n",(0,i.jsx)(t.li,{children:"meta-aws-ewaol is a great start point. And the EWAOL framework looks solid for\nwhat it has been planned for."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["However, what I am looking for is to run a tiny image with just the necessary to\ninstantiate an ARM cloud instance running Erlang/Elixir. That is what the next\nblog post will do:\n",(0,i.jsx)(t.a,{href:"/blog/2023/02/04/index",children:"meta-erlang on cloud II, build your own application"})]}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["[1]:\n",(0,i.jsx)(t.a,{href:"https://aws.amazon.com/blogs/industries/building-an-automotive-embedded-linux-image-for-edge-using-arm-graviton-yocto-project-soafee/",children:"Building an Automotive Embedded Linux Image for Edge and Cloud Using Arm-based Graviton Instances, Yocto Project, and SOAFEE"})]}),"\n",(0,i.jsxs)(t.li,{children:["[2]:\n",(0,i.jsx)(t.a,{href:"https://armkeil.blob.core.windows.net/developer/Files/pdf/white-paper/arm-aws-edge-environmental-parity-wp.pdf",children:"Accelerating Software-Defined Vehicles through Cloud-To-Vehicle Edge Environmental Parity"})]}),"\n",(0,i.jsxs)(t.li,{children:["[3]:\n",(0,i.jsx)(t.a,{href:"https://ewaol.docs.arm.com/en/kirkstone-dev/index.html",children:"Edge Workload Abstraction and Orchestration Layer (EWAOL) Documentation"})]}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},4503:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/meta-erlang-gravitron-erl-74d44c9d063c73e6a3f61183f0bfcb5e.jpg"},9086:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/meta-erlang-gravitron-iex-96e0e9113e0029ca640a1e9d74e3eb94.jpg"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(6540);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}},3762:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/01/29/index","editUrl":"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2023-01-29/index.md","source":"@site/blog/2023-01-29/index.md","title":"meta-erlang on cloud I: EWAOL based","description":"\x3c!---","date":"2023-01-29T00:00:00.000Z","tags":[{"inline":true,"label":"meta-erlang","permalink":"/blog/tags/meta-erlang"},{"inline":true,"label":"cloud","permalink":"/blog/tags/cloud"}],"readingTime":4.085,"hasTruncateMarker":true,"authors":[{"name":"Jo\xe3o Henrique Ferreira de Freitas","title":"Maintainer of meta-erlang","url":"https://github.com/joaohf","imageURL":"https://github.com/joaohf.png","key":"joaohf","page":null}],"frontMatter":{"title":"meta-erlang on cloud I: EWAOL based","authors":["joaohf"],"tags":["meta-erlang","cloud"]},"unlisted":false,"prevItem":{"title":"meta-erlang on cloud II: building your own application","permalink":"/blog/2023/02/04/index"},"nextItem":{"title":"New Erlang releases 24.3.4.8, 25.1.2.1, 25.2.1","permalink":"/blog/2023/01/22/index"}}')}}]);