"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[2933],{5248:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guides/guides-my-application","title":"My application example","description":"How to integrate an application with meta-erlang.","source":"@site/versioned_docs/version-kirkstone/guides/guides-my-application.md","sourceDirName":"guides","slug":"/guides/guides-my-application","permalink":"/docs/kirkstone0/guides/guides-my-application","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/versioned_docs/version-kirkstone/guides/guides-my-application.md","tags":[],"version":"kirkstone","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"description":"How to integrate an application with meta-erlang."},"sidebar":"tutorialSidebar","previous":{"title":"Bitbake classes","permalink":"/docs/kirkstone0/guides/guides-bitbake-classes"},"next":{"title":"Hello World examples for meta-erlang","permalink":"/docs/kirkstone0/guides/guides-hello-world"}}');var s=i(4848),t=i(8453);const l={sidebar_position:3,description:"How to integrate an application with meta-erlang."},a="My application example",o={},d=[{value:"Erlang",id:"erlang",level:2},{value:"preparing the rebar.config file",id:"preparing-the-rebarconfig-file",level:3},{value:"inheriting rebar3 class",id:"inheriting-rebar3-class",level:3},{value:"Elixir",id:"elixir",level:2},{value:"release with distillery",id:"release-with-distillery",level:3},{value:"release with Elixir",id:"release-with-elixir",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"my-application-example",children:"My application example"})}),"\n",(0,s.jsxs)(n.p,{children:["When making Erlang or Elixir releases, usually the application run inside an\nembedded\n",(0,s.jsx)(n.a,{href:"https://erlang.org/doc/apps/erts/users_guide.html",children:"Erlang Run Time System"}),"\n(ERTS). The ERTS will be copied from Yocto build environment to the target\napplication."]}),"\n",(0,s.jsx)(n.p,{children:"The layer meta-erlang provides additional bitbake classes to handle this process\nwhen using rebar3 or mix tool. However the rebar.config and mix.exs\nconfiguration files need to be prepared in advanced to detected when special\nenvironment configuration are available in order to make the proper release."}),"\n",(0,s.jsx)(n.h2,{id:"erlang",children:"Erlang"}),"\n",(0,s.jsx)(n.h3,{id:"preparing-the-rebarconfig-file",children:"preparing the rebar.config file"}),"\n",(0,s.jsx)(n.p,{children:"A basic rebar3 config looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-erlang",children:'{erl_opts, [debug_info]}.\n{deps, []}.\n\n{relx, [{release, {\'axon\', "0.1.0"},\n         [axon,\n          sasl]},\n\n        {sys_config, "./config/sys.config"},\n        {vm_args, "./config/vm.args"},\n\n        {dev_mode, true},\n        {include_erts, true},\n        {system_libs, true},\n\n        {extended_start_script, true},\n        {generate_start_script, true}]\n}.\n\n{profiles, [{prod, [{relx, [{dev_mode, false}\n                            {include_erts, true},\n                            {system_libs, true}\n                           ]}]\n            }]\n}.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the above config, the ",(0,s.jsx)(n.code,{children:"relx"})," must have the ",(0,s.jsx)(n.code,{children:"include_erts"})," and ",(0,s.jsx)(n.code,{children:"system_libs"}),"\nsetted to ",(0,s.jsx)(n.code,{children:"true"}),", like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-erlang",children:"{relx, ...\n        {include_erts, true},\n        {system_libs, true},\n...\n}.\n"})}),"\n",(0,s.jsx)(n.h3,{id:"inheriting-rebar3-class",children:"inheriting rebar3 class"}),"\n",(0,s.jsxs)(n.p,{children:["The meta-erlang class ",(0,s.jsx)(n.em,{children:"rebar3"})," provides everything needed in order to generate a\ncross compiled Erlang release. The rebar3 class uses the ",(0,s.jsx)(n.code,{children:"rebar3 tar"})," command\npassing the following arguments:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"rebar as ${REBAR_PROFILE} tar"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"--system_libs ${REBAR3_TARGET_SYSTEM_LIBS}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"--include-erts ${REBAR3_TARGET_INCLUDE_ERTS}"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"-n ${REBAR3_RELEASE_NAME}"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["While ",(0,s.jsx)(n.em,{children:"REBAR3_TARGET_SYSTEM_LIBS"})," and ",(0,s.jsx)(n.em,{children:"REBAR3_TARGET_INCLUDE_ERTS"})," are detected\nautomatically pointing to the correct target paths; the variables\n",(0,s.jsx)(n.em,{children:"REBAR_PROFILE"})," and ",(0,s.jsx)(n.em,{children:"REBAR3_RELEASE_NAME"})," must be defined in the application\nrecipe like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bitbake",children:'inherit rebar3\n\nREBAR_PRODULE = "prod"\nREBAR3_RELEASE_NAME = "my-application"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Calling ",(0,s.jsx)(n.code,{children:"rebar3 tar"})," command is necessary to avoid less changes in the\napplication rebar.config file. So, rebar3 (which delegates to relx) will use the\ncorrect target paths."]}),"\n",(0,s.jsx)(n.p,{children:"!> Remember: rebar3 supports independent release configurations."}),"\n",(0,s.jsx)(n.h2,{id:"elixir",children:"Elixir"}),"\n",(0,s.jsx)(n.h3,{id:"release-with-distillery",children:"release with distillery"}),"\n",(0,s.jsxs)(n.p,{children:["This approach uses ",(0,s.jsx)(n.a,{href:"https://github.com/bitwalker/distillery",children:"distillery"})," to\nhandle the release generation. The usual config is documented\n",(0,s.jsx)(n.a,{href:"https://hexdocs.pm/distillery/introduction/installation.html",children:"here"}),". An extra\nstep is necessary to copy the crosscompile elixir and erlang libraries to the\nrelease package. The following code show the additional configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-erlang",children:'environment :prod do\n  # MIX_TARGET_INCLUDE_ERTS is set by meta-erlang/classes/mix.bbclass\n  set include_erts: System.get_env("MIX_TARGET_INCLUDE_ERTS")\n  set include_src: false\n  set cookie: :"d.K@rG|YpY`|?i&]Fsdljji)JMhk)%j)}f|Y6cquU!He<]u=sHp`.o2p[I3ee]gD"\n  set vm_args: "rel/vm.args"\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"include_erts"})," distillery config will use the value from\nMIX_TARGET_INCLUDE_ERTS variable."]}),"\n",(0,s.jsx)(n.h3,{id:"release-with-elixir",children:"release with Elixir"}),"\n",(0,s.jsxs)(n.p,{children:["The mix.bbclass is prepare to handle Elixir releases by default. So, following\nthe procedures about how to configure an Elixir application with\n",(0,s.jsx)(n.a,{href:"https://hexdocs.pm/mix/Mix.Tasks.Release.html",children:"mix release"})," should be enough\nfor most of the cases."]}),"\n",(0,s.jsxs)(n.p,{children:["Be aware that you need to configure the Elixir release parameter ",(0,s.jsx)(n.code,{children:":include_erts"}),"\nto get the value of ",(0,s.jsx)(n.code,{children:"MIX_TARGET_INCLUDE_ERTS"})," environment variable. Like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-elixir",children:' releases: [\n          epad: [\n            applications: [\n              epad: :permanent\n            ],\n            steps: [\n              :assemble,\n              :tar\n            ],\n            include_erts: System.get_env("MIX_TARGET_INCLUDE_ERTS")\n          ]\n        ]\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(6540);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);