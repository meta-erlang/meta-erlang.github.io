"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[3888],{44409:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});var r=i(34917),s=i(74848),a=i(28453);const t={title:"fwup for A/B image upgrades on QEMU machines with NervesCloud, part III",authors:["joaohf"],tags:["meta-erlang","fwup","qemu"]},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"What is NervesCloud",id:"what-is-nervescloud",level:2},{value:"Preparing a key pair for firmware signing",id:"preparing-a-key-pair-for-firmware-signing",level:3},{value:"Upgrade/Downgrade demonstration",id:"upgradedowngrade-demonstration",level:2},{value:"YP/OE Setup",id:"ypoe-setup",level:3},{value:"Configuring the build environment",id:"configuring-the-build-environment",level:3},{value:"Configure NervesCloud product name",id:"configure-nervescloud-product-name",level:3},{value:"Configure private and public keys for fwup tool",id:"configure-private-and-public-keys-for-fwup-tool",level:3},{value:"Build fwup firmware",id:"build-fwup-firmware",level:3},{value:"fwup firmware upload",id:"fwup-firmware-upload",level:3},{value:"Playing with upgrades",id:"playing-with-upgrades",level:3},{value:"Some low level details: introducing meta-nerves-hub",id:"some-low-level-details-introducing-meta-nerves-hub",level:2},{value:"meta-nerves-hub",id:"meta-nerves-hub",level:3},{value:"extending nerves-hub-link recipe",id:"extending-nerves-hub-link-recipe",level:3},{value:"Conclusions",id:"conclusions",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This blog post shows how to use ",(0,s.jsx)(n.a,{href:"https://nervescloud.com/",children:"NervesCloud"})," in order\nto upgrade and manage linux images based on Yocto Project."]}),"\n",(0,s.jsxs)(n.p,{children:["We will run this demonstration with QEMU ARM based machine prepared as a result\nof previous blog post called\n",(0,s.jsx)(n.a,{href:"/blog/2024/12/20/index/",children:"fwup for A/B image upgrades on QEMU machines with fwup, part II"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"what-is-nervescloud",children:"What is NervesCloud"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://nervescloud.com/",children:"NervesCloud"})," is an instance of\n",(0,s.jsx)(n.a,{href:"https://github.com/nerves-hub",children:"NervesHub"})," based on cloud. It could be\nconsidered NervesCloud as a SaaS for NervesHub. In that way, instead you having\nto install and manage your own instance of NervesHub for\n",(0,s.jsx)(n.a,{href:"https://nerves-project.org/",children:"Nerves devices"})," management, NervesCloud takes care\nof all the infrastructure and provides to you the benefits without worry with\ndetails."]}),"\n",(0,s.jsxs)(n.p,{children:["In this demonstration, we will use NervesCloud with a development account called\n",(0,s.jsx)(n.em,{children:"Experiments"}),". As NervesCloud is a multi-tenant system, anyone can have an\naccount for real or development purposes."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"It's not part of this demonstration how to setup a NervesCloud account. However,\nI would like to say thank you to NervesCloud team to take care of these details."})}),"\n",(0,s.jsx)(n.h3,{id:"preparing-a-key-pair-for-firmware-signing",children:"Preparing a key pair for firmware signing"}),"\n",(0,s.jsx)(n.p,{children:"NervesCloud works with signed firmware images files. It's mandatory to signed\nthese images before uploading into NervesCloud."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"I expected that you have a working Elixir environment for the following steps."})}),"\n",(0,s.jsxs)(n.p,{children:["Clone ",(0,s.jsx)(n.a,{href:"https://github.com/nerves-hub/nerves_hub_cli",children:"nerves_hub_cli"})," project:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/nerves-hub/nerves_hub_cli\ncd nerves_hub_cli\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's start configuring two environment variable that nerver_hub_cli tool will\nuse:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export NERVES_HUB_ORG=Experiments\nexport NERVES_HUB_URI=https://devices.nervescloud.com\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Next, we need to create a key pair for signed fw files later. For that, we use\nthe subcommand ",(0,s.jsx)(n.code,{children:"nerves_hub.key create"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'mix  nerves_hub.key create QemuMachines1\nNervesHub server: devices.nervescloud.com:443\nNervesHub organization: Experiments\nCreating a firmware signing key pair named \'QemuMachines1\'.\n\nThe private key is stored locally and must be protected by a password.\nIf you are sharing the firmware signing private key with others,\nplease choose an appropriate password.\n\nSigning key password for \'QemuMachines1\':\n\nFirmware public key written to \'/home/joaohf/.nerves-hub/keys/Experiments/QemuMachines1.pub\'.\nPassword-protected firmware private key written to \'/home/joaohf/.nerves-hub/keys/Experiments/QemuMachines1.priv\'.\n\nRegistering the firmware signing public key \'QemuMachines1\' with NervesHub.\n\n22:35:09.524 [info] POST https://devices.nervescloud.com/api/orgs/Experiments/keys -> 201 (578.459 ms)\n\n22:35:09.528 [debug]\n>>> REQUEST >>>\n(no query)\nAuthorization: token nhu_xyz\n\n%{name: "QemuMachines1", key: "xyz"}\n\n<<< RESPONSE <<<\ndate: Sun, 09 Feb 2025 22:35:08 GMT\ncontent-length: 86\nvary: accept-encoding\ncontent-type: application/json; charset=utf-8\ncache-control: max-age=0, private, must-revalidate\nstrict-transport-security: max-age=31536000\nx-request-id: GCKrFDWwXjoGnjQAHQLx\nserver: Fly/1ab217aa (2025-02-07)\nvia: 1.1 fly.io\nfly-request-id: 01JKPDMBHQP83WW1971PCXC0FZ-gig\n\n%{"data" => %{"key" => "xyz", "name" => "QemuMachines1"}}\n\nSuccess. Key information:\n  name:       QemuMachines1\n  public key: xyz\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The main outcome here is that the command ",(0,s.jsx)(n.code,{children:"nerves_hub.key create"})," has created a\nvalide key pair called QemuMachines1. We also need to export this key pair to\nsomething that Yocto can read later. For that, we use the command\n",(0,s.jsx)(n.code,{children:"nerves_hub.key export"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mix nerves_hub.key export QemuMachines1\nNervesHub server: devices.nervescloud.com:443\nNervesHub organization: Experiments\nLocal signing key password for 'QemuMachines1':\nFwup keys exported to: /home/joaohf/.nerves-hub/nerves_hub-fwup-keys-Experiments-QemuMachines1.tar.gz\n"})}),"\n",(0,s.jsx)(n.p,{children:"That is great, the key pair QemuMachines1 is ready. We just need one small step\nin order to extract two files from the tar.gz file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir /tmp/exported_keys\ntar zxf ~/.nerves-hub/nerves_hub-fwup-keys-Experiments-QemuMachines1.tar.gz -C /tmp/exported_keys\n"})}),"\n",(0,s.jsx)(n.p,{children:"And finally, we have the keys as expected:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ls -l /tmp/exported_keys\ntotal 8\n-rw-r--r-- 1 joaohf joaohf 88 fev  9 19:36 QemuMachines1.priv\n-rw-r--r-- 1 joaohf joaohf 44 fev  9 19:36 QemuMachines1.pub\n"})}),"\n",(0,s.jsx)(n.p,{children:"Keep QemuMachines1.priv and QemuMachines1.pub files around. We will need to\nconfigure Yocto in order to make fwup signed firmwares automatically."}),"\n",(0,s.jsx)(n.h2,{id:"upgradedowngrade-demonstration",children:"Upgrade/Downgrade demonstration"}),"\n",(0,s.jsx)(n.p,{children:"As always, I like to describe all steps. In case someone wants to try it. My\ntarget here is to play with NervesCloud for upgrade -> downgrade -> upgrade\ncycle."}),"\n",(0,s.jsx)(n.h3,{id:"ypoe-setup",children:"YP/OE Setup"}),"\n",(0,s.jsx)(n.p,{children:"I'll try to simplify the YP/OE setup to just tree small steps:"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This is the same steps taken for the previous blog post called\n",(0,s.jsx)(n.a,{href:"/blog/2024/12/20/index",children:"fwup for A/B image upgrades on QEMU machines with fwup, part II"}),".\nBut now, with one additional layer called\n",(0,s.jsx)(n.a,{href:"https://github.com/joaohf/meta-nerves-hub",children:"meta-nerves_hub"}),"."]})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Cloning all repositories for master release:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone --branch master git://git.yoctoproject.org/poky\ngit clone --branch master https://github.com/openembedded/meta-openembedded.git\ngit clone --branch master https://github.com/fwup-home/meta-fwup\ngit clone --branch master https://github.com/joaohf/meta-fwup-examples\ngit clone --branch master https://github.com/meta-erlang/meta-qemu-bsp\ngit clone --branch master https://github.com/meta-erlang/meta-erlang\ngit clone --branch master https://github.com/meta-erlang/meta-axon\ngit clone --branch master https://github.com/joaohf/meta-nerves-hub\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Source the init build environment script:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd poky\nsource oe-init-build-env ../build\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add the needed layers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bitbake-layers add-layer ../meta-openembedded/meta-oe\nbitbake-layers add-layer ../meta-fwup\nbitbake-layers add-layer ../meta-qemu-bsp\nbitbake-layers add-layer ../meta-fwup-examples\nbitbake-layers add-layer ../meta-nerves-hub\nbitbake-layers add-layer ../meta-axon\nbitbake-layers add-layer ../meta-erlang\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"configuring-the-build-environment",children:"Configuring the build environment"}),"\n",(0,s.jsxs)(n.p,{children:["For this use case, the quickest way is edit and add the ",(0,s.jsx)(n.em,{children:"conf/local.conf"}),"\nconfiguration file."]}),"\n",(0,s.jsx)(n.p,{children:"We start defining the MACHINE and DISTRO:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'MACHINE = "qemuarm64-uboot"\nDISTRO = "poky"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The machine ",(0,s.jsx)(n.em,{children:"qemuarm64-uboot"})," is provided by\n",(0,s.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-qemu-bsp",children:"meta-qemu-bsp"})," layer. That\nmachine uses u-boot as bootloader."]}),"\n",(0,s.jsxs)(n.p,{children:["As YP/OE supports many types of image outputs, we want to be specific here and\npick only the ",(0,s.jsx)(n.em,{children:"fwup"})," type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'tee -a <<EOF conf/local.conf\n# enable support for making fwup images\nIMAGE_CLASSES += "image_types_fwup"\nIMAGE_FSTYPES = "fwup fwup.qcow2"\nEOF\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configure-nervescloud-product-name",children:"Configure NervesCloud product name"}),"\n",(0,s.jsxs)(n.p,{children:["Edit the file ",(0,s.jsx)(n.em,{children:"conf/local.conf"})," and overwrite the variable ",(0,s.jsx)(n.code,{children:"FWUP_META_PRODUCT"}),"\nwith the contents of NervesHub Cloud product. In my case the product name is\n",(0,s.jsx)(n.em,{children:"YoctoFwup"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'tee -a <<EOF conf/local.conf\n# NervesHub product name\nFWUP_META_PRODUCT = "YoctoFwup"\nEOF\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configure-private-and-public-keys-for-fwup-tool",children:"Configure private and public keys for fwup tool"}),"\n",(0,s.jsxs)(n.p,{children:["The bbclass image",(0,s.jsxs)(n.em,{children:["types_fwup.bbclass takes care of signing fwup images when the\nvariables ",(0,s.jsx)(n.code,{children:"FWUP_PRIVATE_KEY_FILE"})," and ",(0,s.jsx)(n.code,{children:"FWUP_PUBLIC_KEY_FILE"})," are available. For\nthis demonstration, we need to make signed .fw (firmware update files) images.\nLet's add these two variables to _conf/local.conf"]})," too:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'tee -a <<EOF conf/local.conf\nFWUP_PRIVATE_KEY_FILE = "/tmp/exported_keys/QemuMachines1.priv"\nFWUP_PUBLIC_KEY_FILE = "/tmp/exported_keys/QemuMachines1.pub"\nEOF\n'})}),"\n",(0,s.jsx)(n.p,{children:"That is all for this step."}),"\n",(0,s.jsx)(n.h3,{id:"build-fwup-firmware",children:"Build fwup firmware"}),"\n",(0,s.jsxs)(n.p,{children:["In this experiment we will build two images. And, for each build, the variable\n",(0,s.jsx)(n.code,{children:"FWUP_META_VERSION"})," will be changed."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's start creating an image that represents the version 1.0.1. Edit the file\n",(0,s.jsx)(n.em,{children:"conf/local.conf"})," and add the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# 1st build\nFWUP_META_VERSION = "1.0.1"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Next, we need to build a new image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bitbake multiconfig:qemuarm64-uboot-nerves-hub-link:core-image-full-cmdline\n"})}),"\n",(0,s.jsx)(n.p,{children:'After this build, let\'s copy the signed fwup firmware image (*signed.fw) to a\ntemporary folder. For better organization, rename it adding the version "1.0.1":'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cp tmp-qemuarm64-uboot-glibc-nerves-hub-link/deploy/images/qemuarm64-uboot/core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126203524.fw \\\n  /tmp/core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126203524-1.0.1.signed.fw\n"})}),"\n",(0,s.jsx)(n.p,{children:"Ok. We got the version 1.0.1. Now, let's prepare the version 1.2.0."}),"\n",(0,s.jsxs)(n.p,{children:["Still in build folder, edit the file ",(0,s.jsx)(n.em,{children:"conf/local.conf"})," and change the variable\n",(0,s.jsx)(n.code,{children:"FWUP_META_VERSION"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# 2nd build\nFWUP_META_VERSION = "1.2.0"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Build the new image:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bitbake multiconfig:qemuarm64-uboot-nerves-hub-link:core-image-full-cmdline\n"})}),"\n",(0,s.jsx)(n.p,{children:'And when finished, copy the fwup firmware (*signed.fw) to a temporary folder.\nAdd to the filename the version "1.2.0":'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cp tmp-qemuarm64-uboot-glibc-nerves-hub-link/deploy/images/qemuarm64-uboot/core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126211722.fw \\\n  /tmp/core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126211722.1.2.0.signed.fw\n"})}),"\n",(0,s.jsx)(n.p,{children:"The final result is like that:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"ls -l /tmp\n-rw-rw-r-- 1 229596347 jan 26 18:02 core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126203524-1.0.1.signed.fw\n-rw-rw-r-- 1 229596346 jan 26 18:23 core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126211722.1.2.0.signed.fw\n"})}),"\n",(0,s.jsx)(n.p,{children:"There are two signed fwup firmware images ready to be uploaded into Nerves\nCloud."}),"\n",(0,s.jsx)(n.h3,{id:"fwup-firmware-upload",children:"fwup firmware upload"}),"\n",(0,s.jsx)(n.p,{children:"The procedures to upload the fwup image is very simple. Inside the NervesCloud\nweb interface, go to 'Firmware' menu and use the button 'Upload Firmware' to\nstart uploading a new firmware file."}),"\n",(0,s.jsx)(n.p,{children:"We'll need to upload both images (1.0.1 and 1.2.0) for the next exercises. The\nfinal Firmware list pages should be something like that:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt Firmware listing",src:i(64965).A+"",title:"Firmwares uploaded",width:"1213",height:"463"})}),"\n",(0,s.jsx)(n.h3,{id:"playing-with-upgrades",children:"Playing with upgrades"}),"\n",(0,s.jsx)(n.p,{children:"Now, it's time to observe and play with some upgrades and downgrades."}),"\n",(0,s.jsx)(n.p,{children:"First, let's start runqemu with our last image build:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'runqemu  nographic serialstdio slirp \\\nmulticonfig:qemuarm64-uboot-nerves-hub-link:core-image-full-cmdline \\\nwic.qcow2 qemuparams="-m 1024"\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["In my case, the parameter ",(0,s.jsx)(n.code,{children:"-m 1024"})," was necessary because my development images\nwere a bit oversized."]})}),"\n",(0,s.jsx)(n.p,{children:"Inside QEMU instance, start nerves_cloud_link application:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"/usr/lib/nerves-hub-link/bin/nerves_hub_link start_iex\n"})}),"\n",(0,s.jsx)(n.p,{children:"In NervesCloud web interface, check with the device has listed there:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt Device up",src:i(53804).A+"",title:"Device up with 1.2.0 version",width:"1236",height:"457"})}),"\n",(0,s.jsx)(n.p,{children:"The 'Firmware' column should be pointing to '1.2.0' version (because this\nversion was the latest build)."}),"\n",(0,s.jsx)(n.p,{children:"For upgrade and downgrade using NervesCloud, there are some options like\ncreating a Deployment or send an update command to a specific device. In this\nexperiment, let's send update command."}),"\n",(0,s.jsx)(n.p,{children:"We want to test the following scenarios:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"downgrade 1.2.0 -> 1.0.1"}),"\n",(0,s.jsx)(n.p,{children:"Select the device that we want to work, in my case the device is '10'. And on\ndevice administration page, select the firmware version that we want to send.\nIn this case it will be the version 1.0.1. And click on \"Send update\" button."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt Sending firmware",src:i(36511).A+"",title:"Sensing firmware 1.0.1",width:"1240",height:"872"})}),"\n",(0,s.jsx)(n.p,{children:"While NervesCloud is sending the new firmware to device, on QEMU console we\ncan check that nerves_hub_link is working as expected:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"22:01:38.452 [info] [NervesHubLink] Resuming download attempt number 0 https://files.nervescloud.com/firmware/38/a6fd8354-ecc6-50c9-e337-5c72d8c105d5.fw?X-Amz-Algorithm=AWS4-HMAC-SHA256\n22:01:38.469 [info] [NervesHubLink] Downloading firmware: https://files.nervescloud.com/firmware/38/a6fd8354-ecc6-50c9-e337-5c72d8c105d5.fw?X-Amz-Algorithm=AWS4-HMAC-SHA256\n22:01:38.472 [notice]     :alarm_handler: {:set, {NervesHubLink.UpdateInProgress, []}}\n22:01:38.482 [debug] [NervesHubLink] FWUP PROG: 0%\n22:01:39.627 [warning] [NervesHubLink] FWUP WARN: Upgrading partition B\n22:01:40.114 [debug] [NervesHubLink] FWUP PROG: 1%\n22:01:40.551 [debug] [NervesHubLink] FWUP PROG: 2%\n22:01:40.552 [debug] [NervesHubLink] FWUP PROG: 3%\n....\n....\n....\n22:02:09.478 [debug] [NervesHubLink] FWUP PROG: 100%\n22:02:09.481 [info] [NervesHubLink] FWUP SUCCESS: 0\n22:02:09.482 [info] [NervesHubLink] FWUP Finished\n22:02:09.483 [notice]     :alarm_handler: {:clear, NervesHubLink.UpdateInProgress}\n22:02:09.484 [info] Elixir.Nerves.Runtime.Power : device told to reboot\n22:02:09.488 [error] Heart: Erlang heart isn't running. Check vm.args.\n22:02:09.731 [warning] [NervesTime] Stopping RTC NervesTime.FileTime: :shutdown\n"})}),"\n",(0,s.jsx)(n.p,{children:"The device will update and reboot. When QEMU instance is back, start\nnerves_hub_link again and check the expected version in NervesCloud web\ninterface:"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"The manual start is OK for this experiment. Just execute nerves_hub_link again\non QEMU console:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"/usr/lib/nerves-hub-link/bin/nerves_hub_link start_iex\n"})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt Device updated",src:i(99045).A+"",title:"Device updated to 1.0.1 version",width:"1246",height:"439"})}),"\n",(0,s.jsx)(n.p,{children:"Very good, the downgrade has been completed."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"upgrade 1.0.1 -> 1.2.0"}),"\n",(0,s.jsx)(n.p,{children:"Now, it's time to perform an upgrade from 1.0.1 to 1.2.0 version. Following\nthe same steps above, but selecting the version 1.2.0 this time, the device\nwill be updated to 1.2.0 version:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt Device updated",src:i(86800).A+"",title:"Update to 1.2.0 version",width:"1224",height:"867"})}),"\n",(0,s.jsx)(n.p,{children:"When QEMU is back, we can check which version NervesCloud will show:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt Device updated",src:i(44726).A+"",title:"Device updated to 1.2.0 version",width:"1250",height:"321"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We can play with this dancing many times. Proving that upgrade/downgrade works\nas expected."}),"\n",(0,s.jsx)(n.h2,{id:"some-low-level-details-introducing-meta-nerves-hub",children:"Some low level details: introducing meta-nerves-hub"}),"\n",(0,s.jsx)(n.h3,{id:"meta-nerves-hub",children:"meta-nerves-hub"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/joaohf/meta-nerves-hub",children:"meta-nerves-hub"})," layer is a new\nlayer introduced to keep common application and configurations for\n",(0,s.jsx)(n.a,{href:"https://github.com/nerves-hub",children:"NervesHub"})," and\n",(0,s.jsx)(n.a,{href:"https://github.com/nerves-project",children:"Nerves Project"})," working with Yocto Project.\nThe purpose is to bring essential and base components for anyone that wants to\nuse YP/Openembedded in your products."]}),"\n",(0,s.jsxs)(n.p,{children:["meta-nerves-hub has a recipe called\n",(0,s.jsx)(n.a,{href:"https://github.com/joaohf/meta-nerves-hub/tree/master/recipes-extended/nerves-hub-link_2.5.2.bb",children:"nerves-hub-link_2.5.2.bb"}),"\nwhich builds nerves-hub-link application. I had to apply two patches for\nnerves-hub-link source code in order to make it work well when building inside\nYocto environment:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The first one is\n",(0,s.jsx)(n.a,{href:"https://github.com/joaohf/meta-nerves-hub/blob/master/recipes-extended/nerves-hub-link/nerves-hub-link/0001-Use-MIX_TARGET_INCLUDE_ERTS-for-include-ERTS-release.patch",children:"0001-Use-MIX_TARGET_INCLUDE_ERTS-for-include-ERTS-release.patch"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["And the second one was about using KVBackend from UbootEnv instead memory:\n",(0,s.jsx)(n.a,{href:"https://github.com/joaohf/meta-nerves-hub/blob/master/recipes-extended/nerves-hub-link/nerves-hub-link/0001-Use-UbootEnv-as-kv_backend.patch",children:"0001-Use-UbootEnv-as-kv_backend.patch"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"extending-nerves-hub-link-recipe",children:"extending nerves-hub-link recipe"}),"\n",(0,s.jsxs)(n.p,{children:["The nerves-hub-link recipe is not intend for use as standalone. It's purpose is\nfor development and demonstration. When running nerves-hub-link it's necessary\nto configure it with the correct\n",(0,s.jsx)(n.a,{href:"https://github.com/nerves-hub/nerves_hub_link?tab=readme-ov-file#connecting-your-device-to-nerveshub",children:"shared secret credentials"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To get quick results, I've extended\n",(0,s.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-axon/tree/master/dynamic-layers/meta-nerves-hub/recipes-extended/nerves-hub-link/nerves-hub-link_2.5.2.bbappend",children:"nerves-hub-link from meta-axon layer"}),"\nwith the correct shared secret credentials used by my development instance on\nNervesCloud."]}),"\n",(0,s.jsx)(n.p,{children:"For a real use of nerves-hub-link, the correct way would be creating a new\nElixir application that has nerves-hub-link as dependency and make all the\nconfiguration needed."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The NervesCloud team are working on a pre-build agent model, which will simplify\nsetup and configuration."})}),"\n",(0,s.jsx)(n.h2,{id:"conclusions",children:"Conclusions"}),"\n",(0,s.jsx)(n.p,{children:"I am having so much fun playing with fwup and NervesCloud that I will keep\nimproving this environment. Just to recap the adventures so far:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/blog/2024/09/24/index/",children:"fwup for A/B image upgrades, part I"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/blog/2024/12/20/index/",children:"fwup for A/B image upgrades on QEMU machines with fwup, part II"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["It is all about enabling features and managing what is feasible or not. Of\ncourse, implementing the missing parts. When building products with Yocto\nProject, it is a bit like playing a\n",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Open_world",children:"open-world video game"}),". You have to\nhave a target in mind."]}),"\n",(0,s.jsx)(n.p,{children:"My plan is to continue adding more fwup configurations into meta-fwup-examples\nlayer in order to support more BSP layers and well know boards like raspberrypi.\nAlso, trying to use some other processor architectures like: riscv, ppc, mips\nall running on QEMU and Yocto Project. I will stay in this loop until get\nsomething stable."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},36511:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/nhc-send-update-to-1.0.1-36d46e43cae67b1e90f7bd976ebc1142.png"},53804:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/nhc_device_10_connected-7529f0457aa0a7c2c2858645a2286110.png"},99045:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/nhc_device_updated_to_101-2e26a42c06f4d40fbc19a1b7c841b74b.png"},44726:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/nhc_device_updated_to_120-d8295165fe5dbb5332540b5b4a4aa649.png"},64965:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/nhc_firmware_listing-d14863c8144ee28d8c00a79c581c9c56.png"},86800:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/nhc_update_device_10_to_120-832e164c694fbb93e0ae6accf4753b00.png"},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var r=i(96540);const s={},a=r.createContext(s);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(a.Provider,{value:n},e.children)}},34917:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/01/26/index","editUrl":"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2025-01-26/index.md","source":"@site/blog/2025-01-26/index.md","title":"fwup for A/B image upgrades on QEMU machines with NervesCloud, part III","description":"This blog post shows how to use NervesCloud in order","date":"2025-01-26T00:00:00.000Z","tags":[{"inline":true,"label":"meta-erlang","permalink":"/blog/tags/meta-erlang"},{"inline":true,"label":"fwup","permalink":"/blog/tags/fwup"},{"inline":true,"label":"qemu","permalink":"/blog/tags/qemu"}],"readingTime":9.975,"hasTruncateMarker":true,"authors":[{"name":"Jo\xe3o Henrique Ferreira de Freitas","title":"Maintainer of meta-erlang","url":"https://github.com/joaohf","imageURL":"https://github.com/joaohf.png","key":"joaohf","page":null}],"frontMatter":{"title":"fwup for A/B image upgrades on QEMU machines with NervesCloud, part III","authors":["joaohf"],"tags":["meta-erlang","fwup","qemu"]},"unlisted":false,"prevItem":{"title":"fwup for A/B image upgrades on raspberrypi machines with NervesCloud, part I","permalink":"/blog/2025/03/21/index"},"nextItem":{"title":"fwup for A/B image upgrades on QEMU machines with fwup, part II","permalink":"/blog/2024/12/20/index"}}')}}]);