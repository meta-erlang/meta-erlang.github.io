"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[6970],{62172:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/guides-beamruntime","title":"Building runtime","description":"Building runtime.","source":"@site/docs/guides/guides-beamruntime.md","sourceDirName":"guides","slug":"/guides/guides-beamruntime","permalink":"/docs/master/guides/guides-beamruntime","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/docs/guides/guides-beamruntime.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"description":"Building runtime."},"sidebar":"tutorialSidebar","previous":{"title":"Building SDKs","permalink":"/docs/master/guides/guides-development"},"next":{"title":"Building BEAM Tools","permalink":"/docs/master/guides/guides-beamtools"}}');var r=i(74848),s=i(28453);const a={sidebar_position:6,description:"Building runtime."},l="Building runtime",o={},d=[{value:"beamruntime-tarball recipe",id:"beamruntime-tarball-recipe",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"building-runtime",children:"Building runtime"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/beamruntime/intro",children:"beamruntime user guide"})," has more details about how to setup\nand usage modes."]}),"\n",(0,r.jsx)(n.p,{children:"This section is focused on how to build beamruntime using meta-erlang."}),"\n",(0,r.jsx)(n.h2,{id:"beamruntime-tarball-recipe",children:"beamruntime-tarball recipe"}),"\n",(0,r.jsxs)(n.p,{children:["The first step is to define which Erlang and Elixir versions the beamruntime will\nuse. This is done configuring the following variables in the file\n",(0,r.jsx)(n.a,{href:"https://docs.yoctoproject.org/ref-manual/terms.html?highlight=local%20conf#term-Configuration-File",children:"conf/local.conf or in the distro configuration file"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'PREFERRED_VERSION_erlang = "24.1.7"\nPREFERRED_VERSION_erlang-native = "24.1.7"\nPREFERRED_VERSION_nativesdk-erlang = "24.1.7"\n\nPREFERRED_VERSION_elixir = "1.12.3"\nPREFERRED_VERSION_elixir-native = "1.12.3"\nPREFERRED_VERSION_nativesdk-elixir = "1.12.3"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then, make sure opengl feature is ",(0,r.jsx)(n.em,{children:"not"})," configured. By defaul beamruntime enables wx\nErlang application:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'# disble opengl for beamruntime\nDISTRO_FEATURES_FILTER_NATIVESDK:remove = "opengl"\n'})}),"\n",(0,r.jsx)(n.p,{children:"After that, the next step is to call bitbake to build the beamruntime tarball:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bitbake beamruntime-tarball\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Once the build has finished, the results can be found at ",(0,r.jsx)(n.em,{children:"tmp/deploy/sdk"}),"\nfolder. You can copy it to the development machine. The installation is done\nexecuting the .sh script, like that:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sh x86_64-beamruntime-nativesdk-standalone-3.4.1-erlang-24.1.7-elixir-1.12.3.sh\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);