"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[2880],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(a),d=o,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6026:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),o=(a(7294),a(3905));const i={title:"meta-erlang on cloud II: building your own application",authors:["joaohf"],tags:["meta-erlang","cloud"]},r=void 0,l={permalink:"/blog/2023/02/04/index",editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2023-02-04/index.md",source:"@site/blog/2023-02-04/index.md",title:"meta-erlang on cloud II: building your own application",description:"\x3c!---",date:"2023-02-04T00:00:00.000Z",formattedDate:"February 4, 2023",tags:[{label:"meta-erlang",permalink:"/blog/tags/meta-erlang"},{label:"cloud",permalink:"/blog/tags/cloud"}],readingTime:4.095,hasTruncateMarker:!1,authors:[{name:"Jo\xe3o Henrique Ferreira de Freitas",title:"Maintainer of meta-erlang",url:"https://github.com/joaohf",imageURL:"https://github.com/joaohf.png",key:"joaohf"}],frontMatter:{title:"meta-erlang on cloud II: building your own application",authors:["joaohf"],tags:["meta-erlang","cloud"]},prevItem:{title:"meta-erlang on cloud III, for real projects",permalink:"/blog/2023/02/14/index"},nextItem:{title:"meta-erlang on cloud I: EWAOL based",permalink:"/blog/2023/01/29/index"}},s={authorsImageUrls:[void 0]},c=[{value:"Intro",id:"intro",level:2},{value:"meta-axon cloud aware",id:"meta-axon-cloud-aware",level:2},{value:"Build instructions",id:"build-instructions",level:2},{value:"Launching EC2 instances",id:"launching-ec2-instances",level:2},{value:"Results",id:"results",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"intro"},"Intro"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/blog/2023/02/04/index"},"meta-erlang on cloud II, build your own application")," post has shown the basic idea for\nhow would be possible (and in fact it is possible) to build a custom Linux distribution and run it on Graviton AWS instances."),(0,o.kt)("p",null,"Now, it's time to refactor out the previous result. Removing what are not necessary in order to create a slim meta-erlang cloud ready image."),(0,o.kt)("p",null,"So, this post is more like a tutorial to reach two main targets:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Explore a demo Yocto layer which shows the basic pieces to run a distro on Graviton"),(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("a",{parentName:"li",href:"https://livebook.dev/"},"livebook")," to that image and try it on cloud. Why not trying some GPU processing :)")),(0,o.kt)("h2",{id:"meta-axon-cloud-aware"},"meta-axon cloud aware"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-axon"},"meta-axon")," is my playground layer focused on demonstrate how Erlang and Elixir applications\ncould be integrated with Yocto ecosystem. Until now, meta-axon has been tailored to run on embedded devices (like raspberry pi). But, I'm\nalso added, along side with the former ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-axon/conf/distro/axon.conf"},"axon-slim"),", a new distro called ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-axon/conf/distro/axon.conf"},"axon"),". The axon distro is focused on cloud, for the purpose of this tutorial AWS cloud."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you are new to the Yocto Project; remember some basic ",(0,o.kt)("a",{parentName:"p",href:"https://docs.yoctoproject.org/overview-manual/concepts.html#yocto-project-concepts"},"concepts here"),".")),(0,o.kt)("p",null,"I also introduced a new image called ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-axon/recipes-extented/image/axon-image-cloud.bb"},"axon-image-cloud")," with all the pieces\nneeded to run it on Graviton instances. This image relies on systemd plus ",(0,o.kt)("a",{parentName:"p",href:"https://cloud-init.io/"},"cloud-init")," scripts."),(0,o.kt)("p",null,"It is important to mention that to run images on Graviton it is necessary to add two layer dependencies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://git.yoctoproject.org/git/meta-arm"},"meta-arm"),", implementing a generic ARM 64 bits machine"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://git.yoctoproject.org/git/meta-virtualization"},"meta-virtualization"),", bringing cloud-init recipe")),(0,o.kt)("p",null,"The rest of the needed components are all provided by standard Yocto layers (like: poky and meta-openembedded)."),(0,o.kt)("h2",{id:"build-instructions"},"Build instructions"),(0,o.kt)("p",null,"We want fast feedback and test the build results quickly. So here is the procedure that will build an distro linux image\nwith Erlang, Elixir and ",(0,o.kt)("a",{parentName:"p",href:"https://livebook.dev/"},"livebook"),":"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"I'm assuming a working Linux environment in order to run the below commands.")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Clone the meta-axon layer:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/meta-erlang/meta-axon.git\ncd meta-axon\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install the ",(0,o.kt)("a",{parentName:"p",href:"https://kas.readthedocs.io/en/latest/"},"kas")," tool to setup a bitbake based project."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/siemens/kas\ncd kas\npip3 install .\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Call kas tool to build everything:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kas build kas/machines/meta-erlang-graviton2-livebook.yaml\n")),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The final image has been created in the deploy folder: ",(0,o.kt)("em",{parentName:"p"},"tmp/deploy/images/generic-arm64"),"."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the script ",(0,o.kt)("em",{parentName:"p"},"create-ami.sh")," to convert and upload a image made with Yocto into AWS AMI. Use your s3 bucket and specific how much extra space you want:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"../scripts/create-ami.sh <add your s3 bucket here> 8\n")))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The script ",(0,o.kt)("em",{parentName:"p"},"create_ami.sh")," may need a fix in order to find the correct place for the ",(0,o.kt)("em",{parentName:"p"},"qemu-img")," tool. Would be nice\nto have some sort of Yocto bbclass to automatically convert and push the AMI image to AWS. But it is not the case yet.")),(0,o.kt)("h2",{id:"launching-ec2-instances"},"Launching EC2 instances"),(0,o.kt)("p",null,"After uploading the image, it's time to lunch an EC2 instance like the following:"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Remember to use a ",(0,o.kt)("em",{parentName:"p"},"Free Trial available")," instance type. When I wrote this post, the eligible tier was the\nt4g.small.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"alt Launching a new EC2 instance",src:a(5294).Z,title:"Launching a new EC2 instance",width:"1231",height:"1123"})),(0,o.kt)("p",null,"And, finally here is it running:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"alt Running a new EC2 instance",src:a(2597).Z,title:"Running a new EC2 instance",width:"2106",height:"1098"})),(0,o.kt)("p",null,"Accessing the instance via ssh and login with the user ",(0,o.kt)("em",{parentName:"p"},"axon")," should work as expected. After all it is a normal Linux distro."),(0,o.kt)("h2",{id:"results"},"Results"),(0,o.kt)("p",null,"The following two screenshots show the livebook instance up and running on Graviton EC2 instance. It is pretty cool."),(0,o.kt)("p",null,"Just showing the ",(0,o.kt)("inlineCode",{parentName:"p"},"top")," command to check all the running process:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"alt Livebook instance Graviton",src:a(3590).Z,title:"Livebook instance on Graviton",width:"2418",height:"1018"})),(0,o.kt)("p",null,"And here is the livebook system dashboard to inspect some usage statistics, and system information:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"alt Livebook dashboard on Graviton",src:a(2825).Z,title:"Livebook dashboard on Graviton",width:"1307",height:"821"})),(0,o.kt)("p",null,"As you can see, it is running on ARM64, with JIT enable."),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"Now we are converging to create the basic building blocks for creating custom Linux distribution\nbased on Yocto Project that runs on Cloud."),(0,o.kt)("p",null,"That could be the perfect case for projects that need to take control on every detail of the software stack.\nFrom linx kernel configuration, building flags, software configuration flags, anything. It's really flexible."),(0,o.kt)("p",null,"And for projects that relies on Erlang and Elixir, it is also amazing bringing it to Cloud ecosystem."),(0,o.kt)("p",null,"The first blog part ",(0,o.kt)("a",{parentName:"p",href:"/blog/2023/02/04/index"},"meta-erlang on cloud II, build your own application")," has introduced to\nwhat is possible to build. This blog post is more related to how to explore the introduced idea into something more\npractical and aligned with meta-erlang purposes."),(0,o.kt)("p",null,"The next blog will discuss about some ideas and examples ",(0,o.kt)("a",{parentName:"p",href:"/blog/2023/02/14/index"},"meta-erlang on cloud III, for real projects"),"."))}m.isMDXComponent=!0},5294:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ec2_instance-45d124b067baf388b3a23847fac8ffcb.jpg"},2597:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ec2_running-542df8ebba53c7bdbb1d569cbbc58273.jpg"},2825:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/livebook_dashboard-ed3c09ff8e37c01665a4d7b70131741a.jpg"},3590:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/livebook_instance-d8d9491feeea9877f643f9815f942441.jpg"}}]);