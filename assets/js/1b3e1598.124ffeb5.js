"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[330],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},b="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=c(r),d=n,m=b["".concat(s,".").concat(d)]||b[d]||u[d]||i;return r?a.createElement(m,o(o({ref:t},p),{},{components:r})):a.createElement(m,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[b]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9487:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>b,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:4.5,sidebar_label:"ejabberd",sidebar_class_name:"green",description:"Shows how to set up and install ejabberd."},o="ejabberd",l={unversionedId:"applications/guides-ejabberd",id:"applications/guides-ejabberd",title:"ejabberd",description:"Shows how to set up and install ejabberd.",source:"@site/docs/applications/guides-ejabberd.md",sourceDirName:"applications",slug:"/applications/guides-ejabberd",permalink:"/docs/applications/guides-ejabberd",draft:!1,editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/docs/applications/guides-ejabberd.md",tags:[],version:"current",sidebarPosition:4.5,frontMatter:{sidebar_position:4.5,sidebar_label:"ejabberd",sidebar_class_name:"green",description:"Shows how to set up and install ejabberd."},sidebar:"tutorialSidebar",previous:{title:"vernemq",permalink:"/docs/applications/guides-vernemq"},next:{title:"tsung",permalink:"/docs/applications/guides-tsung"}},s={},c=[],p={toc:c};function b(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"ejabberd"},"ejabberd"),(0,n.kt)("p",null,"In this guide we are using the plain meta-erlang layer to build a XMPP server\ncalled ",(0,n.kt)("a",{parentName:"p",href:"https://www.ejabberd.im/"},"ejabberd"),"."),(0,n.kt)("p",null,"The recipe\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/meta-erlang/meta-erlang/blob/master/recipes-connectivity/ejabberd/ejabberd_20.03.bb"},"ejabberd_20.03.bb"),"\nbuilds the ejabberd using a crosscompile approach both to erlang and for the\nvarious Erlang NIFs. ejabberd uses a custom mix between autotools and rebar2.\nBasically rebar needs to know how to use the correct environment variables in\norder to compile all the C code."),(0,n.kt)("p",null,"As a final result, we are able to run an embedded ejabberd using qemu."),(0,n.kt)("p",null,"Follow the quickstart guide to get a basic working environment and then:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Add ",(0,n.kt)("inlineCode",{parentName:"li"},"ejabberd")," package to ",(0,n.kt)("inlineCode",{parentName:"li"},"IMAGE_INSTAL")," in ",(0,n.kt)("em",{parentName:"li"},"conf/local.conf"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'IMAGE_INSTALL:append = \" ejabberd\"' >> conf/local.conf\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Now its time to build the image:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"bitbake core-image-minimal\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"And check the results with qemu:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"runqemu core-image-minimal\n")),(0,n.kt)("p",null,"Connect to the qemu instance and call the main ejabberd admin tool:\n",(0,n.kt)("inlineCode",{parentName:"p"},"ejabberdctl"),"."),(0,n.kt)("p",null,"The default recipe creates a system user called ",(0,n.kt)("em",{parentName:"p"},"ejabberd")," by default."))}b.isMDXComponent=!0}}]);