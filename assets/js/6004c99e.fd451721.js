"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[5943],{2758:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var l=s(4848),t=s(8453);const r={title:"Introducing Gleam to meta-erlang layer",authors:["joaohf"],tags:["meta-erlang"]},a=void 0,i={permalink:"/blog/2024/11/03/index",editUrl:"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2024-11-03/index.md",source:"@site/blog/2024-11-03/index.md",title:"Introducing Gleam to meta-erlang layer",description:"Gleam is a new language that runs on Erlang VM. As one the",date:"2024-11-03T00:00:00.000Z",tags:[{inline:!0,label:"meta-erlang",permalink:"/blog/tags/meta-erlang"}],readingTime:4.28,hasTruncateMarker:!0,authors:[{name:"Jo\xe3o Henrique Ferreira de Freitas",title:"Maintainer of meta-erlang",url:"https://github.com/joaohf",imageURL:"https://github.com/joaohf.png",key:"joaohf",page:null}],frontMatter:{title:"Introducing Gleam to meta-erlang layer",authors:["joaohf"],tags:["meta-erlang"]},unlisted:!1,nextItem:{title:"Running Erlang/OTP test suite on target with ptest",permalink:"/blog/2024/10/12/index"}},o={authorsImageUrls:[void 0]},c=[{value:"gleam is written in rust",id:"gleam-is-written-in-rust",level:2},{value:"Running gleam on Yocto based images",id:"running-gleam-on-yocto-based-images",level:2},{value:"hello-gleam-echo-server explained",id:"hello-gleam-echo-server-explained",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://gleam.run",children:"Gleam"})," is a new language that runs on Erlang VM. As one the\naims of meta-erlang layer is to offer support to BEAM ecosystem in YP/OE\necosystem\n",(0,l.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-erlang/pull/340",children:"gleam support has been added"}),"\nto meta-erlang."]}),"\n",(0,l.jsxs)(n.p,{children:["I'm not a gleam programming. Actually, I recently discovered gleam (and its\npurposes). And I'm still learning it. After watching the talk\n",(0,l.jsx)(n.a,{href:"https://www.youtube.com/watch?v=6I0IbJtUC3U",children:"Keynote: Gleam's Journey on the BEAM - Hayleigh Thompson & Louis Pilfold"}),"\nat Code BEAM Europe 2024, I give a try and add it to meta-erlang layer."]}),"\n",(0,l.jsxs)(n.p,{children:["In this post I'll describe a simple experiment using the gleam example code\ncalled ",(0,l.jsx)(n.a,{href:"https://github.com/gleam-lang/example-echo-server",children:"example-echo-server"}),"\nas it is simple and easy to understand."]}),"\n",(0,l.jsx)(n.p,{children:"At the end of this post we will be ready to create more recipes for programs\nwritten in glean that runs on Yocto based images."}),"\n",(0,l.jsxs)(n.p,{children:["Also, as gleam is the third language supported by meta-erlang the\n",(0,l.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-erlang/releases",children:"beamtools"})," will be updated\nto also provide a gleam toolchain."]}),"\n",(0,l.jsx)(n.h2,{id:"gleam-is-written-in-rust",children:"gleam is written in rust"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://github.com/gleam-lang/gleam",children:"Gleam"})," language is written in rust\nprogramming language. It could be a challenge to get it working on Yocto.\nHowever, the support for building rust programs by Yocto has been added many\nreleases ago (check it out here\n",(0,l.jsx)(n.a,{href:"https://git.yoctoproject.org/poky/tree/meta/recipes-devtools/rust",children:"Yocto rust support"}),").\nThat means all the pieces and rust toolchain support to build gleam inside Yocto\nwere already there."]}),"\n",(0,l.jsxs)(n.p,{children:["The\n",(0,l.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-devtools/gleam/gleam_1.5.1.bb",children:"gleam.bb recipe"}),"\nis responsible for compiling gleam as native program (that is, a program that\nruns on the build machine). The final gleam package will not be installed in the\ntarget because gleam compiles to .beam modules (erlang modules). At the end a\nsoftware written in gleam will be just BEAM modules that runs on Erlang VM."]}),"\n",(0,l.jsxs)(n.p,{children:["There is also a new bitbake class called\n",(0,l.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-erlang/tree/master/classes/gleam.bbclass",children:"gleam.bbclass"}),".\nIt is a class that every gleam recipe will use in order to fetch dependencies,\ncompile and packing."]}),"\n",(0,l.jsx)(n.h2,{id:"running-gleam-on-yocto-based-images",children:"Running gleam on Yocto based images"}),"\n",(0,l.jsx)(n.p,{children:"Alright, the following is a step by step listing a fresh build session and run\nthe hello-gleam-echo-server using QEMU."}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Cloning all repositories for master:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"git clone --branch master git://git.yoctoproject.org/poky\ngit clone --branch master https://github.com/openembedded/meta-openembedded.git\ngit clone --branch master https://github.com/meta-erlang/meta-erlang\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Source the init build environment script:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cd poky\nsource oe-init-build-env ../build\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Add the needed layers:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"bitbake-layers add-layer ../meta-openembedded/meta-oe\nbitbake-layers add-layer ../meta-erlang\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Open the configuration file ",(0,l.jsx)(n.em,{children:"build/local.conf"})," and change the 'MACHINE'\nvariable to 'qemux86-64'"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Add what we want to install, hello-gleam-echo-server:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'tee -a <<EOF conf/local.conf\nIMAGE_INSTALL:append = " hello-gleam-echo-server curl"\nEOF\n'})}),"\n",(0,l.jsx)(n.p,{children:"Let's install curl too. Because we want to check if echo-server is working as\nexpected."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Build a minimal image for testing purposes:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"bitbake core-image-minimal\n"})}),"\n",(0,l.jsx)(n.p,{children:"Depending your build machine it could take some time. It's ok. Remember that\nYP/OE builds everything from source code."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Let's test running the QEMU:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"runqemu core-image-minimal serialstdio nographic slirp\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"You should see the login prompt after running the runqemu command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"Poky (Yocto Project Reference Distro) 5.1 qemux86-64 ttyS0\n\nqemux86-64 login:\n"})}),"\n",(0,l.jsx)(n.p,{children:"The login name is root"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The command ",(0,l.jsx)(n.code,{children:"systemctl status hello-gleam-echo-server"})," shows that echo-server\nis disabled and not running"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"root@qemux86-64:~# systemctl status hello-gleam-echo-server\n* hello-gleam-echo-server.service - gleam echo server example\n  Loaded: loaded (/usr/lib/systemd/system/hello-gleam-echo-server.service; disabled; preset: disabled)\n  Active: inactive (dead)\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Let's start it with ",(0,l.jsx)(n.code,{children:"systemctl start hello-gleam-echo-server"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"root@qemux86-64:~# systemctl start hello-gleam-echo-server\n"})}),"\n",(0,l.jsxs)(n.p,{children:["And check again with ",(0,l.jsx)(n.code,{children:"systemctl status"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"root@qemux86-64:~# systemctl status hello-gleam-echo-server\n* hello-gleam-echo-server.service - gleam echo server example\n  Loaded: loaded (/usr/lib/systemd/system/hello-gleam-echo-server.service; disabled; preset: disabled)\n  Active: active (running) since Mon 2024-11-04 00:26:37 UTC; 1s ago\n  Invocation: 721b391508544a27bdacd484d3f35be3\n  Main PID: 239 (entrypoint.sh)\n   Tasks: 26 (limit: 255)\n  Memory: 51.1M (peak: 51.5M)\n     CPU: 3.043s\n  CGroup: /system.slice/hello-gleam-echo-server.service\n          |-239 /bin/sh /usr/lib/hello-gleam-echo-server/entrypoint.sh run\n          |-241 /usr/lib/erlang/erts-15.1.2/bin/beam.smp -- -root /usr/lib/erlang -bindir /usr/lib/erlang/erts-15.1.2/bin -progname erl -- -- -pa /usr/lib/hello-gleam-echo-server/elli/ebin /usr/lib/hello-gleam-echo-server/gleam_e...\n          `-247 erl_child_setup 1024\n\nNov 04 00:26:37 qemux86-64 systemd[1]: Started gleam echo server example.\n"})}),"\n",(0,l.jsx)(n.p,{children:"That looks really good. We can see that systemd is happy and tracking the\nbeam.smp process."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Calling curl to check if echo-server is working. We want to reach the\nfunction hello from\n",(0,l.jsx)(n.a,{href:"https://github.com/gleam-lang/example-echo-server/blob/main/src/reply/web.gleam#L32",children:"web.gleam"}),"\nsource code:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"root@qemux86-64:~# curl -X POST -d 'Hello, Gleam!' http://localhost:3000/echo\nHello, Gleam!\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"That's amazing and it's working as expected."}),"\n",(0,l.jsx)(n.h2,{id:"hello-gleam-echo-server-explained",children:"hello-gleam-echo-server explained"}),"\n",(0,l.jsx)(n.p,{children:"A bit more about bitbake, recipes and how gleam recipes works."}),"\n",(0,l.jsxs)(n.p,{children:["The snippet below shows the recipe\n",(0,l.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-gleam-echo-server/hello-gleam-echo-server_0.1.0.bb",children:"hello-gleam-echo-server"}),".\nThanks to gleam.bbclass the recipe is short and declarative."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'SUMMARY = "An example Gleam web application "\nSECTION = "examples"\nLICENSE = "Apache-2.0"\nLIC_FILES_CHKSUM = "file://LICENCE;md5=bd052113ed5b73a32ff7cf9f42c3265c"\n\nS = "${WORKDIR}/git"\n\nSRCREV = "94f29a84dc82ed4e7878d4027fd27acacdb8be84"\nPV = "0.1.0+git${SRCPV}"\nSRC_URI = "git://github.com/gleam-lang/example-echo-server;branch=main;protocol=https \\\n           file://hello-gleam-echo-server.service"\n\ninherit gleam systemd\n\ndo_install:append() {\n    if ${@bb.utils.contains(\'DISTRO_FEATURES\',\'systemd\',\'true\',\'false\',d)}; then\n        install -d ${D}${systemd_unitdir}/system\n        install -m 0644 ${UNPACKDIR}/hello-gleam-echo-server.service ${D}${systemd_unitdir}/system\n    fi\n}\n\nSYSTEMD_SERVICE:${PN} = "hello-gleam-echo-server.service"\n\nSYSTEMD_AUTO_ENABLE = "disable"\n'})}),"\n",(0,l.jsx)(n.p,{children:"This recipe instructs bitbake to fetch the example-echo-server source code,\nbuild it and install some systemd scripts in order to start the\nexample-echo-server on target machine."}),"\n",(0,l.jsx)(n.p,{children:"The systemd script is very simple:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"[Unit]\nDescription=gleam echo server example\n\n[Service]\nWorkingDirectory=/usr/lib/hello-gleam-echo-server\nExecStart=/usr/lib/hello-gleam-echo-server/entrypoint.sh run\n\n[Install]\nWantedBy=multi-user.target\n"})}),"\n",(0,l.jsxs)(n.p,{children:['It just "runs" the entrypoint.sh script. The entrypoint.sh was created by gleam\ntooling. The recipe takes care of installing the echo-server artifacts at\n',(0,l.jsx)(n.em,{children:"/usr/lib/hello-gleam-echo-server"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["For more details, I recommend checking out the bitbake class\n",(0,l.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-erlang/tree/master/classes/gleam.bbclass",children:"gleam.bbclass"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var l=s(6540);const t={},r=l.createContext(t);function a(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);