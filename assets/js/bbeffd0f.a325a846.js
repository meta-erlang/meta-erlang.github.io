"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[6126],{76426:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var i=t(47032),a=t(74848),o=t(28453);const s={title:"meta-erlang on cloud II: building your own application",authors:["joaohf"],tags:["meta-erlang","cloud"]},r=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Intro",id:"intro",level:2},{value:"meta-axon cloud aware",id:"meta-axon-cloud-aware",level:2},{value:"Build instructions",id:"build-instructions",level:2},{value:"Launching EC2 instances",id:"launching-ec2-instances",level:2},{value:"Results",id:"results",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,a.jsxs)(n.p,{children:["The\n",(0,a.jsx)(n.a,{href:"/blog/2023/02/04/index",children:"meta-erlang on cloud II, build your own application"}),"\npost has shown the basic idea for how would be possible (and in fact it is\npossible) to build a custom Linux distribution and run it on Graviton AWS\ninstances."]}),"\n",(0,a.jsx)(n.p,{children:"Now, it's time to refactor out the previous result. Removing what are not\nnecessary in order to create a slim meta-erlang cloud ready image."}),"\n",(0,a.jsx)(n.p,{children:"So, this post is more like a tutorial to reach two main targets:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Explore a demo Yocto layer which shows the basic pieces to run a distro on\nGraviton"}),"\n",(0,a.jsxs)(n.li,{children:["Add ",(0,a.jsx)(n.a,{href:"https://livebook.dev/",children:"livebook"})," to that image and try it on cloud. Why\nnot trying some GPU processing :)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"meta-axon-cloud-aware",children:"meta-axon cloud aware"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-axon",children:"meta-axon"})," is my playground layer\nfocused on demonstrate how Erlang and Elixir applications could be integrated\nwith Yocto ecosystem. Until now, meta-axon has been tailored to run on embedded\ndevices (like raspberry pi). But, I'm also added, along side with the former\n",(0,a.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-axon/conf/distro/axon.conf",children:"axon-slim"}),", a\nnew distro called\n",(0,a.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-axon/conf/distro/axon.conf",children:"axon"}),". The axon\ndistro is focused on cloud, for the purpose of this tutorial AWS cloud."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["If you are new to the Yocto Project; remember some basic\n",(0,a.jsx)(n.a,{href:"https://docs.yoctoproject.org/overview-manual/concepts.html#yocto-project-concepts",children:"concepts here"}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["I also introduced a new image called\n",(0,a.jsx)(n.a,{href:"https://github.com/meta-erlang/meta-axon/recipes-extented/image/axon-image-cloud.bb",children:"axon-image-cloud"}),"\nwith all the pieces needed to run it on Graviton instances. This image relies on\nsystemd plus ",(0,a.jsx)(n.a,{href:"https://cloud-init.io/",children:"cloud-init"})," scripts."]}),"\n",(0,a.jsx)(n.p,{children:"It is important to mention that to run images on Graviton it is necessary to add\ntwo layer dependencies:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://git.yoctoproject.org/git/meta-arm",children:"meta-arm"}),", implementing a generic\nARM 64 bits machine"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://git.yoctoproject.org/git/meta-virtualization",children:"meta-virtualization"}),",\nbringing cloud-init recipe"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The rest of the needed components are all provided by standard Yocto layers\n(like: poky and meta-openembedded)."}),"\n",(0,a.jsx)(n.h2,{id:"build-instructions",children:"Build instructions"}),"\n",(0,a.jsxs)(n.p,{children:["We want fast feedback and test the build results quickly. So here is the\nprocedure that will build an distro linux image with Erlang, Elixir and\n",(0,a.jsx)(n.a,{href:"https://livebook.dev/",children:"livebook"}),":"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"I'm assuming a working Linux environment in order to run the below commands."})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Clone the meta-axon layer:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/meta-erlang/meta-axon.git\ncd meta-axon\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Install the ",(0,a.jsx)(n.a,{href:"https://kas.readthedocs.io/en/latest/",children:"kas"})," tool to setup a\nbitbake based project."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/siemens/kas\ncd kas\npip3 install .\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Call kas tool to build everything:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kas build kas/machines/meta-erlang-graviton2-livebook.yaml\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["The final image has been created in the deploy folder:\n",(0,a.jsx)(n.em,{children:"tmp/deploy/images/generic-arm64"}),"."]})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Run the script ",(0,a.jsx)(n.em,{children:"create-ami.sh"})," to convert and upload a image made with Yocto\ninto AWS AMI. Use your s3 bucket and specific how much extra space you want:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"../scripts/create-ami.sh <add your s3 bucket here> 8\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The script ",(0,a.jsx)(n.em,{children:"create_ami.sh"})," may need a fix in order to find the correct place for\nthe ",(0,a.jsx)(n.em,{children:"qemu-img"})," tool. Would be nice to have some sort of Yocto bbclass to\nautomatically convert and push the AMI image to AWS. But it is not the case yet."]})}),"\n",(0,a.jsx)(n.h2,{id:"launching-ec2-instances",children:"Launching EC2 instances"}),"\n",(0,a.jsx)(n.p,{children:"After uploading the image, it's time to lunch an EC2 instance like the\nfollowing:"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Remember to use a ",(0,a.jsx)(n.em,{children:"Free Trial available"})," instance type. When I wrote this post,\nthe eligible tier was the t4g.small."]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"alt Launching a new EC2 instance",src:t(30729).A+"",title:"Launching a new EC2 instance",width:"1231",height:"1123"})}),"\n",(0,a.jsx)(n.p,{children:"And, finally here is it running:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"alt Running a new EC2 instance",src:t(1819).A+"",title:"Running a new EC2 instance",width:"2106",height:"1098"})}),"\n",(0,a.jsxs)(n.p,{children:["Accessing the instance via ssh and login with the user ",(0,a.jsx)(n.em,{children:"axon"})," should work as\nexpected. After all it is a normal Linux distro."]}),"\n",(0,a.jsx)(n.h2,{id:"results",children:"Results"}),"\n",(0,a.jsx)(n.p,{children:"The following two screenshots show the livebook instance up and running on\nGraviton EC2 instance. It is pretty cool."}),"\n",(0,a.jsxs)(n.p,{children:["Just showing the ",(0,a.jsx)(n.code,{children:"top"})," command to check all the running process:"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"alt Livebook instance Graviton",src:t(12440).A+"",title:"Livebook instance on Graviton",width:"2418",height:"1018"})}),"\n",(0,a.jsx)(n.p,{children:"And here is the livebook system dashboard to inspect some usage statistics, and\nsystem information:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"alt Livebook dashboard on Graviton",src:t(84493).A+"",title:"Livebook dashboard on Graviton",width:"1307",height:"821"})}),"\n",(0,a.jsx)(n.p,{children:"As you can see, it is running on ARM64, with JIT enable."}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"Now we are converging to create the basic building blocks for creating custom\nLinux distribution based on Yocto Project that runs on Cloud."}),"\n",(0,a.jsx)(n.p,{children:"That could be the perfect case for projects that need to take control on every\ndetail of the software stack. From linx kernel configuration, building flags,\nsoftware configuration flags, anything. It's really flexible."}),"\n",(0,a.jsx)(n.p,{children:"And for projects that relies on Erlang and Elixir, it is also amazing bringing\nit to Cloud ecosystem."}),"\n",(0,a.jsxs)(n.p,{children:["The first blog part\n",(0,a.jsx)(n.a,{href:"/blog/2023/01/29/index",children:"meta-erlang on cloud I: EWAOL based"})," has introduced\nwhat is possible to build. This blog post is more related to explore the\nintroduced idea into something feasible and aligned with meta-erlang purposes."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},30729:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ec2_instance-45d124b067baf388b3a23847fac8ffcb.jpg"},1819:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ec2_running-542df8ebba53c7bdbb1d569cbbc58273.jpg"},84493:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/livebook_dashboard-ed3c09ff8e37c01665a4d7b70131741a.jpg"},12440:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/livebook_instance-d8d9491feeea9877f643f9815f942441.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(96540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},47032:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/02/04/index","editUrl":"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2023-02-04/index.md","source":"@site/blog/2023-02-04/index.md","title":"meta-erlang on cloud II: building your own application","description":"\x3c!---","date":"2023-02-04T00:00:00.000Z","tags":[{"inline":true,"label":"meta-erlang","permalink":"/blog/tags/meta-erlang"},{"inline":true,"label":"cloud","permalink":"/blog/tags/cloud"}],"readingTime":3.995,"hasTruncateMarker":true,"authors":[{"name":"Jo\xe3o Henrique Ferreira de Freitas","title":"Maintainer of meta-erlang","url":"https://github.com/joaohf","imageURL":"https://github.com/joaohf.png","key":"joaohf","page":null}],"frontMatter":{"title":"meta-erlang on cloud II: building your own application","authors":["joaohf"],"tags":["meta-erlang","cloud"]},"unlisted":false,"prevItem":{"title":"New Erlang releases 24.3.4.11, 25.3.2 and recipe updates","permalink":"/blog/2023/05/07/index"},"nextItem":{"title":"meta-erlang on cloud I: EWAOL based","permalink":"/blog/2023/01/29/index"}}')}}]);