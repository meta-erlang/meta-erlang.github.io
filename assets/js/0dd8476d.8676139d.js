"use strict";(self.webpackChunkmeta_erlang_github_io=self.webpackChunkmeta_erlang_github_io||[]).push([[9114],{96801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var a=n(21972),i=n(74848),s=n(28453);const r={title:"Testing meta-erlang with LuX",authors:["joaohf"],tags:["meta-erlang","test"]},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Yocto oeqa framework",id:"yocto-oeqa-framework",level:2},{value:"Lux, LUcid eXpect scripting",id:"lux-lucid-expect-scripting",level:2},{value:"Mixing lux and oeqa into meta-erlang for testing image",id:"mixing-lux-and-oeqa-into-meta-erlang-for-testing-image",level:2},{value:"Preparing testable images",id:"preparing-testable-images",level:3},{value:"Adding support for running lux scripts",id:"adding-support-for-running-lux-scripts",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In this post we will get a overview about how testimage feature has been enabled\ninto recipe images examples in order to implement tests."}),"\n",(0,i.jsxs)(t.p,{children:["As meta-erlang layer provides many\n",(0,i.jsx)(t.a,{href:"https://layers.openembedded.org/layerindex/branch/master/layer/meta-erlang/",children:"recipes for Erlang and Elixir application"}),",\ntesting and verifying if each supported application is still working between\nYocto releases is very important."]}),"\n",(0,i.jsxs)(t.p,{children:["So, this post is mostly about Yocto oeqa framework and\n",(0,i.jsx)(t.a,{href:"https://github.com/hawk/lux",children:"lux tool"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"yocto-oeqa-framework",children:"Yocto oeqa framework"}),"\n",(0,i.jsxs)(t.p,{children:["The Yocto Project provides a framework called\n",(0,i.jsx)(t.a,{href:"https://git.yoctoproject.org/poky/tree/meta/lib/oeqa",children:"oeqa"})," and integrated with\nYocto ecosystem for testing. It is able to test many aspects like: image test,\nSDK, build performance, bitbake. All those tests are implemented with python\nunittest."]}),"\n",(0,i.jsxs)(t.p,{children:["The documentation section called\n",(0,i.jsx)(t.a,{href:"https://docs.yoctoproject.org/test-manual/index.html",children:"Yocto Project Test Environment Manual"}),"\nexplains how everything works."]}),"\n",(0,i.jsx)(t.p,{children:"For the meta-erlang context, we are interesting in two types of tests:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://docs.yoctoproject.org/test-manual/intro.html#testimage",children:"testimage"}),",\nthese tests run once an image is up and running. Let's suppose an image with\nriak installed is up and running, we want to check if riak is online, restart,\nstart again and run health checks"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://docs.yoctoproject.org/test-manual/ptest.html#testing-packages-with-ptest",children:"ptest"}),",\npackage level test; it is not the focus today"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For a full oeqa view, the source code is\n",(0,i.jsx)(t.a,{href:"https://github.com/meta-erlang/meta-erlang/tree/master/lib/oeqa/runtime",children:"here"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["oeqa framework has all the elements needed in order to write unit tests. But, I\nwas not willing to write unit tests in python way. Instead, I was looking into a\ndifferent way for ",(0,i.jsx)(t.em,{children:"test image"})," type of tests."]}),"\n",(0,i.jsx)(t.h2,{id:"lux-lucid-expect-scripting",children:"Lux, LUcid eXpect scripting"}),"\n",(0,i.jsxs)(t.p,{children:["Lux is an amazing application written in Erlang/OTP. It's aim is for test\nautomation. Its github ",(0,i.jsx)(t.a,{href:"https://github.com/hawk/lux",children:"hawk/lux"})," is full of\nexamples and\n",(0,i.jsx)(t.a,{href:"https://github.com/hawk/lux/blob/master/doc/lux.md",children:"lux documentation"})," is also\ngreat. From its github's page:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"With Lux it is possible to\n\n    simplify automated testing\n    control interactive programs by sending textual input to them and using [regular expression][]s to ensure that their output matches the expectations\n    perform detailed post mortem analyzis of test suite results\n"})}),"\n",(0,i.jsxs)(t.p,{children:["There is a talk about Lux presented at the Erlang User Conference 2019:\n",(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=Nu15YOpmCKQ",children:"Cons T Ahs and Hakan Mattsson - LUX - an expect like test tool | Code BEAM STO 19"}),"\nand it explains all internal details that make lux an excellent tool for writing\nautomated tests."]}),"\n",(0,i.jsxs)(t.p,{children:["Let's see a simple lux script example where I want to verify if riak service is\nok. The test case is named\n",(0,i.jsx)(t.a,{href:"https://github.com/meta-erlang/meta-erlang/blob/master/lib/oeqa/runtime/files/lux/riak/start_restart_stop.lux",children:"start_restart_stop.lux"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"[doc Test if riak is able to start, restart and stop]\n\n[include ../support/luxinc/utils.luxinc]\n\n# riak is not so fast when starting\n[config timeout=30000]\n\n[shell cmd]\n\n    # Right after a boot, riak needs some time\n    # mainly because clutterfish processing\n    [sleep 30]\n\n    [doc2 Stop riak]\n    !systemctl stop riak\n    [invoke ok]\n\n    [doc2 Start riak]\n    !systemctl start riak\n    [invoke ok]\n\n    [doc2 Check if riak is up and running]\n    !SYSTEMD_COLORS=0 systemctl status --line=0 --no-pager riak\n    ?.*Active: active \\(running\\).*\n    [invoke check-exitcode 0]\n\n    # After a start, give some time to riak.\n    [sleep 30]\n\n    [doc2 Ping riak]\n    !/usr/lib/riak/bin/riak ping\n    ?pong\n    [invoke check-exitcode 0]\n\n    [doc2 Stop riak]\n    !systemctl stop riak\n    [invoke ok]\n\n    [doc2 Check if riak has been stop without any issue]\n    !SYSTEMD_COLORS=0 systemctl status --line=0 --no-pager riak\n    ?.*Active: inactive \\(dead\\).*\n    [invoke check-exitcode 3]\n\n[cleanup]\n    !systemctl stop riak\n    [invoke ok]\n"})}),"\n",(0,i.jsx)(t.p,{children:"The above test starts a shell, named 'cmd'. And tries to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"stop"}),"\n",(0,i.jsx)(t.li,{children:"start"}),"\n",(0,i.jsx)(t.li,{children:"check riak service status"}),"\n",(0,i.jsx)(t.li,{children:"ping riak"}),"\n",(0,i.jsx)(t.li,{children:"stop"}),"\n",(0,i.jsx)(t.li,{children:"check if riak was stopped"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The key point to understand lux scripts is that whatever you do as a human, lux\nwill also do in order to test the above commands; lux script will work in the\nsame way but faster."}),"\n",(0,i.jsxs)(t.p,{children:["For instance, to check if systemd was able to start riak one could check the\nresult of the command ",(0,i.jsx)(t.code,{children:"systemctl start riak"})," and after that the output of\n",(0,i.jsx)(t.code,{children:"systemctl status riak"})," in order to conclude or not if riak has been started\nproperly."]}),"\n",(0,i.jsxs)(t.p,{children:["There are some lux scripts implemented for each application that meta-erlang has\na recipe\n",(0,i.jsx)(t.a,{href:"https://github.com/meta-erlang/meta-erlang/tree/master/lib/oeqa/runtime/files/lux",children:"lib/oeqa/runtime/files/lux"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"mixing-lux-and-oeqa-into-meta-erlang-for-testing-image",children:"Mixing lux and oeqa into meta-erlang for testing image"}),"\n",(0,i.jsx)(t.h3,{id:"preparing-testable-images",children:"Preparing testable images"}),"\n",(0,i.jsx)(t.p,{children:"Yocto documentation says that when testimage feature is enabled, the TEST_SUITES\nimage variable is used to setup and run image tests."}),"\n",(0,i.jsxs)(t.p,{children:["The following recipe called\n",(0,i.jsx)(t.a,{href:"https://github.com/meta-erlang/meta-erlang/blob/master/recipes-examples/images/riak-image.bb",children:"riak-image.bb"}),"\nadds riak into TEST_SUITES variable only for qemu MACHINES:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'SUMMARY = "A console-only image with more full-featured Linux system \\\nfunctionality installed with OpenRiak installed."\n\nLICENSE = "MIT"\n\ninclude common.inc\ninclude testimage-common.inc\n\nAPPLICATION = "riak"\nAPPLICATION += "${@bb.utils.contains(\'IMAGE_CLASSES\', \'testimage\', \'curl\', \'\', d)}"\n\ninherit core-image\n\nTEST_SUITES:qemuall += "riak"\n\nQB_MEM ?= "-m 1024"\nIMAGE_ROOTFS_EXTRA_SPACE = "256000"\n'})}),"\n",(0,i.jsx)(t.p,{children:"The testimage-common.inc will install lux package when IMAGE_CLASSES variable\ncontains testimage feature."}),"\n",(0,i.jsx)(t.p,{children:"So, we need to have an image that declares what are the test suites that will be\nexecutable and the image is up and running. It's important to mention that these\ntests will be executable inside a QEMU instance."}),"\n",(0,i.jsx)(t.h3,{id:"adding-support-for-running-lux-scripts",children:"Adding support for running lux scripts"}),"\n",(0,i.jsx)(t.p,{children:"Now, it's time to get an idea about how to implement an oeqa test which will\ncall a lux script."}),"\n",(0,i.jsxs)(t.p,{children:["As a test case example, let's dissect a test\n",(0,i.jsx)(t.a,{href:"https://github.com/meta-erlang/meta-erlang/blob/master/lib/oeqa/runtime/cases/riak.py",children:"case for riak"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from oeqa.core.decorator.depends import OETestDepends\nfrom oeqa.core.decorator.oetimeout import OETimeout\nfrom oeqa.runtime.decorator.package import OEHasPackage\nfrom oeqa.runtime.decorator.lux import LuxTestCase\nfrom oeqa.runtime.meta_erlang import MetaErlangTestCase\n\nclass RiakTest(MetaErlangTestCase):\n\n    @OETimeout(300)\n    @OEHasPackage(["lux"])\n    @OETestDepends([\'ssh.SSHTest.test_ssh\'])\n    @LuxTestCase("start_restart_stop.lux", "riak")\n    def test_start_restart_stop(self):\n        self.run_lux_test_case()\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The test case is written in python and uses some decorators available in oeqa\nframework and some\n",(0,i.jsx)(t.a,{href:"https://github.com/meta-erlang/meta-erlang/blob/master/lib/oeqa/runtime/decorator/lux.py",children:"extra one to support lux"}),".\nThe purpose of these decorators is mainly to check conditions and configure lux\nscripts like what is the name of lux script which (e.g.:\n",(0,i.jsx)(t.em,{children:"start_restart_stop.lux"}),") implements the test and what folder it is located\n(e.g.: ",(0,i.jsx)(t.em,{children:"riak"}),")."]}),"\n",(0,i.jsxs)(t.p,{children:["The\n",(0,i.jsx)(t.a,{href:"https://github.com/meta-erlang/meta-erlang/blob/master/lib/oeqa/runtime/meta_erlang.py",children:"MetaErlangTestCase"}),"\nclass implements the function ",(0,i.jsx)(t.em,{children:"run_lux_test_case"})," and it is responsible for:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"copy test case to DUT (Device Under Test)"}),"\n",(0,i.jsx)(t.li,{children:"copy lux support configuration files and macros"}),"\n",(0,i.jsx)(t.li,{children:"execute lux test cases"}),"\n",(0,i.jsx)(t.li,{children:"check the results"}),"\n",(0,i.jsx)(t.li,{children:"copy logs from DUT into host"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The python test case above is needed as a bridge to call lux inside DUT. As the\nmain purpose is to use lux running on target for testing."}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"This sort of integration is like eating your own dog food. That means, using\ncomponents from Yocto Project and meta-erlang for testing all the work."}),"\n",(0,i.jsx)(t.p,{children:"oeqa is pretty solid and each Yocto release there are more and more tests\ncovering many areas of the ecosystem. I think lux is the right tool to provide\ntest cases without the needed to implement python code as with lux we can write\nexactly how one does test."})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(96540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},21972:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/09/26/index","editUrl":"https://github.com/meta-erlang/meta-erlang.github.io/tree/master/blog/2025-09-26/index.md","source":"@site/blog/2025-09-26/index.md","title":"Testing meta-erlang with LuX","description":"In this post we will get a overview about how testimage feature has been enabled","date":"2025-09-26T00:00:00.000Z","tags":[{"inline":true,"label":"meta-erlang","permalink":"/blog/tags/meta-erlang"},{"inline":true,"label":"test","permalink":"/blog/tags/test"}],"readingTime":5.315,"hasTruncateMarker":true,"authors":[{"name":"Jo\xe3o Henrique Ferreira de Freitas","title":"Maintainer of meta-erlang","url":"https://github.com/joaohf","imageURL":"https://github.com/joaohf.png","key":"joaohf","page":null}],"frontMatter":{"title":"Testing meta-erlang with LuX","authors":["joaohf"],"tags":["meta-erlang","test"]},"unlisted":false,"nextItem":{"title":"beamruntime","permalink":"/blog/2025/09/25/index"}}')}}]);