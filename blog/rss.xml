<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>meta-erlang Blog</title>
        <link>https://meta-erlang.github.io/blog</link>
        <description>meta-erlang Blog</description>
        <lastBuildDate>Sat, 01 Jul 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.13, 25.3.2.3, 26.0.2]]></title>
            <link>https://meta-erlang.github.io/blog/2023/07/01/index</link>
            <guid>https://meta-erlang.github.io/blog/2023/07/01/index</guid>
            <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p><table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.13</td></tr><tr><td>kirkstone</td><td>24.3.4.13, 25.3.2.3, 26.0.2</td></tr><tr><td>mickledore</td><td>25.3.2.3, 26.0.2</td></tr></tbody></table><p>In additional to those new versions, a new
<a href="https://meta-erlang.github.io/docs/guides/guides-beamtools/" target="_blank" rel="noopener noreferrer">beamtools</a> is
available
<a href="https://github.com/meta-erlang/meta-erlang/releases/tag/beamtools-0.7.0" target="_blank" rel="noopener noreferrer">here</a>.</p><p>This new version was made with
<a href="https://docs.yoctoproject.org/dev/migration-guides/migration-4.2.html" target="_blank" rel="noopener noreferrer">Yocto mickledore</a>
release and brings Erlang/OTP 26.0.2 and Elixir 1.15.2.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New meta-erlang branch mickledore]]></title>
            <link>https://meta-erlang.github.io/blog/2023/06/09/index</link>
            <guid>https://meta-erlang.github.io/blog/2023/06/09/index</guid>
            <pubDate>Fri, 09 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Yocto Project has released a new]]></description>
            <content:encoded><![CDATA[<p>Yocto Project has <a href="https://wiki.yoctoproject.org/wiki/Releases" target="_blank" rel="noopener noreferrer">released</a> a new
<a href="https://docs.yoctoproject.org/dev/migration-guides/migration-4.2.html" target="_blank" rel="noopener noreferrer">version 4.2 (Mickledore)</a>.
As consequence meta-erlang brings a new branch mickledore updating most of the
recipes. mickledore release is not a LTS release and community support will be
available until November 2023.</p><p>We've also upgraded to the latest Erlang/OTP and Elixir releases supporting the
following new Erlang/OTP releases:</p><ul><li>Erlang/OTP 26.0.1</li><li>Erlang/OTP 25.3.2.2</li><li>Elixir 1.14.4</li></ul><p>It's worth mentioning the meta-erlang master has also been updated.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.11, 25.3.2 and recipe updates]]></title>
            <link>https://meta-erlang.github.io/blog/2023/05/07/index</link>
            <guid>https://meta-erlang.github.io/blog/2023/05/07/index</guid>
            <pubDate>Sun, 07 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p><table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.11</td></tr><tr><td>kirkstone</td><td>24.3.4.11, 25.3.2</td></tr><tr><td>langdale</td><td>25.3.2</td></tr></tbody></table><p>Removed recipes:</p><ul><li>For langdale the recipes ejabberd and emqx have been removed due the lack of
supporting cross-compilation build in a stable way.</li></ul><p>Updated recipes:</p><ul><li>For langdale the following recipes have been updated: lux, vernemq, yaws,
tsung, riak, couchdb. It is important to mention about langdale
<a href="https://wiki.yoctoproject.org/wiki/Releases" target="_blank" rel="noopener noreferrer">EOL in May 2023</a>. So, this
branch will not receive updates.</li></ul><p>It has been decided:</p><ul><li>Dropped support to Erlang/OTP 24 in langdale. Due the lack of deterministic
build flags in 24. Elixir 1.12 has also been dropped (because it dependes on
Erlang/OTP 24).</li></ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[meta-erlang on cloud II: building your own application]]></title>
            <link>https://meta-erlang.github.io/blog/2023/02/04/index</link>
            <guid>https://meta-erlang.github.io/blog/2023/02/04/index</guid>
            <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<!---]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">​</a></h2><p>The
<a href="/blog/2023/02/04/index/">meta-erlang on cloud II, build your own application</a>
post has shown the basic idea for how would be possible (and in fact it is
possible) to build a custom Linux distribution and run it on Graviton AWS
instances.</p><p>Now, it's time to refactor out the previous result. Removing what are not
necessary in order to create a slim meta-erlang cloud ready image.</p><p>So, this post is more like a tutorial to reach two main targets:</p><ul><li>Explore a demo Yocto layer which shows the basic pieces to run a distro on
Graviton</li><li>Add <a href="https://livebook.dev/" target="_blank" rel="noopener noreferrer">livebook</a> to that image and try it on cloud. Why
not trying some GPU processing :)</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="meta-axon-cloud-aware">meta-axon cloud aware<a href="#meta-axon-cloud-aware" class="hash-link" aria-label="Direct link to meta-axon cloud aware" title="Direct link to meta-axon cloud aware">​</a></h2><p><a href="https://github.com/meta-erlang/meta-axon" target="_blank" rel="noopener noreferrer">meta-axon</a> is my playground layer
focused on demonstrate how Erlang and Elixir applications could be integrated
with Yocto ecosystem. Until now, meta-axon has been tailored to run on embedded
devices (like raspberry pi). But, I'm also added, along side with the former
<a href="https://github.com/meta-erlang/meta-axon/conf/distro/axon.conf" target="_blank" rel="noopener noreferrer">axon-slim</a>, a
new distro called
<a href="https://github.com/meta-erlang/meta-axon/conf/distro/axon.conf" target="_blank" rel="noopener noreferrer">axon</a>. The axon
distro is focused on cloud, for the purpose of this tutorial AWS cloud.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>If you are new to the Yocto Project; remember some basic
<a href="https://docs.yoctoproject.org/overview-manual/concepts.html#yocto-project-concepts" target="_blank" rel="noopener noreferrer">concepts here</a>.</p></div></div><p>I also introduced a new image called
<a href="https://github.com/meta-erlang/meta-axon/recipes-extented/image/axon-image-cloud.bb" target="_blank" rel="noopener noreferrer">axon-image-cloud</a>
with all the pieces needed to run it on Graviton instances. This image relies on
systemd plus <a href="https://cloud-init.io/" target="_blank" rel="noopener noreferrer">cloud-init</a> scripts.</p><p>It is important to mention that to run images on Graviton it is necessary to add
two layer dependencies:</p><ul><li><a href="https://git.yoctoproject.org/git/meta-arm" target="_blank" rel="noopener noreferrer">meta-arm</a>, implementing a generic
ARM 64 bits machine</li><li><a href="https://git.yoctoproject.org/git/meta-virtualization" target="_blank" rel="noopener noreferrer">meta-virtualization</a>,
bringing cloud-init recipe</li></ul><p>The rest of the needed components are all provided by standard Yocto layers
(like: poky and meta-openembedded).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-instructions">Build instructions<a href="#build-instructions" class="hash-link" aria-label="Direct link to Build instructions" title="Direct link to Build instructions">​</a></h2><p>We want fast feedback and test the build results quickly. So here is the
procedure that will build an distro linux image with Erlang, Elixir and
<a href="https://livebook.dev/" target="_blank" rel="noopener noreferrer">livebook</a>:</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>I'm assuming a working Linux environment in order to run the below commands.</p></div></div><ol><li><p>Clone the meta-axon layer:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> clone https://github.com/meta-erlang/meta-axon.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> meta-axon</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>Install the <a href="https://kas.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">kas</a> tool to setup a
bitbake based project.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> clone https://github.com/siemens/kas</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> kas</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pip3 </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> </span><span class="token builtin class-name">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>Call kas tool to build everything:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kas build kas/machines/meta-erlang-graviton2-livebook.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>The final image has been created in the deploy folder:
<em>tmp/deploy/images/generic-arm64</em>.</p></div></div></li><li><p>Run the script <em>create-ami.sh</em> to convert and upload a image made with Yocto
into AWS AMI. Use your s3 bucket and specific how much extra space you want:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">/scripts/create-ami.sh </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">add your s3 bucket here</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ol><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>The script <em>create_ami.sh</em> may need a fix in order to find the correct place for
the <em>qemu-img</em> tool. Would be nice to have some sort of Yocto bbclass to
automatically convert and push the AMI image to AWS. But it is not the case yet.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="launching-ec2-instances">Launching EC2 instances<a href="#launching-ec2-instances" class="hash-link" aria-label="Direct link to Launching EC2 instances" title="Direct link to Launching EC2 instances">​</a></h2><p>After uploading the image, it's time to lunch an EC2 instance like the
following:</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Remember to use a <em>Free Trial available</em> instance type. When I wrote this post,
the eligible tier was the t4g.small.</p></div></div><p><img loading="lazy" alt="alt Launching a new EC2 instance" src="/assets/images/ec2_instance-45d124b067baf388b3a23847fac8ffcb.jpg" title="Launching a new EC2 instance" width="1231" height="1123" class="img_ev3q"></p><p>And, finally here is it running:</p><p><img loading="lazy" alt="alt Running a new EC2 instance" src="/assets/images/ec2_running-542df8ebba53c7bdbb1d569cbbc58273.jpg" title="Running a new EC2 instance" width="2106" height="1098" class="img_ev3q"></p><p>Accessing the instance via ssh and login with the user <em>axon</em> should work as
expected. After all it is a normal Linux distro.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="results">Results<a href="#results" class="hash-link" aria-label="Direct link to Results" title="Direct link to Results">​</a></h2><p>The following two screenshots show the livebook instance up and running on
Graviton EC2 instance. It is pretty cool.</p><p>Just showing the <code>top</code> command to check all the running process:</p><p><img loading="lazy" alt="alt Livebook instance Graviton" src="/assets/images/livebook_instance-d8d9491feeea9877f643f9815f942441.jpg" title="Livebook instance on Graviton" width="2418" height="1018" class="img_ev3q"></p><p>And here is the livebook system dashboard to inspect some usage statistics, and
system information:</p><p><img loading="lazy" alt="alt Livebook dashboard on Graviton" src="/assets/images/livebook_dashboard-ed3c09ff8e37c01665a4d7b70131741a.jpg" title="Livebook dashboard on Graviton" width="1307" height="821" class="img_ev3q"></p><p>As you can see, it is running on ARM64, with JIT enable.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2><p>Now we are converging to create the basic building blocks for creating custom
Linux distribution based on Yocto Project that runs on Cloud.</p><p>That could be the perfect case for projects that need to take control on every
detail of the software stack. From linx kernel configuration, building flags,
software configuration flags, anything. It's really flexible.</p><p>And for projects that relies on Erlang and Elixir, it is also amazing bringing
it to Cloud ecosystem.</p><p>The first blog part
<a href="/blog/2023/01/29/index/">meta-erlang on cloud I: EWAOL based</a> has introduced
what is possible to build. This blog post is more related to explore the
introduced idea into something feasible and aligned with meta-erlang purposes.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>cloud</category>
        </item>
        <item>
            <title><![CDATA[meta-erlang on cloud I: EWAOL based]]></title>
            <link>https://meta-erlang.github.io/blog/2023/01/29/index</link>
            <guid>https://meta-erlang.github.io/blog/2023/01/29/index</guid>
            <pubDate>Sun, 29 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<!---]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">​</a></h2><p>The <a href="https://www.yoctoproject.org/" target="_blank" rel="noopener noreferrer">Yocto Project</a> has been made to create
specific embedded Linux distributions. And still does a great job on this field
making it possible to run softwares in a range of target architectures.</p><p>But, the term <em>embedded Linux distribution</em> should be expanded a bit more; it's
not only about creating tiny filesystem within cross-compiled software, scripts
and configurations targeting platforms with small footprint, CPU and memory
constraints.</p><p>We could do more, actually there are people using the not so newly but still new
ARM processors that runs on cloud environment. For sure the most famous one is
the
<a href="https://aws.amazon.com/ec2/graviton/" target="_blank" rel="noopener noreferrer">Graviton EC2 instances, on AWS cloud</a>.</p><p>Looking into these Graviton processors and Yocto Project, what would it be
possible ? Maybe running Yocto images on Graviton instances could be feasible
enough to run some workload. And what about adding Erlang/OTP and Elixir to that
mix ? Or running some advanced database or broker made with Erlang ?</p><p>That is exactly what we will try to experiment. In this first post about running
meta-erlang on cloud, we are going to look how it would be possible.</p><p>Actually there are folks whose made possible to run Yocto images on Graviton
instances. Technically is pretty simple and all bits and bytes have been
described in the blog post
<a href="https://aws.amazon.com/blogs/industries/building-an-automotive-embedded-linux-image-for-edge-using-arm-graviton-yocto-project-soafee/" target="_blank" rel="noopener noreferrer">Building an Automotive Embedded Linux Image for Edge and Cloud Using Arm-based Graviton Instances, Yocto Project, and SOAFEE</a>.
The companion repository also worth the reading
<a href="https://github.com/aws4embeddedlinux/meta-aws-ewaol" target="_blank" rel="noopener noreferrer">The meta-aws-ewaol repository</a>.</p><p>The idea that <!-- -->[1]<!-- --> brings is part of another idea related to Software-Defined
Vehicles through Cloud <!-- -->[2]<!-- --> which is very excited. These references also cites a
framework to build Edge Workloads <!-- -->[3]<!-- --> and in fact the EWAOL (Edge Workload
Abstraction and Orchestration Layer) was used as a base to produce the
<a href="https://github.com/aws4embeddedlinux/meta-aws-ewaol" target="_blank" rel="noopener noreferrer">meta-aws-ewaol</a> layer.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="putting-everything-together-first-experiment">Putting everything together, first experiment<a href="#putting-everything-together-first-experiment" class="hash-link" aria-label="Direct link to Putting everything together, first experiment" title="Direct link to Putting everything together, first experiment">​</a></h2><p>So, based on all what has been described so far and as a first experience, I've
tested meta-aws-ewaol setup and added meta-erlang into that. The aim was to run
<code>erl</code> and <code>iex</code> console on Graviton EC2 instances.</p><p>I had to make a few fixes on meta-aws-ewaol and pushed the results here:
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang" target="_blank" rel="noopener noreferrer">meta-aws-ewaol with meta-erlang</a>.
The rest of this session is a small guide that I made in order to run our first
experiment.</p><p>With a ready Yocto environment, following the
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#building-ewaol" target="_blank" rel="noopener noreferrer">Building EWAOL</a>
session is enough to get the system built. It's just Yocto, nothing more.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><ul><li>You can create a free AWS account. There are Graviton instances included in
the AWS free tier. It's more than sufficient.</li><li>Bear in mind that you don't need to be an AWS master but you will end up
spending some time learning how to create AWS services.</li></ul></div></div><p>The next step is to create and setup all the AWS infrastructure needed in order
to push the Yocto image as AWS AMI and start the Graviton Instance. Lucky, there
is a Cloud Formation template which performs the initial setup. The session
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#pre-requisites" target="_blank" rel="noopener noreferrer">Pre-requisites</a>
helps to clarify it.</p><p>Then, having the Yocto image and the basic AWS account in place. It's time to
use
<a href="https://github.com/joaohf/meta-aws-ewaol/blob/main-add-meta-erlang/scripts/create-ami.sh" target="_blank" rel="noopener noreferrer">a special script</a>
to convert Yocto image to an AMI image. Most of the job is done by awscli
commands. There is nothing related to Yocto here. The session
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#creating-ami-from-image-file" target="_blank" rel="noopener noreferrer">Creating AMI from image file</a>
tells what is necessary to do.</p><p>Finally, the last part. After pushing the AMI image to the S3 bucket. The fun
part is to instantiate a Graviton instance (please refer to the session
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#launch-the-ec2-image-as-usual-using-your-newly-created-ami" target="_blank" rel="noopener noreferrer">Launch the EC2 Image as usual using your newly created AMI</a>)
an run the EWAOL based image and test how Erlang and Elixir looks like.</p><p>I've added two screenshots below just to have a taste of the final results:</p><p><img loading="lazy" alt="alt Erlang console" src="/assets/images/meta-erlang-gravitron-erl-74d44c9d063c73e6a3f61183f0bfcb5e.jpg" title="Erlang console" width="1229" height="988" class="img_ev3q"></p><p><img loading="lazy" alt="alt Elixir console" src="/assets/images/meta-erlang-gravitron-iex-96e0e9113e0029ca640a1e9d74e3eb94.jpg" title="Elixir console" width="1007" height="167" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2><p>This first experiment has finished and I can conclude two main bullets:</p><ul><li>It is possible to build a Yocto image and run it on Graviton instances</li><li>meta-aws-ewaol is a great start point. And the EWAOL framework looks solid for
what it has been planned for.</li></ul><p>However, what I am looking for is to run a tiny image with just the necessary to
instantiate an ARM cloud instance running Erlang/Elixir. That is what the next
blog post will do:
<a href="/blog/2023/02/04/index/">meta-erlang on cloud II, build your own application</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h2><ul><li>[1]<!-- -->:
<a href="https://aws.amazon.com/blogs/industries/building-an-automotive-embedded-linux-image-for-edge-using-arm-graviton-yocto-project-soafee/" target="_blank" rel="noopener noreferrer">Building an Automotive Embedded Linux Image for Edge and Cloud Using Arm-based Graviton Instances, Yocto Project, and SOAFEE</a></li><li>[2]<!-- -->:
<a href="https://armkeil.blob.core.windows.net/developer/Files/pdf/white-paper/arm-aws-edge-environmental-parity-wp.pdf" target="_blank" rel="noopener noreferrer">Accelerating Software-Defined Vehicles through Cloud-To-Vehicle Edge Environmental Parity</a></li><li>[3]<!-- -->:
<a href="https://ewaol.docs.arm.com/en/kirkstone-dev/index.html" target="_blank" rel="noopener noreferrer">Edge Workload Abstraction and Orchestration Layer (EWAOL) Documentation</a></li></ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>cloud</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.8, 25.1.2.1, 25.2.1]]></title>
            <link>https://meta-erlang.github.io/blog/2023/01/22/index</link>
            <guid>https://meta-erlang.github.io/blog/2023/01/22/index</guid>
            <pubDate>Sun, 22 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p><table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.8</td></tr><tr><td>kirkstone</td><td>24.3.4.8, 25.1.2.1, 25.2.1</td></tr><tr><td>langdale</td><td>24.3.4.8, 25.1.2.1, 25.2.1</td></tr></tbody></table><p>Fixed bugs:</p><ul><li><a href="https://github.com/meta-erlang/meta-erlang/issues/205" target="_blank" rel="noopener noreferrer">QA Issue buildpaths (reproducible builds) when building with langdale</a>,
a specific patch has been integrated in order to avoid building flags into the
final beam.smp binary.</li></ul><p>To be decided:</p><ul><li>Yocto Langdale release has enabled reproducible build checks. Erlang/OTP from
25 and later implements special flags to fix reproducible issues. But
Erlang/OTP 24 does not have these special flags as a consequence langdale
Erlang/OTP 24 builds warns about: <em>packages contains reference to TMPDIR
<!-- -->[buildpaths]</em>. There are two paths that we could get. One is to drop
Erlang/OTP 24 support OR disable QA buildpaths checking.</li></ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://meta-erlang.github.io/blog/welcome</link>
            <guid>https://meta-erlang.github.io/blog/welcome</guid>
            <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[This new website is based on Docusaurus documentation]]></description>
            <content:encoded><![CDATA[<p>This new website is based on <a href="https://docusaurus.io" target="_blank" rel="noopener noreferrer">Docusaurus</a> documentation
framework. The previous site was using <a href="https://docsify.js.org/#/" target="_blank" rel="noopener noreferrer">docsify</a>,
which is also great. But Docusaurus address others concerns when writing
documentation for open source project.</p><p>So, the site has a new frontend page and a blog session where we want to add
latest meta-erlang release highlights. The documentation session is pretty much
the same plus some improvements on
<a href="https://meta-erlang.github.io/docs/" target="_blank" rel="noopener noreferrer">Introduction</a> chapter.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
    </channel>
</rss>