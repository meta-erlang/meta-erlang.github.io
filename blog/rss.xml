<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>meta-erlang Blog</title>
        <link>https://meta-erlang.github.io/blog/</link>
        <description>meta-erlang Blog</description>
        <lastBuildDate>Sun, 06 Oct 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Anatomy of erlang and elixir packages for YP/OE]]></title>
            <link>https://meta-erlang.github.io/blog/2024/10/06/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/10/06/index/</guid>
            <pubDate>Sun, 06 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Usually, when designing a linux distribution using YP/OE we want a slim image]]></description>
            <content:encoded><![CDATA[<p>Usually, when designing a linux distribution using YP/OE we want a slim image
with only what we need to run a specific application (or applications). In this
post we'll discuss a bit about erlang and elixir packages that meta-erlang layer
provides.</p>
<p>It's important to know how the packages are divided into smaller ones in order
to offer a better composition when creating linux distributions with YP/OE.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="environment-setup">Environment setup<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#environment-setup" class="hash-link" aria-label="Direct link to Environment setup" title="Direct link to Environment setup">â€‹</a></h2>
<ol>
<li>
<p>Cloning all repositories for scarthgap release:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/openembedded/meta-openembedded.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/meta-erlang/meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/meta-erlang/meta-axon</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-openembedded/meta-oe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-axon</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Configure the <code>conf/local.conf</code> and enable multiconfig builds:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># debug-tweaks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EXTRA_IMAGE_FEATURES ?= "debug-tweaks"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">USER_CLASSES ?= "buildhistory buildstats"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BUILDHISTORY_COMMIT = "1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PACKAGE_CLASSES = "package_ipk"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PATCHRESOLVE = "noop"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INHERIT += "rm_work"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RM_WORK_EXCLUDE = "erlang erlang-native nativesdk-erlang"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># diskmon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BB_DISKMON_DIRS = "\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STOPTASKS,${TMPDIR},1G,100K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STOPTASKS,${DL_DIR},1G,100K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STOPTASKS,${SSTATE_DIR},1G,100K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STOPTASKS,/tmp,100M,100K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HALT,${TMPDIR},100M,1K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HALT,${DL_DIR},100M,1K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HALT,${SSTATE_DIR},100M,1K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HALT,/tmp,10M,1K"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># general config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SDKMACHINE = "x86_64"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONNECTIVITY_CHECK_URIS = "https://www.google.com/"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># qemu configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PACKAGECONFIG:append:pn-qemu-system-native = " sdl"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PACKAGECONFIG:append:pn-qemu-system-native = " gtk+"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># systemd only</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INIT_MANAGER = "systemd"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE ??= "qemuarm"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRO ??= "poky"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BBMULTICONFIG ?= "qemux86-64-erlang-elixir qemuarm64-erlang-elixir qemuarm-erlang-elixir qemux86-erlang-elixir qemux86-64-x32-erlang-elixir"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># To disable QA checks for https://github.com/meta-erlang/meta-erlang/issues/328</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ERROR_QA:remove = "buildpaths"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="multiconfig-build">multiconfig build<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#multiconfig-build" class="hash-link" aria-label="Direct link to multiconfig build" title="Direct link to multiconfig build">â€‹</a></h2>
<p>YP/OE provides a smart way to build the same image (or different images) for
multiple targets. It is called multiconfig build and it is fully described at
<a href="https://docs.yoctoproject.org/dev-manual/building.html?highlight=multiconfig#building-images-for-multiple-targets-using-multiple-configurations" target="_blank" rel="noopener noreferrer">Building Images for Multiple Targets Using Multiple Configurations</a>.</p>
<p>Four our context, don't forget to checkout the section
<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#environment-setup">Environment setup</a>, we need to compare the erlang and
elixir packages using different processor architectures (<em>MACHINES</em> in YP/OE
language).</p>
<p>We can build five targets using the command below:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemux86-64-erlang-elixir:core-image-minimal \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemux86-erlang-elixir:core-image-minimal \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemuarm-erlang-elixir:core-image-minimal \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemuarm64-erlang-elixir:core-image-minimal \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemux86-64-x32-erlang-elixir:core-image-minimal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The multiconfig build was configured to create a specific TMPDIR for each
processor architecture. Then, the final results at build folder will be one
folder for each architecture:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemuarm64-glibc-erlang-elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemuarm-glibc-erlang-elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemux86-64-glibc-erlang-elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemux86-64-glibc-x32-erlang-elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemux86-glibc-erlang-elixir</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That way, it's easy to navigate into the final output files.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introspection-with-buildhistory">Introspection with buildhistory<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#introspection-with-buildhistory" class="hash-link" aria-label="Direct link to Introspection with buildhistory" title="Direct link to Introspection with buildhistory">â€‹</a></h2>
<p>The buildhistory is a YP/OE feature that writes some meta data into a git
repository for further inspection. Then, it's possible check and interact with
files using standard linux tools like find and grep to collect insights. Using
buildhistory is a shortcut because we can inspect how files would be installed
into the final image, without having to burn the image and boot it on a real (or
virtual) target.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Check out the
<a href="https://docs.yoctoproject.org/5.0.3/dev-manual/build-quality.html?highlight=buildhistory#enabling-and-disabling-build-history" target="_blank" rel="noopener noreferrer">Enabling and Disabling Build History</a>
instructions for how to enable buildhistory.</p></div></div>
<p>In this post we are interested in check the size of erlang and elixir packages.</p>
<p>After a success build and from the YP/OE build folder, it's possible to explore
the buildhistory git repository:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd buildhistory/packages/cortexa57-poky-linux/erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find -name latest -print0 | xargs -0 grep PKGSIZE | sort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd -</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd buildhistory/packages/cortexa57-poky-linux/elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find -name latest -print0 | xargs -0 grep PKGSIZE | sort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>PKGSIZE</code> gives to us the size in bytes of the final packages generated by
erlang and elixir recipes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ypoe-packaging-for-erlang-and-elixir-recipes">YP/OE packaging for erlang and elixir recipes<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#ypoe-packaging-for-erlang-and-elixir-recipes" class="hash-link" aria-label="Direct link to YP/OE packaging for erlang and elixir recipes" title="Direct link to YP/OE packaging for erlang and elixir recipes">â€‹</a></h2>
<p>The nature of Erlang/OTP is to isolate erlang modules into applications. The
Erlang/OTP source code embraces this philosophy and it is natural to transform
each application into an installed package (IPK, DEB, RPM). For that,
meta-erlang uses a simple script that creates a recipe manifest (see
<a href="https://github.com/meta-erlang/meta-erlang/blob/cb94887c108b63c6cba290cb019468f246df5ea4/scripts/contrib/erlang/generate-manifest#L76" target="_blank" rel="noopener noreferrer">erlang recipe manifest</a>
for details).</p>
<p>An erlang recipe manifest, for example
<a href="https://github.com/meta-erlang/meta-erlang/blob/cb94887c108b63c6cba290cb019468f246df5ea4/recipes-devtools/erlang/erlang-27.1-manifest.inc" target="_blank" rel="noopener noreferrer">erlang-27.1-manifest.inc</a>,
declares each Erlang/OTP application. For each application there are five
packages:</p>
<ul>
<li><code>application_name-doc</code>: documentation, man pages and examples</li>
<li><code>application_name-dbg</code>: debug symbols, if any</li>
<li><code>application_name-dev</code>: development C headers, shared libraries (*.so)</li>
<li><code>application_name-staticdev</code>: static libraries (*.a)</li>
<li><code>application_name</code>: BEAM modules and files from <code>priv</code> folder</li>
</ul>
<p>Where <code>application_name</code> is the name of the application like: kernel, stdlib,
sasl, ...</p>
<p>This separation is necessary because YP/OE splits the package of any recipe into
doc, dbg, dev and staticdev. Then, the user have more control about what will be
installed into the final image.</p>
<p>The elixir recipe follows the same way, but simpler (check out the
<a href="https://github.com/meta-erlang/meta-erlang/blob/cb94887c108b63c6cba290cb019468f246df5ea4/recipes-devtools/elixir/elixir.inc" target="_blank" rel="noopener noreferrer">elixir.inc</a>
include file).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="special-metapackages">Special metapackages<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#special-metapackages" class="hash-link" aria-label="Direct link to Special metapackages" title="Direct link to Special metapackages">â€‹</a></h3>
<p>As there are many packages for erlang and elixir, sometimes we need to setup a
development environment will all erlang and elixir packages installed. Or a
minimum set of packages. There are a couple of metapackages created for that
purpose:</p>
<ul>
<li>erlang-modules: install <em>all</em> Erlang/OTP applications</li>
<li>erlang-modules-dev: install <em>all</em> Erlang/OTP applications development packages</li>
<li>elixir-modules: install <em>all</em> elixir applications</li>
<li>elixir-modules-dev: install <em>all</em> elixir applications development packages</li>
<li>erlang: install the minimal Erlang/OTP applications</li>
<li>elixir: install the minimal elixir applications</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="where-the-files-get-installed-">Where the files get installed ?<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#where-the-files-get-installed-" class="hash-link" aria-label="Direct link to Where the files get installed ?" title="Direct link to Where the files get installed ?">â€‹</a></h3>
<p>The best way to awnser this is to take a look into buildhistory data.</p>
<p>At the build folder there is a folder called buildhistory. That folder is split
by images and packages. And for each architecture, there is a specific folder.
So, let's check the first 20 lines from file: files-in-packages.txt for
erlang-erts package:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">head -n 20 buildhistory/packages/core2-32-poky-linux/erlang/erlang-erts/files-in-package.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               22 ./usr/bin/epmd -&gt; ../lib/erlang/bin/epmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               21 ./usr/bin/erl -&gt; ../lib/erlang/bin/erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               25 ./usr/bin/escript -&gt; ../lib/erlang/bin/escript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               25 ./usr/bin/run_erl -&gt; ../lib/erlang/bin/run_erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               24 ./usr/bin/to_erl -&gt; ../lib/erlang/bin/to_erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang/bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               21 ./usr/lib/erlang/bin/epmd -&gt; ../erts-15.1/bin/epmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root             1474 ./usr/lib/erlang/bin/erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root           140752 ./usr/lib/erlang/bin/erl_call</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root            38456 ./usr/lib/erlang/bin/escript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             6860 ./usr/lib/erlang/bin/no_dot_erlang.boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root            25996 ./usr/lib/erlang/bin/run_erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root             1745 ./usr/lib/erlang/bin/start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             6885 ./usr/lib/erlang/bin/start.boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             6885 ./usr/lib/erlang/bin/start_clean.boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root             1244 ./usr/lib/erlang/bin/start_erl</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="erlang-package-sizes">erlang package sizes<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#erlang-package-sizes" class="hash-link" aria-label="Direct link to erlang package sizes" title="Direct link to erlang package sizes">â€‹</a></h2>
<p>When installing the metapackage called <code>erlang</code> the following packages will be
automatically installed:</p>
<ul>
<li>erlang-erts</li>
<li>erlang-kernel</li>
<li>erlang-stdlib</li>
<li>erlang-sasl</li>
</ul>
<p>These packages are the basic ones needed in order to run Erlang programs.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Actually, your application is in charge of making a proper Erlang/OTP
release. Installing the package <code>erlang</code> is an option if you need it installed
into standard locations. Otherwise, your application should produce a valide
release with a builtin ERTS inside.</p></div></div>
<p>The following charts are listed below to get a view about the size of those
basic erlang packages.</p>
<p>The difference between each build, besides the processor architecture, is the
size in bytes of the package erlang-erts. That makes sense because that package
is the ERTS (which is architecture dependent, like word size). On other hand,
the packages kernel, stdlib, sasl have the same size across all builds.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemux86">qemux86<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemux86" class="hash-link" aria-label="Direct link to qemux86" title="Direct link to qemux86">â€‹</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:qemux86-erlang-elixir:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemux86-64">qemux86-64<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemux86-64" class="hash-link" aria-label="Direct link to qemux86-64" title="Direct link to qemux86-64">â€‹</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:qemux86-64-erlang-elixir:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemux86-64-with-x32-psabi">qemux86-64 with x32 psABI<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemux86-64-with-x32-psabi" class="hash-link" aria-label="Direct link to qemux86-64 with x32 psABI" title="Direct link to qemux86-64 with x32 psABI">â€‹</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:x86_64_x32-poky-linux-gnux32:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Enabling x32 psABI should be considered if your application needs to
handle 64-bit features, but you can't afford wasting space with addressing. See
the blog post <a href="https://meta-erlang.github.io/blog/2023/09/02/index/">Exploring x32 psABI for Erlang/OTP</a>.</p><p>The package size difference in bytes between x32 build and a normal x86-64
is 4615556.</p></div></div>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemuarm64">qemuarm64<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemuarm64" class="hash-link" aria-label="Direct link to qemuarm64" title="Direct link to qemuarm64">â€‹</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:qemuarm64-erlang-elixir:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemuarm">qemuarm<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemuarm" class="hash-link" aria-label="Direct link to qemuarm" title="Direct link to qemuarm">â€‹</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:qemuarm-erlang-elixir:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="elixir-package-sizes">elixir package sizes<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#elixir-package-sizes" class="hash-link" aria-label="Direct link to elixir package sizes" title="Direct link to elixir package sizes">â€‹</a></h2>
<p>When installing the metapackage called <code>elixir</code> the following packages will be
automatically installed:</p>
<ul>
<li>erlang (see <a href="https://meta-erlang.github.io/blog/2024/10/06/index/#erlang-package-sizes">erlang package size for details</a>)</li>
<li>erlang-compiler</li>
</ul>
<p>That is because elixir package needs erlang (erts, kernel, stdlib and sasl)
installed. And, the erlang compiler is also a requirement.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Again, your application should manage a release for best results.
Installing the package <code>elixir</code> only makes sense for testing purposes.</p></div></div>
<p>The following table summarizes the packages sizes per processor architecture.</p>
<table><thead><tr><th>Processor architecture</th><th>Package size in bytes</th></tr></thead><tbody><tr><td>core2-32-poky-linux (qemux86)</td><td>5760108</td></tr><tr><td>core2-64-poky-linux (qemux86-64)</td><td>5760368</td></tr><tr><td>qemux86-64-x32-erlang-elixir</td><td>5763392</td></tr><tr><td>cortexa57-poky-linux (qemuarm64)</td><td>5760476</td></tr><tr><td>cortexa15t2hf-neon-poky-linux-gnueabi</td><td>5764076</td></tr></tbody></table>
<p>There are slight size differences. It should not as there is no architecture
dependency on elixir beam files.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>x32</category>
        </item>
        <item>
            <title><![CDATA[fwup for A/B image upgrades]]></title>
            <link>https://meta-erlang.github.io/blog/2024/09/24/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/09/24/index/</guid>
            <pubDate>Tue, 24 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This blog post is a tutorial about how to make A/B software updates with fwup]]></description>
            <content:encoded><![CDATA[<p>This blog post is a tutorial about how to make A/B software updates with fwup
tool and Yocto Project.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="objectives-and-tools">Objectives and Tools<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#objectives-and-tools" class="hash-link" aria-label="Direct link to Objectives and Tools" title="Direct link to Objectives and Tools">â€‹</a></h2>
<p>A short sentence as requirement for this tutorial is:</p>
<blockquote>
<p>I wish to make an image using Yocto Project and be able to run software
updates using A/B approach.</p>
</blockquote>
<p>There are many references on the Internet for A/B software updates. It's a
well-known approach with many different implementations. In short it's strategy
to minimize downtime when changing the firmware of embedded devices. While the
new software gets written to the unused slot and the current slot is still
running. When everything are ready to swap, the system gets restarted. Booting
using the unused slot (now it becomes the current slot).</p>
<p>So, in this blog post we are going to play with A/B software updates using fwup
tool.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-fwup-">What is fwup ?<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#what-is-fwup-" class="hash-link" aria-label="Direct link to What is fwup ?" title="Direct link to What is fwup ?">â€‹</a></h2>
<p>The best <a href="https://github.com/fwup-home/fwup" target="_blank" rel="noopener noreferrer">fwup</a> definition is from its
official project home:</p>
<blockquote>
<p>fwup is a configurable image-based software update utility for embedded
Linux-based systems. It primarily supports software upgrade strategies that
update entire root filesystem images at once. This includes strategies like
swapping back and forth between A and B partitions, recovery partitions, and
various trial update/failback scenarios. All software update information is
combined into a ZIP archive that may optionally be cryptographically signed.
fwup has minimal dependencies and runtime requirements. Scripts are
intentionally limited to make failure scenarios easier to reason about.
Distribution of software update archives is not a feature. Users can call out
to fwup to run upgrades from external media, stream them from the network, or
script them using a tool like Ansible if so desired.</p>
</blockquote>
<p>In practice, fwup is simple and easy to use.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ypoe-setup">YP/OE setup<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#ypoe-setup" class="hash-link" aria-label="Direct link to YP/OE setup" title="Direct link to YP/OE setup">â€‹</a></h2>
<p>I'll try to simplify the YP/OE setup to just tree small steps:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The YP documentation is very good. I strong recommend its reading. For this
section the release version used is
<a href="https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html" target="_blank" rel="noopener noreferrer">scarthgap</a>.</p><p>One important point is to double check the
<a href="https://docs.yoctoproject.org/ref-manual/system-requirements.html#required-packages-for-the-build-host." target="_blank" rel="noopener noreferrer">Required Packages for the Build Host</a></p></div></div>
<ol>
<li>
<p>Cloning all repositories for scarthgap release:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/openembedded/meta-openembedded.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/fwup-home/meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/meta-erlang/meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/meta-erlang/meta-axon</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-openembedded/meta-oe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-axon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-fwup</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<p>Why four layers are needed ? Because the YP/OE approach is to isolate components
into layer in order to maximize the software reusability.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-build-environment">Configuring the build environment<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#configuring-the-build-environment" class="hash-link" aria-label="Direct link to Configuring the build environment" title="Direct link to Configuring the build environment">â€‹</a></h2>
<p>For this tutorial, the quickest way is edit and add the <em>conf/local.conf</em>
configuration file.</p>
<p>We start defining the MACHINE and DISTRO:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE = "raspberrypi0-wifi"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRO = "poky"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The layer
<a href="https://meta-raspberrypi.readthedocs.io/en/latest/readme.html" target="_blank" rel="noopener noreferrer">meta-raspberry</a>
provides the machine <em>raspberrypi0-wifi</em> which is what I'm using for this
demonstration as my current development board is a raspberry pi 0.</p>
<p>Next, we need to enable some raspberry features like UART and USB host support
(it's important to get some network connectivity):</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://meta-raspberrypi.readthedocs.io/en/latest/extra-build-config.html#enable-uart</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENABLE_UART = "1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://meta-raspberrypi.readthedocs.io/en/latest/extra-build-config.html#enable-usb-host-support</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENABLE_DWC2_PERIPHERAL = "1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># add some package to allow networking</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append = " raspi2go kernel-module-libcomposite kernel-module-g-ether kernel-module-dwc2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As YP/OE supports many types of image outputs, we want to be specific here and
pick only the <em>fwup</em> type.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># enable support for making fwup images</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_CLASSES += "image_types_fwup"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_FSTYPES = "fwup"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The fwup type is provided by the bbclass
<a href="https://github.com/fwup-home/meta-fwup/blob/master/classes/image_types_fwup.bbclass" target="_blank" rel="noopener noreferrer">image_types_fwup.bbclass</a>.
It relies on wic image generator and uses their build artifacts for bootloader
and rootfs.</p>
<p>Ok, now we also want to include Erlang/OTP and Elixir. As meta-erlang provides
many versions, I recommend to stick with a specific one. In our case the latest
1.17.x and 27.0.x are good:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># select specific elixir and erlang versions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_elixir = "1.17%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_elixir-native = "1.17%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_nativesdk-elixir = "1.17%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_erlang = "27.0%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_erlang-native = "27.0%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_nativesdk-erlang = "27.0%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Finally, add erlang and elixir to the image:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># add erlang and elixir into image</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append = " erlang elixir"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now that the configuration is over. Let's start a build:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake core-image-full-cmdline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>It might take some time for the first build. As YP/OE will build everything from
scratch. The next builds should be faster.</p></div></div>
<p>Once the build has finished, let's inspect the build outputs:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd tmp/deploy/images/raspberrypi0-wifi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ls -l core-image-full-cmdline*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 2 builder builder 68465478 Sep 24 21:19 core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx 2 builder builder       66 Sep 24 21:19 core-image-full-cmdline-raspberrypi0-wifi.rootfs.fw -&gt; core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The folder <em>tmp/deploy/images/raspberrypi0-wifi</em> has many files generated from
the build tasks. We are interested only the final .fw file. In this case we the
file <em>core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw</em> is
what we need.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="deploying-fw-images">Deploying .fw images<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#deploying-fw-images" class="hash-link" aria-label="Direct link to Deploying .fw images" title="Direct link to Deploying .fw images">â€‹</a></h2>
<p>Before deploying, let's understand a bit the image partition layout created by
YP/OE and fwup tool:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | MBR                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | Firmware configuration data|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | (formatted as uboot env)   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p0*: Boot A (FAT32)        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | zImage, bootcode.bin,      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | config.txt, etc.           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p0*: Boot B (FAT32)        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p1*: Rootfs A (ext4)       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p1*: Rootfs B (ext4)       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p2: Application (ext4)     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There is a total of three partitions. Where partition p0 and p1 have been
divided by half each one. It's not clear to get this idea. So, I recommend you
to take a look into fwup configuration file used by this tutorial,
<a href="https://github.com/meta-erlang/meta-axon/blob/master/fwup/core-image-full-cmdline.raspberrypi0-wifi.fwup" target="_blank" rel="noopener noreferrer">core-image-full-cmdline.raspberrypi0-wifi.fwup</a>.
That file has been adapted from the original
<a href="https://github.com/nerves-project/nerves_system_rpi0/blob/main/fwup.conf" target="_blank" rel="noopener noreferrer">nerves_system_rpi0 fwup configuration</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="burn-a-complete-image">burn a complete image<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#burn-a-complete-image" class="hash-link" aria-label="Direct link to burn a complete image" title="Direct link to burn a complete image">â€‹</a></h3>
<p>My target sdcard has 16GB there is enough space for the core-image-full-cmdline
image. To start using it we need write a <em>complete</em> image to the sdcard. By
complete image also means the the partition A will be used when the board gets
booted.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ sudo fwup -a -d /dev/sda -t complete -i core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100% [====================================] 68.46 MB in / 382.20 MB out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Elapsed time: 55.932 s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When I inserted the sdcard into my workstation, my host Linux recognized it as
<em>/dev/sda</em> device, using sudo when calling fwup took almost 56 seconds to write
382 MB to the sdcard.</p>
<p>That is all we need to get the sdcard and boot it into raspberry board.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The next output is just the partition layout for a real board booted from the
sdcard.</p></div></div>
<p>And in fact, it works as expected:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# sfdisk -l /dev/mmcblk0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disk /dev/mmcblk0: 14.84 GiB, 15931539456 bytes, 31116288 sectors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Units: sectors of 1 * 512 = 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sector size (logical/physical): 512 bytes / 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disklabel type: dos</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disk identifier: 0x00000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Device         Boot   Start      End  Sectors  Size Id Type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/mmcblk0p1 *         63   266302   266240  130M  c W95 FAT32 (LBA)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/mmcblk0p2       532543  1011774   479232  234M 83 Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/mmcblk0p3      1491007 31116287 29625281 14.1G 83 Linux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Checking erl and iex versions:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Eshell V15.0.1 (press Ctrl+G to abort, type help(). for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User switch command (type h for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --&gt; q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# iex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Interactive Elixir (1.17.1) - press Ctrl+C to exit (type h() ENTER for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">iex(1)&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="move-to-b-partition">move to B partition<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#move-to-b-partition" class="hash-link" aria-label="Direct link to move to B partition" title="Direct link to move to B partition">â€‹</a></h3>
<p>Still using the image
core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw, I want to
test the B upgrade path. For that, the easiest way is to call fwup (which has
been installed into the image) passing some usual flags for this
<a href="https://github.com/fwup-home/fwup?tab=readme-ov-file#whats-something-cool-that-you-can-do-with-fwup" target="_blank" rel="noopener noreferrer">kind of operation</a>:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The instructions for setting board's network stack using USB is not part of the
scope of this tutorial.</p></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw | ssh root@192.168.7.7 'fwup -v -a -U -d /dev/mmcblk0 -t upgrade.b'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-partition-offset(1, 532543) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, a.nerves_fw_platform) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, a.nerves_fw_architecture) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: Upgrading partition B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100% [====================================] 68.46 MB in / 381.82 MB out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Elapsed time: 1 min 30 s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The important argument is the <code>-t upgrade.b</code> telling to fwup which partition
will be upgraded.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In my setup I called <code>reboot</code> to get raspberry rebooted.</p></div></div>
<p>Checking erl and iex versions:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Eshell V15.0.1 (press Ctrl+G to abort, type help(). for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User switch command (type h for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --&gt; q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# iex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Interactive Elixir (1.17.1) - press Ctrl+C to exit (type h() ENTER for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">iex(1)&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The versions are still 1.17.x and 27.0.x, as expected.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="move-from-b-to-a-partition">move from B to A partition<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#move-from-b-to-a-partition" class="hash-link" aria-label="Direct link to move from B to A partition" title="Direct link to move from B to A partition">â€‹</a></h3>
<p>For testing purposes, let's change the Elixir preferred version from 1.17.x to
1.16.x. For that, edit the local.conf file and change the
<code>PREFERRED_VERSION_elixir*</code> variables:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># select specific elixir and erlang versions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_elixir = "1.16%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_elixir-native = "1.16%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_nativesdk-elixir = "1.16%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Running the build again:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake core-image-full-cmdline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The result will be a new core-image-full-cmdline-raspberrypi0-wifi.rootfs-*.fw
filename which is ready to be used:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240920190231.fw | ssh root@192.168.7.7 'fwup -v -a -U -d /dev/mmcblk0 -t upgrade.a'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-partition-offset(1, 1011775) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, b.nerves_fw_platform) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, b.nerves_fw_architecture) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: Upgrading partition A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100% [====================================] 68.46 MB in / 381.82 MB out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Elapsed time: 1 min 30 s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Rebooting the board and checking the iex version, we get:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Eshell V15.0.1 (press Ctrl+G to abort, type help(). for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User switch command (type h for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --&gt; q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# iex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Interactive Elixir (1.16.3) - press Ctrl+C to exit (type h() ENTER for help)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That works! Erlang/OTP 27 and Elixir 1.16.3.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusions">Conclusions<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#conclusions" class="hash-link" aria-label="Direct link to Conclusions" title="Direct link to Conclusions">â€‹</a></h2>
<p>The <a href="https://github.com/fwup-home/fwup" target="_blank" rel="noopener noreferrer">fwup</a> tool has shown as a feasibly
approach for image A/B software upgrades. It is integrated into YP/OE ecosystem
through <a href="https://github.com/fwup-home/meta-fwup" target="_blank" rel="noopener noreferrer">meta-fwup</a> layer and ready to
try.</p>
<p>fwup is also used by Nerves Project together with others Elixir components in
order to provide a full
<a href="https://en.wikipedia.org/wiki/Over-the-air_update" target="_blank" rel="noopener noreferrer">OTA updates</a>.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>fwup</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 27.0]]></title>
            <link>https://meta-erlang.github.io/blog/2024/05/31/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/05/31/index/</guid>
            <pubDate>Fri, 31 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>scarthgap</td><td>25.3.2.12, 26.2.5, 27.0</td></tr><tr><td>master</td><td>25.3.2.12, 26.2.5, 27.0</td></tr></tbody></table>
<p>And the following Elixir releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Elixir version</th></tr></thead><tbody><tr><td>scarthgap</td><td>1.13.4, 1.14.4, 1.15.7, 1.16.3</td></tr><tr><td>master</td><td>1.13.4, 1.14.4, 1.15.7, 1.16.3</td></tr></tbody></table>
<p>I was planing to also add Erlang/OTP 27.0 to LTS kirkstone release. However it
is not feasible as Erlang/OTP 27 uses autoconf 2.72 and kirkstone uses 2.71.
Thus, there is an incompatible related to build system.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[livebook server]]></title>
            <link>https://meta-erlang.github.io/blog/2024/04/28/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/04/28/index/</guid>
            <pubDate>Sun, 28 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://meta-erlang.github.io/blog/2024/04/28/index/#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">â€‹</a></h2>
<p>From <a href="https://livebook.dev/" target="_blank" rel="noopener noreferrer">livebook.dev</a> website:</p>
<blockquote>
<p>Automate code &amp; data workflows with interactive notebooks.</p>
</blockquote>
<p>Livebook is getting famous for modern notebooks. It helps a lot for several
tasks and to solve issues where documentation and code have to walk together.</p>
<p>Live book has been added to the standard beamtools SDK. That is very handy
because one can start livebook quickly and it will work with all SDK tools. That
means, we don't need to install anything else. It's all integrated.</p>
<p>If one more tool is needed, it's just a matter of including it into SDK and it
will be ready to use.</p>
<p>The following section is a step by step in order to install livebook in any
modern Linux server.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="livebook-as-a-linux-systemd-service">livebook as a Linux systemd service<a href="https://meta-erlang.github.io/blog/2024/04/28/index/#livebook-as-a-linux-systemd-service" class="hash-link" aria-label="Direct link to livebook as a Linux systemd service" title="Direct link to livebook as a Linux systemd service">â€‹</a></h3>
<p>All commands as sudo:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wget -O /tmp/x86_64-beamtools-nativesdk-standalone-5.0.2-erlang-27.0-elixir-1.17.1.sh https://github.com/meta-erlang/meta-erlang/releases/download/beamtools-0.9.1/x86_64-beamtools-nativesdk-standalone-5.0.2-erlang-27.0-elixir-1.17.1.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chmod +x /tmp/x86_64-beamtools-nativesdk-standalone-5.0.2-erlang-27.0-elixir-1.17.1.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">adduser --group livebook livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdir /home/livebook/sdk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/tmp/x86_64-beamtools-nativesdk-standalone-5.0.2-erlang-27.0-elixir-1.17.1.sh -y -d /home/livebook/sdk/5.0.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chown -R livebook:livebook /home/livebook/sdk/5.0.2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Create a file at /etc/livebook/livebook.conf with permission livebook<!-- -->:livebook<!-- -->
and the following configuration:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_DEFAULT_RUNTIME=standalone</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_IP=0.0.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_PORT=8080</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_PASSWORD=livebook-instance</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_HOME=/home/livebook</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Create a systemd service file at /lib/systemd/system/livebook.service with the
following:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[Unit]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Description=Livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[Service]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type=simple</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User=livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Group=livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Environment=SHELL=/bin/sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Environment=HOME=/home/livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EnvironmentFile=/etc/livebook/livebook.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WorkingDirectory=/home/livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ExecStart=/home/livebook/livebook.sh start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ExecStop=/home/livebook/livebook.sh stop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Restart=on-failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[Install]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WantedBy=multi-user.target</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Create a file /home/livebook/livebook.sh, change permission to
livebook<!-- -->:livebook<!-- -->.</p>
<p>With the following contents:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Load SDK environment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source /home/livebook/sdk/5.0.2/environment-setup-x86_64-pokysdk-linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Start/Stop livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">livebook $@</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In order to start and stop livebook, it's all about systemctl commands:</p>
<ul>
<li>start: <code>systemctl start livebook</code></li>
<li>stop: <code>systemctl stop livebook</code></li>
<li>check status: <code>systemctl status livebook</code></li>
</ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>livebook</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.17, 25.3.2.12, 26.2.5, 27.0-rc3]]></title>
            <link>https://meta-erlang.github.io/blog/2024/04/21/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/04/21/index/</guid>
            <pubDate>Sun, 21 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>kirkstone</td><td>24.3.4.17, 25.3.2.12, 26.2.5</td></tr><tr><td>master</td><td>25.3.2.12, 26.2.5, 27.0-rc3</td></tr></tbody></table>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.16, 25.3.2.10, 26.2.3]]></title>
            <link>https://meta-erlang.github.io/blog/2024/03/17/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/03/17/index/</guid>
            <pubDate>Sun, 17 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.16</td></tr><tr><td>kirkstone</td><td>24.3.4.16, 25.3.2.10, 26.2.3</td></tr><tr><td>master</td><td>25.3.2.10, 26.2.3</td></tr></tbody></table>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.15, 25.3.2.8, 26.2.1]]></title>
            <link>https://meta-erlang.github.io/blog/2023/12/25/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/12/25/index/</guid>
            <pubDate>Mon, 25 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.15</td></tr><tr><td>kirkstone</td><td>24.3.4.15, 25.3.2.8, 26.2.1</td></tr><tr><td>master</td><td>25.3.2.8, 26.2.1</td></tr></tbody></table>
<p>In additional to those new versions, now it's possible to read Erlang/OTP
documentation in Erlang shell. The docs .chunk files get generated during build
time and one could easily install it by adding the package <em>erlang-modules-dev</em>.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[meta-erlang meets atomvm]]></title>
            <link>https://meta-erlang.github.io/blog/2023/11/02/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/11/02/index/</guid>
            <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">â€‹</a></h2>
<p>From <a href="https://www.atomvm.net/" target="_blank" rel="noopener noreferrer">atomvm.net</a> website, atomvm is:</p>
<blockquote>
<p>AtomVM is a lightweight implementation of the the Bogdan Erlang Abstract
Machine (aka, the BEAM), a virtual machine that can execute byte-code
instructions compiled from Erlang or Elixir source code. AtomVM supports a
limited but functional subset of the BEAM opcodes, and also includes a small
subset of the Erlang/OTP standard libraries, all optimized to run on tiny
micro-controllers. With AtomVM, you can write your IoT applications in a
functional programming language, using a modern actor-based concurrency model,
making them vastly easier to write and understand!</p>
</blockquote>
<p>One of the atomvm goals is the possibility to run BEAM code on really small
systems like MCUs.</p>
<p>For a while, I was wondering what could be the benefits of integrating atomvm
into meta-erlang recipes. It didn't look to make any sense for me. Then, I
started playing with that just to see if I was able to run an atomvm program in
Qemu emulation.</p>
<p>Suddenly, I ended up with all pieces to run atomvm programs integrated with
meta-erlang. So this post is about how it is possible to use atomvm in Linux
images based on YP/OE.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="atomvm-recipe">atomvm recipe<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#atomvm-recipe" class="hash-link" aria-label="Direct link to atomvm recipe" title="Direct link to atomvm recipe">â€‹</a></h3>
<p>The
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/atomvm_0.6.0-alpha1.bb" target="_blank" rel="noopener noreferrer">atomvm.bb</a>
recipe is very simple because the atomvm project is based on CMake and YP has
support to it.</p>
<p>However, I had to make a specific recipe to isolate the tool packbeam. The
packbeam tool lives inside atomvm source code I've created a recipe called
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/packbeam_0.6.0-alpha1.bb" target="_blank" rel="noopener noreferrer">packbeam.bb</a>
which compiles packbeam as native (that is runs on build host machine). That was
necessary because the atomvm recipe crosscompile the atomvm and packbeam is used
by CMake to pack all .beam files to create .avm files.</p>
<p>To make atomvm recipe works, I applied a patch
(<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/files/0001-Remove-PackBEAM-dependency-rules.patch" target="_blank" rel="noopener noreferrer">0001-Remove-PackBEAM-dependency-rules.patch</a>)
to disable the packbeam dependency internally. That allows me to use my packbeam
tool from sysroot-native instead.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The mentioned patch works for my needs but is not target for sending a PR to
atomvm project.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="atomvm-examples">atomvm examples<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#atomvm-examples" class="hash-link" aria-label="Direct link to atomvm examples" title="Direct link to atomvm examples">â€‹</a></h3>
<p>There is the <a href="https://github.com/atomvm/atomvm_examples" target="_blank" rel="noopener noreferrer">atomvm_examples</a>
project that provides great source of ideas and examples. I wish to create some
recipes to build and pack each example. So I started with the
<a href="https://github.com/atomvm/atomvm_examples/tree/master/erlang/system_info" target="_blank" rel="noopener noreferrer">system_info</a>.</p>
<p>The following code is the
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-examples/atomvm-examples/atomvm-examples-system-info_0.1.0.bb" target="_blank" rel="noopener noreferrer">atomvm-examples-system-info_0.1.0.bb</a>
recipe. And should be enough for any Erlang project build which uses
<a href="https://github.com/atomvm/atomvm_rebar3_plugin" target="_blank" rel="noopener noreferrer">atomvm_rebar3_plugin</a>.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SUMMARY = "Collects and displays various information about AtomVM and the environment in which it is running."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SECTION = "examples"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LICENSE = "Apache-2.0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIC_FILES_CHKSUM = "file://LICENSE;md5=745e8b23501916820b8a509f8e3ba3d4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ATOMVM_EXAMPLE = "erlang/system_info"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">S = "${WORKDIR}/system_info"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCREV = "8e54aaf475a74b59a20f914e575202b1810a7954"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PV = "0.1.0+git${SRCPV}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRC_URI = "git://github.com/atomvm/atomvm_examples;branch=master;subpath=${ATOMVM_EXAMPLE};protocol=https"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">inherit atomvm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>inherit atomvm</code> inherits the
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/classes/atomvm.bbclass" target="_blank" rel="noopener noreferrer">atomvm.bbclass</a>
which implements rebar3 commands to compile and create avm files.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="build-and-run-session">Build and run session<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#build-and-run-session" class="hash-link" aria-label="Direct link to Build and run session" title="Direct link to Build and run session">â€‹</a></h3>
<p>To build the atomvm-examples-system-info recipe, we call bitbake like that:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake atomvm-examples-system-info</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, we want to run system_info application inside Qemu. The first step is to
install the atomvm-examples-system-info in the final image.</p>
<p>In <em>conf/local.conf</em> file add the recipe name to the IMAGE_INSTALL variable:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append:pn-core-image-minimal = " atomvm-examples-system-info"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When building the core-image-minimal image and running it with Qemu:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu core-image-minimal slirp nographic serialstdio</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Inside the Qemu, let's run our first atomvm program:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# uname -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Linux qemux86-64 6.5.7-yocto-standard #1 SMP PREEMPT_DYNAMIC Thu Oct 19 14:51:09 UTC 2023 x86_64 GNU/Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# atomvm /usr/share/atomvm-examples-system-info/system_info.avm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Unsupported line_ref tag: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SystemInfo:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">===========</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">atom_count: 162</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port_count: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">process_count: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">system_architecture: &lt;&lt;"Linux--x86_64"&gt;&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">word_size: 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PlatformInfo:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ProcessInfo:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Pid: &lt;0.1.0&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">heap_size: 51</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">memory: 848</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message_queue_len: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stack_size: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Return value: ok</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That works as expected.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-outcomes-and-questions">Integration outcomes and questions<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#integration-outcomes-and-questions" class="hash-link" aria-label="Direct link to Integration outcomes and questions" title="Direct link to Integration outcomes and questions">â€‹</a></h3>
<p>The recipes created so far covers running atomvm for generic unix (Linux in my
case). Well, if you can afford running Erlang/Elixir on Linux, then there is no
selling point to use atomvm. That is true if we look at the current state of
atomvm project for generic unix platform.</p>
<p>Maybe in the future we can see extensions to generic unix allowing it to talk
with i2c, gpio, spi on Linux for example, then atomvm and meta-erlang starts to
cover a lot of possibilities. Projects like
<a href="https://github.com/eclipse/mraa" target="_blank" rel="noopener noreferrer">Eclipse Mraa</a> could be integrated with atomvm
providing all the low level access for low speed IO.</p>
<p>There is another idea for meta-erlang and atomvm which is the heterogeneous
system with a combination of:</p>
<ul>
<li>Linux based images running on the "application processing unit" (CPU)</li>
<li>and "real-time processing unit" (MCU) running an atomvm program.</li>
</ul>
<p>meta-erlang could build atomvm images for MCU as well for CPU. The seeds for
this integration was described in this talk
<a href="https://www.youtube.com/watch?v=mFgiIXv7b5U" target="_blank" rel="noopener noreferrer">One Build to Rule Them All: Building FreeRTOS &amp; Linux Using Yocto - Alejandro Hernandez</a>
(the pdf is
<a href="https://elinux.org/images/9/9f/ELC_Europe_2019_Presentation_AlejandroHernandez_FreeRTOS_ToUpload.pdf" target="_blank" rel="noopener noreferrer">here</a>).
In that talk Alejandro shows how YP/OE projects can build MCU target images.
Using the same principles also works for meta-erlang.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>atomvm</category>
        </item>
        <item>
            <title><![CDATA[Exploring x32 psABI for Erlang/OTP]]></title>
            <link>https://meta-erlang.github.io/blog/2023/09/02/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/09/02/index/</guid>
            <pubDate>Sat, 02 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://meta-erlang.github.io/blog/2023/09/02/index/#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">â€‹</a></h2>
<p>According to <a href="https://en.wikipedia.org/wiki/X32_ABI" target="_blank" rel="noopener noreferrer">Wikipedia X32 ABI</a> page:</p>
<blockquote>
<p>The x32 ABI is an application binary interface (ABI) and one of the interfaces
of the Linux kernel. The x32 ABI provides 32-bit integers, long and pointers
(ILP32) on Intel and AMD 64-bit hardware. The ABI allows programs to take
advantage of the benefits of x86-64 instruction set (larger number of CPU
registers, better floating-point performance, faster position-independent
code, shared libraries, function parameters passed via registers, faster
syscall instruction) while using 32-bit pointers and thus avoiding the
overhead of 64-bit pointers.</p>
</blockquote>
<p>So, I'm wondering if it would be possible to enable x32 support in Erlang/OTP
build. That way, I could make a Yocto image for x32 that runs on x86-64
machines.</p>
<p>Here is some references about the subject:</p>
<ul>
<li><a href="https://docs.yoctoproject.org/dev-manual/x32-psabi.html" target="_blank" rel="noopener noreferrer">Yocto, Using x32 psABI</a></li>
<li><a href="https://sites.google.com/site/x32abi/home?authuser=0" target="_blank" rel="noopener noreferrer">x32-abi</a></li>
<li><a href="http://linuxplumbersconf.org/2011/ocw//system/presentations/531/original/x32-LPC-2011-0906.pptx" target="_blank" rel="noopener noreferrer">X32 â€“ A Native 32bit ABI For X86-64</a></li>
<li><a href="https://wiki.debian.org/X32Port" target="_blank" rel="noopener noreferrer">Debian x32 port</a></li>
<li><a href="https://raw.githubusercontent.com/wiki/hjl-tools/x86-psABI/x86-64-psABI-1.0.pdf" target="_blank" rel="noopener noreferrer">System V Application Binary Interface AMD64 Architecture Processor Supplement (With LP64 and ILP32 Programming Models</a></li>
</ul>
<p>In fact, x32 seems to be around since 2011/2012 and has been integrated in many
platforms. Like Ubuntu, Debian, Gentoo.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-erlangotp-using-x32-toolchain">Building Erlang/OTP using x32 toolchain<a href="https://meta-erlang.github.io/blog/2023/09/02/index/#building-erlangotp-using-x32-toolchain" class="hash-link" aria-label="Direct link to Building Erlang/OTP using x32 toolchain" title="Direct link to Building Erlang/OTP using x32 toolchain">â€‹</a></h2>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>A toolchain with x32 support is necessary. However, it's not easy to find one.
Instead projects like <a href="https://crosstool-ng.github.io/" target="_blank" rel="noopener noreferrer">crosstool-NG</a> and
<a href="https://www.yoctoproject.org/" target="_blank" rel="noopener noreferrer">Yocto Project</a> have tools to make a toolchain
with x32 support enabled.</p></div></div>
<p>In order to follow this experiment, you can download a specific toolchain with
x32 enabled here:
<a href="https://github.com/meta-erlang/meta-erlang.github.io/releases/tag/x32-toolchain" target="_blank" rel="noopener noreferrer">poky-glibc-x86_64-core-image-minimal-x86_64_x32-qemux86-64-toolchain-4.2.sh</a>.</p>
<p>It will be necessary to install it in a temporary folder like the steps below:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">chmod +x poky-glibc-x86_64-core-image-minimal-x86_64_x32-qemux86-64-toolchain-4.2.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">poky-glibc-x86_64-core-image-minimal-x86_64_x32-qemux86-64-toolchain-4.2.sh -y -d /tmp/poky/4.2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Following the Erlang/OTP
<a href="https://github.com/erlang/otp/blob/master/HOWTO/INSTALL-CROSS.md" target="_blank" rel="noopener noreferrer">INSTALL-CROSS.md</a>
document, we first need to build a Bootstrap System:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd $ERL_TOP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./configure --enable-bootstrap-only</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, we have to source the toolchain environment configurations:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">. /tmp/poky/4.2/environment-setup-x86_64_x32-poky-linux-gnux32</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After sourcering the environment variable, the shell gets configured with some
extra variables using during the build:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">x86_64-poky-linux-gnux32-gcc -mx32 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> -fstack-protector-strong \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --sysroot=/tmp/poky/4.2/sysroots/x86_64_x32-poky-linux-gnux32</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It's important to not the GCC flag
<a href="https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html#index-mx32" target="_blank" rel="noopener noreferrer">-mx32</a>:</p>
<blockquote>
<p>The -mx32 option sets int, long, and pointer types to 32 bits, and generates
code for the x86-64 architecture.</p>
</blockquote>
<p>Finally, start the second part of Erlang/OTP build, which is the Cross Build:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./configure  $CONFIGURE_FLAGS  --disable-silent-rules --disable-dependency-tracking \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	--with-ssl-rpath=no --disable-static  --without-javac --without-dynamic-trace --without-observer --without-odbc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Installing the build output and inspecting the <code>erlexec</code> binary to see what it
looks like:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">make install DESTDIR=/tmp/e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">file /tmp/e/usr/local/lib/erlang/erts-14.0.2/bin/erlexec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">erlexec: ELF 32-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /libx32/ld-linux-x32.so.2, BuildID[sha1]=013e32ef8c57686a59a812ca452f09d677ff8e37, for GNU/Linux 5.15.0, with debug_info, not stripped</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well, the build is correct. But I couldn't test this build in my machine.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="enabling-erlang-for-yocto">Enabling Erlang for Yocto<a href="https://meta-erlang.github.io/blog/2023/09/02/index/#enabling-erlang-for-yocto" class="hash-link" aria-label="Direct link to Enabling Erlang for Yocto" title="Direct link to Enabling Erlang for Yocto">â€‹</a></h2>
<p>In the previous section we just build Erlang/OTP using a toolchain with x32
support. Now, it's time to build Erlang/OTP inside the Yocto project and test
the results using qemu instance.</p>
<p>Enabling it for Yocto is simple, just adding the follow snippet in your
local.conf file:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE = "qemux86-64"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DEFAULTTUNE = "x86-64-x32"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">baselib = "${@d.getVar('BASE_LIB:tune-' + (d.getVar('DEFAULTTUNE') or 'INVALID')) or 'lib'}"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then, building erlang:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>For those that want to check all configure and compiler flags, I'm including the
links to those logs:</p><ul>
<li><a href="https://meta-erlang.github.io/assets/log.do_configure" target="_blank" rel="noopener noreferrer">Configure log output</a></li>
<li><a href="https://meta-erlang.github.io/assets/log.do_compile" target="_blank" rel="noopener noreferrer">Compile log output</a></li>
</ul></div></div>
<p>The build failed in one point related to ASM code in
<a href="https://github.com/erlang/otp/blob/maint-26/erts/lib_src/pthread/ethread.c#L193" target="_blank" rel="noopener noreferrer">erts/lib_src/pthread/ethread.c</a>.
Looks like an ASM incompatibility issue. In order to address it here is
<a href="https://github.com/joaohf/otp/commit/6cd15d5888a536af97f5d8e26b2db2e379fa7eab" target="_blank" rel="noopener noreferrer">a patch</a>
that just adds one more compiler check to pick up the correct ifdef branch.</p>
<p>Afer that, the build runs as expected. And testing it using QEMU shows exactly
what I had in mind:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu core-image-minimal-qemux86-64.ext4 slirp nographic serialstdio</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>check the current kernel</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# uname -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Linux qemux86-64 6.1.32-yocto-standard #1 SMP PREEMPT_DYNAMIC Mon Jun  5 13:43:33 UTC 2023 x86_64 GNU/Linux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>check /proc/cpuinfo to see the 'lm' (long mode)</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# grep -o -w 'lm' /proc/cpuinfo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>check Erlang shell</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 26 [erts-14.0.2] [source] [32-bit] [smp:4:4] [ds:4:4:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Eshell V14.0.2 (press Ctrl+G to abort, type help(). for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1&gt; application:ensure_all_started(crypto).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{ok,[crypto]}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well, looks like we are running Erlang/OTP 32-bits in a x86_64 machine. Also, it
was able to correct load the crypto (with ssl libraries compiled for x32 too).
By the way, there is a second
<a href="https://github.com/joaohf/otp/commit/e63b5b703ffa0005bf6a8f4d3bcec18f786bda92" target="_blank" rel="noopener noreferrer">patch need to proper compile the crypto application</a>.</p>
<p>Some raised questions for further investigations:</p>
<ul>
<li>What tests are necessary to prove that the x32 Erlang build is safe ?</li>
<li>Are there any other code change in order to fit the x32 build ?</li>
<li>Would <a href="https://www.erlang.org/doc/apps/erts/beamasm#faq" target="_blank" rel="noopener noreferrer">BeamAsm</a> be available
for x32 ?</li>
</ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>x32</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.13, 25.3.2.3, 26.0.2]]></title>
            <link>https://meta-erlang.github.io/blog/2023/07/01/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/07/01/index/</guid>
            <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.13</td></tr><tr><td>kirkstone</td><td>24.3.4.13, 25.3.2.3, 26.0.2</td></tr><tr><td>mickledore</td><td>25.3.2.3, 26.0.2</td></tr></tbody></table>
<p>In additional to those new versions, a new
<a href="https://meta-erlang.github.io/docs/guides/guides-beamtools/" target="_blank" rel="noopener noreferrer">beamtools</a> is
available
<a href="https://github.com/meta-erlang/meta-erlang/releases/tag/beamtools-0.7.0" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>This new version was made with
<a href="https://docs.yoctoproject.org/dev/migration-guides/migration-4.2.html" target="_blank" rel="noopener noreferrer">Yocto mickledore</a>
release and brings Erlang/OTP 26.0.2 and Elixir 1.15.2.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New meta-erlang branch mickledore]]></title>
            <link>https://meta-erlang.github.io/blog/2023/06/09/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/06/09/index/</guid>
            <pubDate>Fri, 09 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Yocto Project has released a new]]></description>
            <content:encoded><![CDATA[<p>Yocto Project has <a href="https://wiki.yoctoproject.org/wiki/Releases" target="_blank" rel="noopener noreferrer">released</a> a new
<a href="https://docs.yoctoproject.org/dev/migration-guides/migration-4.2.html" target="_blank" rel="noopener noreferrer">version 4.2 (Mickledore)</a>.
As consequence meta-erlang brings a new branch mickledore updating most of the
recipes. mickledore release is not a LTS release and community support will be
available until November 2023.</p>
<p>We've also upgraded to the latest Erlang/OTP and Elixir releases supporting the
following new Erlang/OTP releases:</p>
<ul>
<li>Erlang/OTP 26.0.1</li>
<li>Erlang/OTP 25.3.2.2</li>
<li>Elixir 1.14.4</li>
</ul>
<p>It's worth mentioning the meta-erlang master has also been updated.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.11, 25.3.2 and recipe updates]]></title>
            <link>https://meta-erlang.github.io/blog/2023/05/07/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/05/07/index/</guid>
            <pubDate>Sun, 07 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.11</td></tr><tr><td>kirkstone</td><td>24.3.4.11, 25.3.2</td></tr><tr><td>langdale</td><td>25.3.2</td></tr></tbody></table>
<p>Removed recipes:</p>
<ul>
<li>For langdale the recipes ejabberd and emqx have been removed due the lack of
supporting cross-compilation build in a stable way.</li>
</ul>
<p>Updated recipes:</p>
<ul>
<li>For langdale the following recipes have been updated: lux, vernemq, yaws,
tsung, riak, couchdb. It is important to mention about langdale
<a href="https://wiki.yoctoproject.org/wiki/Releases" target="_blank" rel="noopener noreferrer">EOL in May 2023</a>. So, this
branch will not receive updates.</li>
</ul>
<p>It has been decided:</p>
<ul>
<li>Dropped support to Erlang/OTP 24 in langdale. Due the lack of deterministic
build flags in 24. Elixir 1.12 has also been dropped (because it dependes on
Erlang/OTP 24).</li>
</ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[meta-erlang on cloud II: building your own application]]></title>
            <link>https://meta-erlang.github.io/blog/2023/02/04/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/02/04/index/</guid>
            <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<!---]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://meta-erlang.github.io/blog/2023/02/04/index/#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">â€‹</a></h2>
<p>The
<a href="https://meta-erlang.github.io/blog/2023/02/04/index/">meta-erlang on cloud II, build your own application</a>
post has shown the basic idea for how would be possible (and in fact it is
possible) to build a custom Linux distribution and run it on Graviton AWS
instances.</p>
<p>Now, it's time to refactor out the previous result. Removing what are not
necessary in order to create a slim meta-erlang cloud ready image.</p>
<p>So, this post is more like a tutorial to reach two main targets:</p>
<ul>
<li>Explore a demo Yocto layer which shows the basic pieces to run a distro on
Graviton</li>
<li>Add <a href="https://livebook.dev/" target="_blank" rel="noopener noreferrer">livebook</a> to that image and try it on cloud. Why
not trying some GPU processing :)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="meta-axon-cloud-aware">meta-axon cloud aware<a href="https://meta-erlang.github.io/blog/2023/02/04/index/#meta-axon-cloud-aware" class="hash-link" aria-label="Direct link to meta-axon cloud aware" title="Direct link to meta-axon cloud aware">â€‹</a></h2>
<p><a href="https://github.com/meta-erlang/meta-axon" target="_blank" rel="noopener noreferrer">meta-axon</a> is my playground layer
focused on demonstrate how Erlang and Elixir applications could be integrated
with Yocto ecosystem. Until now, meta-axon has been tailored to run on embedded
devices (like raspberry pi). But, I'm also added, along side with the former
<a href="https://github.com/meta-erlang/meta-axon/conf/distro/axon.conf" target="_blank" rel="noopener noreferrer">axon-slim</a>, a
new distro called
<a href="https://github.com/meta-erlang/meta-axon/conf/distro/axon.conf" target="_blank" rel="noopener noreferrer">axon</a>. The axon
distro is focused on cloud, for the purpose of this tutorial AWS cloud.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you are new to the Yocto Project; remember some basic
<a href="https://docs.yoctoproject.org/overview-manual/concepts.html#yocto-project-concepts" target="_blank" rel="noopener noreferrer">concepts here</a>.</p></div></div>
<p>I also introduced a new image called
<a href="https://github.com/meta-erlang/meta-axon/recipes-extented/image/axon-image-cloud.bb" target="_blank" rel="noopener noreferrer">axon-image-cloud</a>
with all the pieces needed to run it on Graviton instances. This image relies on
systemd plus <a href="https://cloud-init.io/" target="_blank" rel="noopener noreferrer">cloud-init</a> scripts.</p>
<p>It is important to mention that to run images on Graviton it is necessary to add
two layer dependencies:</p>
<ul>
<li><a href="https://git.yoctoproject.org/git/meta-arm" target="_blank" rel="noopener noreferrer">meta-arm</a>, implementing a generic
ARM 64 bits machine</li>
<li><a href="https://git.yoctoproject.org/git/meta-virtualization" target="_blank" rel="noopener noreferrer">meta-virtualization</a>,
bringing cloud-init recipe</li>
</ul>
<p>The rest of the needed components are all provided by standard Yocto layers
(like: poky and meta-openembedded).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-instructions">Build instructions<a href="https://meta-erlang.github.io/blog/2023/02/04/index/#build-instructions" class="hash-link" aria-label="Direct link to Build instructions" title="Direct link to Build instructions">â€‹</a></h2>
<p>We want fast feedback and test the build results quickly. So here is the
procedure that will build an distro linux image with Erlang, Elixir and
<a href="https://livebook.dev/" target="_blank" rel="noopener noreferrer">livebook</a>:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>I'm assuming a working Linux environment in order to run the below commands.</p></div></div>
<ol>
<li>
<p>Clone the meta-axon layer:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://github.com/meta-erlang/meta-axon.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd meta-axon</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Install the <a href="https://kas.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">kas</a> tool to setup a
bitbake based project.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://github.com/siemens/kas</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd kas</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pip3 install .</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Call kas tool to build everything:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kas build kas/machines/meta-erlang-graviton2-livebook.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The final image has been created in the deploy folder:
<em>tmp/deploy/images/generic-arm64</em>.</p></div></div>
</li>
<li>
<p>Run the script <em>create-ami.sh</em> to convert and upload a image made with Yocto
into AWS AMI. Use your s3 bucket and specific how much extra space you want:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">../scripts/create-ami.sh &lt;add your s3 bucket here&gt; 8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>The script <em>create_ami.sh</em> may need a fix in order to find the correct place for
the <em>qemu-img</em> tool. Would be nice to have some sort of Yocto bbclass to
automatically convert and push the AMI image to AWS. But it is not the case yet.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="launching-ec2-instances">Launching EC2 instances<a href="https://meta-erlang.github.io/blog/2023/02/04/index/#launching-ec2-instances" class="hash-link" aria-label="Direct link to Launching EC2 instances" title="Direct link to Launching EC2 instances">â€‹</a></h2>
<p>After uploading the image, it's time to lunch an EC2 instance like the
following:</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>Remember to use a <em>Free Trial available</em> instance type. When I wrote this post,
the eligible tier was the t4g.small.</p></div></div>
<p><img decoding="async" loading="lazy" alt="alt Launching a new EC2 instance" src="https://meta-erlang.github.io/assets/images/ec2_instance-45d124b067baf388b3a23847fac8ffcb.jpg" title="Launching a new EC2 instance" width="1231" height="1123" class="img_ev3q"></p>
<p>And, finally here is it running:</p>
<p><img decoding="async" loading="lazy" alt="alt Running a new EC2 instance" src="https://meta-erlang.github.io/assets/images/ec2_running-542df8ebba53c7bdbb1d569cbbc58273.jpg" title="Running a new EC2 instance" width="2106" height="1098" class="img_ev3q"></p>
<p>Accessing the instance via ssh and login with the user <em>axon</em> should work as
expected. After all it is a normal Linux distro.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="results">Results<a href="https://meta-erlang.github.io/blog/2023/02/04/index/#results" class="hash-link" aria-label="Direct link to Results" title="Direct link to Results">â€‹</a></h2>
<p>The following two screenshots show the livebook instance up and running on
Graviton EC2 instance. It is pretty cool.</p>
<p>Just showing the <code>top</code> command to check all the running process:</p>
<p><img decoding="async" loading="lazy" alt="alt Livebook instance Graviton" src="https://meta-erlang.github.io/assets/images/livebook_instance-d8d9491feeea9877f643f9815f942441.jpg" title="Livebook instance on Graviton" width="2418" height="1018" class="img_ev3q"></p>
<p>And here is the livebook system dashboard to inspect some usage statistics, and
system information:</p>
<p><img decoding="async" loading="lazy" alt="alt Livebook dashboard on Graviton" src="https://meta-erlang.github.io/assets/images/livebook_dashboard-ed3c09ff8e37c01665a4d7b70131741a.jpg" title="Livebook dashboard on Graviton" width="1307" height="821" class="img_ev3q"></p>
<p>As you can see, it is running on ARM64, with JIT enable.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://meta-erlang.github.io/blog/2023/02/04/index/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">â€‹</a></h2>
<p>Now we are converging to create the basic building blocks for creating custom
Linux distribution based on Yocto Project that runs on Cloud.</p>
<p>That could be the perfect case for projects that need to take control on every
detail of the software stack. From linx kernel configuration, building flags,
software configuration flags, anything. It's really flexible.</p>
<p>And for projects that relies on Erlang and Elixir, it is also amazing bringing
it to Cloud ecosystem.</p>
<p>The first blog part
<a href="https://meta-erlang.github.io/blog/2023/01/29/index/">meta-erlang on cloud I: EWAOL based</a> has introduced
what is possible to build. This blog post is more related to explore the
introduced idea into something feasible and aligned with meta-erlang purposes.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>cloud</category>
        </item>
        <item>
            <title><![CDATA[meta-erlang on cloud I: EWAOL based]]></title>
            <link>https://meta-erlang.github.io/blog/2023/01/29/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/01/29/index/</guid>
            <pubDate>Sun, 29 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<!---]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://meta-erlang.github.io/blog/2023/01/29/index/#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">â€‹</a></h2>
<p>The <a href="https://www.yoctoproject.org/" target="_blank" rel="noopener noreferrer">Yocto Project</a> has been made to create
specific embedded Linux distributions. And still does a great job on this field
making it possible to run softwares in a range of target architectures.</p>
<p>But, the term <em>embedded Linux distribution</em> should be expanded a bit more; it's
not only about creating tiny filesystem within cross-compiled software, scripts
and configurations targeting platforms with small footprint, CPU and memory
constraints.</p>
<p>We could do more, actually there are people using the not so newly but still new
ARM processors that runs on cloud environment. For sure the most famous one is
the
<a href="https://aws.amazon.com/ec2/graviton/" target="_blank" rel="noopener noreferrer">Graviton EC2 instances, on AWS cloud</a>.</p>
<p>Looking into these Graviton processors and Yocto Project, what would it be
possible ? Maybe running Yocto images on Graviton instances could be feasible
enough to run some workload. And what about adding Erlang/OTP and Elixir to that
mix ? Or running some advanced database or broker made with Erlang ?</p>
<p>That is exactly what we will try to experiment. In this first post about running
meta-erlang on cloud, we are going to look how it would be possible.</p>
<p>Actually there are folks whose made possible to run Yocto images on Graviton
instances. Technically is pretty simple and all bits and bytes have been
described in the blog post
<a href="https://aws.amazon.com/blogs/industries/building-an-automotive-embedded-linux-image-for-edge-using-arm-graviton-yocto-project-soafee/" target="_blank" rel="noopener noreferrer">Building an Automotive Embedded Linux Image for Edge and Cloud Using Arm-based Graviton Instances, Yocto Project, and SOAFEE</a>.
The companion repository also worth the reading
<a href="https://github.com/aws4embeddedlinux/meta-aws-ewaol" target="_blank" rel="noopener noreferrer">The meta-aws-ewaol repository</a>.</p>
<p>The idea that [1] brings is part of another idea related to Software-Defined
Vehicles through Cloud [2] which is very excited. These references also cites a
framework to build Edge Workloads [3] and in fact the EWAOL (Edge Workload
Abstraction and Orchestration Layer) was used as a base to produce the
<a href="https://github.com/aws4embeddedlinux/meta-aws-ewaol" target="_blank" rel="noopener noreferrer">meta-aws-ewaol</a> layer.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="putting-everything-together-first-experiment">Putting everything together, first experiment<a href="https://meta-erlang.github.io/blog/2023/01/29/index/#putting-everything-together-first-experiment" class="hash-link" aria-label="Direct link to Putting everything together, first experiment" title="Direct link to Putting everything together, first experiment">â€‹</a></h2>
<p>So, based on all what has been described so far and as a first experience, I've
tested meta-aws-ewaol setup and added meta-erlang into that. The aim was to run
<code>erl</code> and <code>iex</code> console on Graviton EC2 instances.</p>
<p>I had to make a few fixes on meta-aws-ewaol and pushed the results here:
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang" target="_blank" rel="noopener noreferrer">meta-aws-ewaol with meta-erlang</a>.
The rest of this session is a small guide that I made in order to run our first
experiment.</p>
<p>With a ready Yocto environment, following the
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#building-ewaol" target="_blank" rel="noopener noreferrer">Building EWAOL</a>
session is enough to get the system built. It's just Yocto, nothing more.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><ul>
<li>You can create a free AWS account. There are Graviton instances included in
the AWS free tier. It's more than sufficient.</li>
<li>Bear in mind that you don't need to be an AWS master but you will end up
spending some time learning how to create AWS services.</li>
</ul></div></div>
<p>The next step is to create and setup all the AWS infrastructure needed in order
to push the Yocto image as AWS AMI and start the Graviton Instance. Lucky, there
is a Cloud Formation template which performs the initial setup. The session
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#pre-requisites" target="_blank" rel="noopener noreferrer">Pre-requisites</a>
helps to clarify it.</p>
<p>Then, having the Yocto image and the basic AWS account in place. It's time to
use
<a href="https://github.com/joaohf/meta-aws-ewaol/blob/main-add-meta-erlang/scripts/create-ami.sh" target="_blank" rel="noopener noreferrer">a special script</a>
to convert Yocto image to an AMI image. Most of the job is done by awscli
commands. There is nothing related to Yocto here. The session
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#creating-ami-from-image-file" target="_blank" rel="noopener noreferrer">Creating AMI from image file</a>
tells what is necessary to do.</p>
<p>Finally, the last part. After pushing the AMI image to the S3 bucket. The fun
part is to instantiate a Graviton instance (please refer to the session
<a href="https://github.com/joaohf/meta-aws-ewaol/tree/main-add-meta-erlang#launch-the-ec2-image-as-usual-using-your-newly-created-ami" target="_blank" rel="noopener noreferrer">Launch the EC2 Image as usual using your newly created AMI</a>)
an run the EWAOL based image and test how Erlang and Elixir looks like.</p>
<p>I've added two screenshots below just to have a taste of the final results:</p>
<p><img decoding="async" loading="lazy" alt="alt Erlang console" src="https://meta-erlang.github.io/assets/images/meta-erlang-gravitron-erl-74d44c9d063c73e6a3f61183f0bfcb5e.jpg" title="Erlang console" width="1229" height="988" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="alt Elixir console" src="https://meta-erlang.github.io/assets/images/meta-erlang-gravitron-iex-96e0e9113e0029ca640a1e9d74e3eb94.jpg" title="Elixir console" width="1007" height="167" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://meta-erlang.github.io/blog/2023/01/29/index/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">â€‹</a></h2>
<p>This first experiment has finished and I can conclude two main bullets:</p>
<ul>
<li>It is possible to build a Yocto image and run it on Graviton instances</li>
<li>meta-aws-ewaol is a great start point. And the EWAOL framework looks solid for
what it has been planned for.</li>
</ul>
<p>However, what I am looking for is to run a tiny image with just the necessary to
instantiate an ARM cloud instance running Erlang/Elixir. That is what the next
blog post will do:
<a href="https://meta-erlang.github.io/blog/2023/02/04/index/">meta-erlang on cloud II, build your own application</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="https://meta-erlang.github.io/blog/2023/01/29/index/#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">â€‹</a></h2>
<ul>
<li>[1]:
<a href="https://aws.amazon.com/blogs/industries/building-an-automotive-embedded-linux-image-for-edge-using-arm-graviton-yocto-project-soafee/" target="_blank" rel="noopener noreferrer">Building an Automotive Embedded Linux Image for Edge and Cloud Using Arm-based Graviton Instances, Yocto Project, and SOAFEE</a></li>
<li>[2]:
<a href="https://armkeil.blob.core.windows.net/developer/Files/pdf/white-paper/arm-aws-edge-environmental-parity-wp.pdf" target="_blank" rel="noopener noreferrer">Accelerating Software-Defined Vehicles through Cloud-To-Vehicle Edge Environmental Parity</a></li>
<li>[3]:
<a href="https://ewaol.docs.arm.com/en/kirkstone-dev/index.html" target="_blank" rel="noopener noreferrer">Edge Workload Abstraction and Orchestration Layer (EWAOL) Documentation</a></li>
</ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>cloud</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.8, 25.1.2.1, 25.2.1]]></title>
            <link>https://meta-erlang.github.io/blog/2023/01/22/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/01/22/index/</guid>
            <pubDate>Sun, 22 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.8</td></tr><tr><td>kirkstone</td><td>24.3.4.8, 25.1.2.1, 25.2.1</td></tr><tr><td>langdale</td><td>24.3.4.8, 25.1.2.1, 25.2.1</td></tr></tbody></table>
<p>Fixed bugs:</p>
<ul>
<li><a href="https://github.com/meta-erlang/meta-erlang/issues/205" target="_blank" rel="noopener noreferrer">QA Issue buildpaths (reproducible builds) when building with langdale</a>,
a specific patch has been integrated in order to avoid building flags into the
final beam.smp binary.</li>
</ul>
<p>To be decided:</p>
<ul>
<li>Yocto Langdale release has enabled reproducible build checks. Erlang/OTP from
25 and later implements special flags to fix reproducible issues. But
Erlang/OTP 24 does not have these special flags as a consequence langdale
Erlang/OTP 24 builds warns about: <em>packages contains reference to TMPDIR
[buildpaths]</em>. There are two paths that we could get. One is to drop
Erlang/OTP 24 support OR disable QA buildpaths checking.</li>
</ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://meta-erlang.github.io/blog/welcome/</link>
            <guid>https://meta-erlang.github.io/blog/welcome/</guid>
            <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[This new website is based on Docusaurus documentation]]></description>
            <content:encoded><![CDATA[<p>This new website is based on <a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a> documentation
framework. The previous site was using <a href="https://docsify.js.org/#/" target="_blank" rel="noopener noreferrer">docsify</a>,
which is also great. But Docusaurus address others concerns when writing
documentation for open source project.</p>
<p>So, the site has a new frontend page and a blog session where we want to add
latest meta-erlang release highlights. The documentation session is pretty much
the same plus some improvements on
<a href="https://meta-erlang.github.io/docs/" target="_blank" rel="noopener noreferrer">Introduction</a> chapter.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
    </channel>
</rss>