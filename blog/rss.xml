<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>meta-erlang Blog</title>
        <link>https://meta-erlang.github.io/blog/</link>
        <description>meta-erlang Blog</description>
        <lastBuildDate>Sun, 27 Jul 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Erlang-Red, recipe introduction]]></title>
            <link>https://meta-erlang.github.io/blog/2025/07/27/index/</link>
            <guid>https://meta-erlang.github.io/blog/2025/07/27/index/</guid>
            <pubDate>Sun, 27 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Erlang-Red is an experimental Erlang]]></description>
            <content:encoded><![CDATA[<p><a href="https://github.com/gorenje/erlang-red" target="_blank" rel="noopener noreferrer">Erlang-Red</a> is an experimental Erlang
backend to replace <a href="https://nodered.org/" target="_blank" rel="noopener noreferrer">Node-RED</a>. This blog post introduces
the erlang-red recipe available in meta-erlang layer.</p>
<p>The purpose here is to get a virtual environment with Erlang-Red installed where
it is possible to start creating basic flow and explore possibilities using
Yocto and Erlang-Red.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="erlang-red">Erlang-Red<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#erlang-red" class="hash-link" aria-label="Direct link to Erlang-Red" title="Direct link to Erlang-Red">​</a></h2>
<p>According to <a href="https://github.com/gorenje/erlang-red" target="_blank" rel="noopener noreferrer">Erlang-Red</a>, it is:</p>
<blockquote>
<p>Experimental Erlang backend to replace Node-REDs existing NodeJS backend,
aiming for 100% compatible with existing flow code.</p>
<p>The goal is bring the advantages of low-code visual flow-based programming to
a programming language that is designed for message passing and concurrency
from the ground up, hence Erlang. More details described in the corresponding
blog post.</p>
</blockquote>
<p>A few months ago I was reading <a href="https://erlangforums.com/" target="_blank" rel="noopener noreferrer">Erlang Forums</a> when I
saw a thread about
<a href="https://erlangforums.com/t/erlang-red-erlang-interpreter-for-node-red-flow-code-visual-flow-based-programming/4678" target="_blank" rel="noopener noreferrer">Erlang-RED - Erlang interpreter for Node-RED flow code (visual flow based programming)</a>.
It looked so fantastic that someone was trying to implement a new backend for
Node-RED, moreover it is written in Erlang/OTP.</p>
<p>In order to get a better view of Erlang-Red philosophy and internals I recommend
reading this blog post:
<a href="https://blog.openmindmap.org/erlang-red" target="_blank" rel="noopener noreferrer">The Erlang-Red Project</a>.</p>
<p>I thought that writing an
<a href="https://layers.openembedded.org/layerindex/recipe/464852/" target="_blank" rel="noopener noreferrer">Erlang-Red Yocto recipe</a>
could be useful for anyone interested in applying flow based programming in the
context of linux embedded projects.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-erlang-red-recipe">The Erlang-Red recipe<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#the-erlang-red-recipe" class="hash-link" aria-label="Direct link to The Erlang-Red recipe" title="Direct link to The Erlang-Red recipe">​</a></h2>
<p>As everything else in OpenEmbedded / Yocto land, it is necessary a recipe in
order to get any software installed in the final image built with Yocto. Some
recipes are easy, while others are more complicated. As Erlang-Red uses rebar3
as build tool, it was easy to build, release and package it using
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/classes/rebar3.bbclass" target="_blank" rel="noopener noreferrer">rebar3.bbclass</a>.</p>
<p>A full working
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-extended/erlang-red/erlang-red_git.bb" target="_blank" rel="noopener noreferrer">erlang-red bitbake recipe</a>
is now available on meta-erlang layer. And in the rest of this blog post I will
guide you to get a basic image working.</p>
<p>I have added erlang-red recipe to meta-erlang master branch. I did not test it
using others Yocto branches. But the recipe will work in other branches with
small fixes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup-bitbake-and-yocto">Setup bitbake and Yocto<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#setup-bitbake-and-yocto" class="hash-link" aria-label="Direct link to Setup bitbake and Yocto" title="Direct link to Setup bitbake and Yocto">​</a></h2>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>This is the point where reading the
<a href="https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html" target="_blank" rel="noopener noreferrer">Yocto Project Quick Build</a>
documentation can help to understand basic principles. In this section I
extracted the commands that I used to run this use case.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="fetching-source-code">Fetching source code<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#fetching-source-code" class="hash-link" aria-label="Direct link to Fetching source code" title="Direct link to Fetching source code">​</a></h3>
<p>Cloning all repositories for master branch:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sourcing-build-environment">Sourcing build environment<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#sourcing-build-environment" class="hash-link" aria-label="Direct link to Sourcing build environment" title="Direct link to Sourcing build environment">​</a></h3>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-meta-erlang-layer">Adding meta-erlang layer<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#adding-meta-erlang-layer" class="hash-link" aria-label="Direct link to Adding meta-erlang layer" title="Direct link to Adding meta-erlang layer">​</a></h3>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-build-environment">Configuring the build environment<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#configuring-the-build-environment" class="hash-link" aria-label="Direct link to Configuring the build environment" title="Direct link to Configuring the build environment">​</a></h3>
<p>For this use case, the quickest way is to edit and add some snippets in the
configuration file: <em>conf/local.conf</em>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># select which machine we want to build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE = "qemuriscv32"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># systemd only</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INIT_MANAGER = "systemd"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># install erlang-red when creating an image</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append = " erlang-red"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># additional QEMU configuration for slirp mode, export 8080 tcp port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">QB_SLIRP_OPT = "-netdev user,id=net0,hostfwd=tcp::8080-:8080,hostfwd=tcp::2222-:22"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="build-erlang-red-recipe">Build erlang-red recipe<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#build-erlang-red-recipe" class="hash-link" aria-label="Direct link to Build erlang-red recipe" title="Direct link to Build erlang-red recipe">​</a></h3>
<p>Right, the environment is configured. Have sourced the <code>oe-init-build-env</code>, we
can build erlang-red recipe:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake erlang-red</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This bitbake command will build erlang-red and all its building dependencies.</p>
<p>But to get something useful, we need to also build an image.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-basic-image-with-erlang-red-enabled">A basic image with erlang-red enabled<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#a-basic-image-with-erlang-red-enabled" class="hash-link" aria-label="Direct link to A basic image with erlang-red enabled" title="Direct link to A basic image with erlang-red enabled">​</a></h2>
<p>Next, we need to build the final image:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake core-image-full-cmdline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Because we have added erlang-red to <code>IMAGE_INSTALL</code>, the build image process
will install erlang-red.</p>
<p>With image ready, it is time to run it.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="running-erlang-red-with-qemu-emulator">Running erlang-red with QEMU emulator<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#running-erlang-red-with-qemu-emulator" class="hash-link" aria-label="Direct link to Running erlang-red with QEMU emulator" title="Direct link to Running erlang-red with QEMU emulator">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu core-image-full-cmdline serialstdio nographic</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">....</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Poky (Yocto Project Reference Distro) 5.2.99+snapshot-bd4625cd4db0f02162092d85aeab3023914f768a qemuriscv32 ttyS0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">qemuriscv32 login: root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WARNING: Poky is a reference Yocto Project distribution that should be used for</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">testing and development purposes only. It is recommended that you create your</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">own distribution for production use.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuriscv32:~#</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I used the arguments <code>serialstdio</code>, to enable a serial console input attached to
stdio; and <code>nographic</code> to avoid starting QEMU GUI frontend.</p>
<p>In a new terminal, let's open a ssh session and start erlang-red using systemctl
command:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ssh root@192.168.7.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Last login: Fri Aug  1 18:50:29 2025 from 172.17.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WARNING: Poky is a reference Yocto Project distribution that should be used for</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">testing and development purposes only. It is recommended that you create your</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">own distribution for production use.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuriscv32:~# systemctl status erlang-red</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">● erlang-red.service - Breadboard Programming for Erlang inspired by Node-RED</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Loaded: loaded (/usr/lib/systemd/system/erlang-red.service; enabled; preset: enabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Active: active (running) since Fri 2025-08-01 18:49:45 UTC; 55s ago</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Great, erlang-red is up and running.</p>
<p>In the host, open a browser at <a href="http://192.168.7.2:8080/erlang-red" target="_blank" rel="noopener noreferrer">http://192.168.7.2:8080/erlang-red</a> to see the
erlang-red web interface.</p>
<p>Well, now it is the right time to learn about flow based programming and start
playing with erlang-red.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="erlang-red-runtime-analysis">Erlang-Red runtime analysis<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#erlang-red-runtime-analysis" class="hash-link" aria-label="Direct link to Erlang-Red runtime analysis" title="Direct link to Erlang-Red runtime analysis">​</a></h2>
<p>The Erlang-Red performance is relative as there is no much to say when emulating
using QEMU without KVM to improve performance. Some rough analises below:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-about-the-disk-footprint-">What about the disk footprint ?<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#what-about-the-disk-footprint-" class="hash-link" aria-label="Direct link to What about the disk footprint ?" title="Direct link to What about the disk footprint ?">​</a></h3>
<p>The total erlang-red footprint is about 35Mb of disk space. It includes the ERTS
(Erlang Runtime System) and all Erlang/Elixir dependencies. All files installed
on <code>/usr/lib/erlang-red</code> folder. The erlang-red package also provides systemV
and systemd start/stop scripts.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="and-about-memory-footprint-">And about memory footprint ?<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#and-about-memory-footprint-" class="hash-link" aria-label="Direct link to And about memory footprint ?" title="Direct link to And about memory footprint ?">​</a></h3>
<p>In this use case I used systemd because I want to get the memory footprint that
systemd was reporting:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuriscv32:~# systemctl status erlang-red</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">● erlang-red.service - Breadboard Programming for Erlang inspired by Node-RED</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Loaded: loaded (/usr/lib/systemd/system/erlang-red.service; enabled; preset: enabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Active: active (running) since Fri 2025-08-01 18:49:45 UTC; 55s ago</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> Invocation: 704b9bef5b384451932e15cadb7291fa</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   Main PID: 322 (beam.smp)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Tasks: 27 (limit: 4915)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Memory: 69.7M (peak: 75.4M)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        CPU: 9.751s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     CGroup: /system.slice/erlang-red.service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             ├─322 /usr/lib/erlang-red/bin/erlang_red -Bd -C multi_time_warp -- -root /usr/lib/erlang-red -bindir /usr/lib/erlang-red/erts-16.0.1/bin -progname usr/lib/erlang-red/bin/erlang_red -- -home /var/lib/erlang&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             ├─380 /usr/lib/erlang-red/erts-16.0.1/bin/epmd -daemon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             ├─435 erl_child_setup 1024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             └─458 /usr/lib/erlang-red/lib/erlexec-2.2.0/priv/x86_64-pc-linux-gnu/exec-port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Aug 01 18:49:45 qemuriscv32 systemd[1]: Started Breadboard Programming for Erlang inspired by Node-RED.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Aug 01 18:49:47 qemuriscv32 erlang_red[322]: Exec: /usr/lib/erlang-red/erts-16.0.1/bin/erlexec -noinput +Bd -boot /usr/lib/erlang-red/releases/0.2.2/start -mode embedded -boot_var SYSTEM_LIB_DIR /usr/lib/erlang-red/lib&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Aug 01 18:49:47 qemuriscv32 erlang_red[322]: Root: /usr/lib/erlang-red</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Aug 01 18:49:47 qemuriscv32 erlang_red[322]: /usr/lib/erlang-red</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Aug 01 18:49:50 qemuriscv32 erlang_red[322]: warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (which can&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lines 1-19/19 (END)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, 69.7M is the memory consumption.</p>
<p>As Erlang-Red is in it's early development stages, I believe that are open space
for code optimization for reducing memory usage and also for tuning ERTS for the
Erlang-Red use case.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-has-next-">What has next ?<a href="https://meta-erlang.github.io/blog/2025/07/27/index/#what-has-next-" class="hash-link" aria-label="Direct link to What has next ?" title="Direct link to What has next ?">​</a></h2>
<p>As a next project, I wish to install erlang-red into a Raspberry Pi platform and
control some external hardware. This is a pretty common scenario and let's see
how feasible it is with Erlang-Red.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>erlang-red</category>
        </item>
        <item>
            <title><![CDATA[autotools as build tool for Erlang/OTP projects]]></title>
            <link>https://meta-erlang.github.io/blog/2025/05/11/index/</link>
            <guid>https://meta-erlang.github.io/blog/2025/05/11/index/</guid>
            <pubDate>Sun, 11 May 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The hello-erlang-autoconf repository is an example about how to use autotools as build tool for Erlang/OTP projects. The original code came from https://github.com/sirbeancounter/hello. I just adapted it and fixed small issues for Yocto integration.]]></description>
            <content:encoded><![CDATA[<p>The <a href="https://github.com/meta-erlang/hello-world/tree/master/hello-erlang-autoconf" target="_blank" rel="noopener noreferrer">hello-erlang-autoconf</a> repository is an example about how to use autotools as build tool for Erlang/OTP projects. The original code came from <a href="https://github.com/sirbeancounter/hello" target="_blank" rel="noopener noreferrer">https://github.com/sirbeancounter/hello</a>. I just adapted it and fixed small issues for Yocto integration.</p>
<p>The result was the creating of a recipe called <a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-examples/hello-erlang-autoconf/hello-erlang-autoconf_0.1.0.bb" target="_blank" rel="noopener noreferrer">hello-erlang-autoconf</a> as an example about how to integrate autotools with erlang build. This recipe is very interesting because it inherit the class <code>autotools</code> which is a standard class from openembedded-core.</p>
<p>autotools provides support for building Erlang projects: <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.72/html_node/Erlang-Libraries.html" target="_blank" rel="noopener noreferrer">Erlang-Libraries</a> and I've found a talk
about: <a href="https://erlang.org/euc/06/proceedings/1430Lenglet.ppt" target="_blank" rel="noopener noreferrer">Using GNU Autoconf to Configure Erlang Programs</a>. It looks like using autotools is something that could save time as build tool.</p>
<p>I think the final result for the recipe <a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-examples/hello-erlang-autoconf/hello-erlang-autoconf_0.1.0.bb" target="_blank" rel="noopener noreferrer">hello-erlang-autoconf</a> was very short and easy to customize. Moreover, as autotools is pretty standard for configuring and building software package it brings solid foundations too.</p>
<p>I'm not saying that autotools is easy to learn or it is the best tool. But something to consider.</p>
<p>After building the recipe <code>bitbake hello-erlang-autoconf</code> and with buildhistory enabled it is possible to inspect the size of each dependency.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Enabled in <code>local.conf</code>:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">USER_CLASSES ?= "buildhistory buildstats"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BUILDHISTORY_COMMIT = "1"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div>
<p>Starting with <em>hello-erlang-autoconf</em> package it says:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat buildhistory/packages/riscv32imafdc-poky-linux/hello-erlang-autoconf/hello-erlang-autoconf/latest </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PV = 0.1.0+git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PR = r0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PKGV = 0.1.0+git0+6c7f37489e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RPROVIDES = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RDEPENDS = erlang-epmd erlang-erts erlang-kernel erlang-stdlib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RRECOMMENDS = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PKGSIZE = 12705</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILES = /usr/lib/erlang/lib/hello-*/ebin /etc/hello.d /etc/hello.d/hello.boot /etc/init.d/hello.otp.system /usr/bin/hello.start /usr/bin/hello.stop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILELIST = /etc/hello.d/hello.boot /etc/hello.d/hello.config /etc/init.d/hello.otp.system /usr/bin/hello.start /usr/bin/hello.stop /usr/lib/erlang/lib/hello-6c7f374/ebin/hello.app /usr/lib/erlang/lib/hello-6c7f374/ebin/hello.beam /usr/lib/erlang/lib/hello-6c7f374/ebin/hello_app.beam /usr/lib/erlang/lib/hello-6c7f374/ebin/hello_sup.beam</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Looking into <code>RDEPENDS</code> it is clear what are necessary to be installed in order to run hello-erlang-autoconf application:</p>
<!-- -->
<p>A close look into all installed files by hellor-erlang-autoconf:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat buildhistory/packages/riscv32imafdc-poky-linux/hello-erlang-autoconf/hello-erlang-autoconf/files-in-package.txt </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./etc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./etc/hello.d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             7550 ./etc/hello.d/hello.boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root               63 ./etc/hello.d/hello.config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./etc/init.d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root             1525 ./etc/init.d/hello.otp.system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root              370 ./usr/bin/hello.start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root              506 ./usr/bin/hello.stop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang/lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang/lib/hello-6c7f374</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang/lib/hello-6c7f374/ebin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root              231 ./usr/lib/erlang/lib/hello-6c7f374/ebin/hello.app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root              636 ./usr/lib/erlang/lib/hello-6c7f374/ebin/hello_app.beam</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             1024 ./usr/lib/erlang/lib/hello-6c7f374/ebin/hello.beam</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root              800 ./usr/lib/erlang/lib/hello-6c7f374/ebin/hello_sup.beam</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>A few files. Just .beam objects and start scripts. An interesting fact, the following files:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang/lib/hello-6c7f374</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang/lib/hello-6c7f374/ebin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root              231 ./usr/lib/erlang/lib/hello-6c7f374/ebin/hello.app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root              636 ./usr/lib/erlang/lib/hello-6c7f374/ebin/hello_app.beam</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             1024 ./usr/lib/erlang/lib/hello-6c7f374/ebin/hello.beam</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root              800 ./usr/lib/erlang/lib/hello-6c7f374/ebin/hello_sup.beam</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Get installed inside <em>/usr/lib/erlang/lib/</em>, this is where the standard Erlang/OTP is installed by erlang recipe from meta-erlang layer.</p>
<p>More details about all erlang-* dependencies:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat buildhistory/packages/riscv32imafdc-poky-linux/erlang/erlang-epmd/latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PV = 28.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PR = r0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RPROVIDES = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RDEPENDS = base-files base-passwd glibc (&gt;= 2.41+git0+6e489c17f8) libsystemd (&gt;= 257.6) shadow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RRECOMMENDS = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PKGSIZE = 47150</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILES = /usr/lib/erlang/erts-*/bin/epmd /usr/lib/erlang/bin/epmd /usr/bin/epmd /usr/lib/systemd/system/epmd.service /usr/lib/systemd/system/epmd.socket /etc/init.d /usr/lib/systemd/system-preset/98-erlang-epmd.preset /usr/lib/systemd/system/epmd.service /usr/lib/systemd/system/epmd.socket</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILELIST = /usr/bin/epmd /usr/lib/erlang/bin/epmd /usr/lib/erlang/erts-16.0.1/bin/epmd /usr/lib/systemd/system-preset/98-erlang-epmd.preset /usr/lib/systemd/system/epmd.service /usr/lib/systemd/system/epmd.socket</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat buildhistory/packages/riscv32imafdc-poky-linux/erlang/erlang-erts/latest </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PV = 28.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PR = r0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RPROVIDES = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RDEPENDS = glibc (&gt;= 2.41+git0+6e489c17f8) ncurses-libtinfo (&gt;= 6.5) zlib (&gt;= 1.3.1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RRECOMMENDS = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PKGSIZE = 4690380</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILES = /usr/bin /usr/lib/erlang/releases /usr/lib/erlang/bin /usr/lib/erlang/erts-*/bin /usr/lib/erlang/lib/erts-*/ebin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILELIST = /usr/bin/erl /usr/bin/escript /usr/bin/run_erl /usr/bin/to_erl /usr/lib/erlang/bin/erl /usr/lib/erlang/bin/erl_call /usr/lib/erlang/bin/escript /usr/lib/erlang/bin/no_dot_erlang.boot /usr/lib/erlang/bin/run_erl /usr/lib/erlang/bin/start /usr/lib/erlang/bin/start.boot /usr/lib/erlang/bin/start.script /usr/lib/erlang/bin/start_clean.boot /usr/lib/erlang/bin/start_erl /usr/lib/erlang/bin/start_sasl.boot /usr/lib/erlang/bin/to_erl /usr/lib/erlang/erts-16.0.1/bin/beam.smp /usr/lib/erlang/erts-16.0.1/bin/dyn_erl /usr/lib/erlang/erts-16.0.1/bin/erl /usr/lib/erlang/erts-16.0.1/bin/erl.src /usr/lib/erlang/erts-16.0.1/bin/erl_call /usr/lib/erlang/erts-16.0.1/bin/erl_child_setup /usr/lib/erlang/erts-16.0.1/bin/erlexec /usr/lib/erlang/erts-16.0.1/bin/escript /usr/lib/erlang/erts-16.0.1/bin/heart /usr/lib/erlang/erts-16.0.1/bin/inet_gethost /usr/lib/erlang/erts-16.0.1/bin/run_erl /usr/lib/erlang/erts-16.0.1/bin/start /usr/lib/erlang/erts-16.0.1/bin/start.src /usr/lib/erlang/erts-16.0.1/bin/start_erl.src /usr/lib/erlang/erts-16.0.1/bin/to_erl /usr/lib/erlang/releases/28/OTP_VERSION /usr/lib/erlang/releases/28/installed_application_versions /usr/lib/erlang/releases/28/no_dot_erlang.boot /usr/lib/erlang/releases/28/no_dot_erlang.rel /usr/lib/erlang/releases/28/no_dot_erlang.script /usr/lib/erlang/releases/28/start.boot /usr/lib/erlang/releases/28/start.script /usr/lib/erlang/releases/28/start_all_example.rel /usr/lib/erlang/releases/28/start_clean.boot /usr/lib/erlang/releases/28/start_clean.rel /usr/lib/erlang/releases/28/start_clean.script /usr/lib/erlang/releases/28/start_sasl.boot /usr/lib/erlang/releases/28/start_sasl.rel /usr/lib/erlang/releases/28/start_sasl.script /usr/lib/erlang/releases/RELEASES /usr/lib/erlang/releases/RELEASES.src /usr/lib/erlang/releases/start_erl.data</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat buildhistory/packages/riscv32imafdc-poky-linux/erlang/erlang-kernel/latest </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PV = 28.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PR = r0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RPROVIDES = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RDEPENDS = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RRECOMMENDS = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PKGSIZE = 2931802</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILES = /usr/lib/erlang/lib/kernel-*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILELIST = /usr/lib/erlang/lib/kernel-10.3.1/ebin/application.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/application_controller.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/application_master.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/application_starter.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/auth.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/code.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/code_server.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/disk_log.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/disk_log_1.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/disk_log_server.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/disk_log_sup.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/dist_ac.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/dist_util.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_boot_server.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_compile_server.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_ddll.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_debugger.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_distribution.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_epmd.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_erts_errors.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_kernel_errors.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_reply.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erl_signal_handler.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erpc.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/error_handler.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/error_logger.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/erts_debug.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/file.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/file_io_server.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/file_server.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/gen_sctp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/gen_tcp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/gen_tcp_socket.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/gen_udp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/gen_udp_socket.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/global.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/global_group.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/global_search.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/group.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/group_history.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/heart.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet6_sctp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet6_tcp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet6_tcp_dist.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet6_udp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_config.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_db.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_dns.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_dns_tsig.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_epmd_dist.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_epmd_socket.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_gethost_native.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_hosts.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_parse.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_res.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_sctp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_tcp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_tcp_dist.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/inet_udp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/kernel.app /usr/lib/erlang/lib/kernel-10.3.1/ebin/kernel.appup /usr/lib/erlang/lib/kernel-10.3.1/ebin/kernel.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/kernel_config.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/kernel_refc.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/local_tcp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/local_udp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_backend.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_config.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_disk_log_h.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_filters.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_formatter.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_h_common.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_handler.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_handler_watcher.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_olp.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_proxy.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_server.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_simple_h.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_std_h.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/logger_sup.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/net.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/net_adm.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/net_kernel.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/os.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/pg.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/pg2.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/prim_tty.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/prim_tty_sighandler.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/ram_file.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/raw_file_io.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/raw_file_io_compressed.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/raw_file_io_deflate.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/raw_file_io_delayed.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/raw_file_io_inflate.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/raw_file_io_list.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/rpc.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/seq_trace.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/socket.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/standard_error.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/trace.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/user_drv.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/user_sup.beam /usr/lib/erlang/lib/kernel-10.3.1/ebin/wrap_log_reader.beam</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat buildhistory/packages/riscv32imafdc-poky-linux/erlang/erlang-stdlib/latest </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PV = 28.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PR = r0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RPROVIDES = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RDEPENDS = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RRECOMMENDS = </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PKGSIZE = 6571412</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILES = /usr/lib/erlang/lib/stdlib-*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FILELIST = /usr/lib/erlang/lib/stdlib-7.0.1/ebin/argparse.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/array.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/base64.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/beam_lib.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/binary.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/c.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/calendar.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/dets.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/dets_server.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/dets_sup.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/dets_utils.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/dets_v9.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/dict.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/digraph.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/digraph_utils.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/edlin.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/edlin_context.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/edlin_expand.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/edlin_key.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/edlin_type_suggestion.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/epp.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_abstract_code.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_anno.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_bits.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_compile.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_error.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_eval.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_expand_records.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_features.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_internal.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_lint.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_parse.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_posix_msg.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_pp.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_scan.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_stdlib_errors.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/erl_tar.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/error_logger_file_h.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/error_logger_tty_h.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/escript.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/ets.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/eval_bits.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/file_sorter.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/filelib.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/filename.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/gb_sets.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/gb_trees.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/gen.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/gen_event.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/gen_fsm.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/gen_server.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/gen_statem.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/io.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/io_lib.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/io_lib_format.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/io_lib_fread.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/io_lib_pretty.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/json.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/lists.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/log_mf_h.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/maps.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/math.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/ms_transform.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/orddict.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/ordsets.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/otp_internal.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/peer.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/pool.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/proc_lib.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/proplists.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/qlc.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/qlc_pt.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/queue.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/rand.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/random.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/re.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/sets.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/shell.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/shell_default.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/shell_docs.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/shell_docs_markdown.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/shell_docs_test.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/slave.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/sofs.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/stdlib.app /usr/lib/erlang/lib/stdlib-7.0.1/ebin/stdlib.appup /usr/lib/erlang/lib/stdlib-7.0.1/ebin/string.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/supervisor.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/supervisor_bridge.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/sys.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/timer.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/unicode.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/unicode_util.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/uri_string.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/win32reg.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/zip.beam /usr/lib/erlang/lib/stdlib-7.0.1/ebin/zstd.beam</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Based on PKGSIZE for each package, we have the following graph showing which package consumes more space:</p>
<!-- -->
<table><thead><tr><th>Package</th><th>Size</th></tr></thead><tbody><tr><td>hellow-erlang-autoconf</td><td>12705</td></tr><tr><td>erlang-epmd</td><td>47150</td></tr><tr><td>erlang-kernel</td><td>2931802</td></tr><tr><td>erlang-erts</td><td>4690380</td></tr><tr><td>erlang-stdlib</td><td>6571412</td></tr><tr><td>Total</td><td>14253449</td></tr></tbody></table>
<p>So, almost 15Mb is necessary for a simple erlang application. Nowadays it is almost nothing. But that raise some questions:</p>
<ol>
<li>Is that possible to reduce the size of ERTS ?<!-- -->
<ul>
<li>Maybe using some configure and build flags for better code optimization</li>
<li>Or even necessary detect which places in Erlang/OTP source code worth optimizations</li>
</ul>
</li>
<li>Double check if debug symbols are present in each .beam file</li>
<li>erlang-stdlib is consuming most of the space. However, it has everything needed for building applications. It's a fact.<!-- -->
<ul>
<li>Maybe there are open room for spliting erlang-stdlib in small libraries ?</li>
</ul>
</li>
</ol>]]></content:encoded>
            <category>meta-erlang</category>
            <category>autotools</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 25.3.2.20, 26.2.5.11, 27.3.3]]></title>
            <link>https://meta-erlang.github.io/blog/2025/04/19/index/</link>
            <guid>https://meta-erlang.github.io/blog/2025/04/19/index/</guid>
            <pubDate>Sat, 19 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Due CVE-2025-32433, more]]></description>
            <content:encoded><![CDATA[<p>Due <a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32433" target="_blank" rel="noopener noreferrer">CVE-2025-32433</a>, more
details at
<a href="https://github.com/erlang/otp/security/advisories/GHSA-37cp-fgq5-7wc2" target="_blank" rel="noopener noreferrer">Unauthenticated Remote Code Execution in Erlang/OTP SSH</a>,</p>
<p>we have updated the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>master</td><td>25.3.2.20, 26.2.5.11, 27.3.3</td></tr><tr><td>scarthgap</td><td>25.3.2.20, 26.2.5.11, 27.3.3</td></tr><tr><td>kirkstone</td><td>25.3.2.20, 26.2.5.11, 27.3.3</td></tr></tbody></table>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[fwup for A/B image upgrades on raspberrypi machines with NervesCloud, part I]]></title>
            <link>https://meta-erlang.github.io/blog/2025/03/21/index/</link>
            <guid>https://meta-erlang.github.io/blog/2025/03/21/index/</guid>
            <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[This blog post introduces nerves-hub-link running on raspberrypi machines in]]></description>
            <content:encoded><![CDATA[<p>This blog post introduces nerves-hub-link running on raspberrypi machines in
order to upgrade firmware via <a href="https://nervescloud.com/" target="_blank" rel="noopener noreferrer">NervesCloud</a>.</p>
<p>On previous <a href="https://meta-erlang.github.io/blog/tags/fwup/">blog posts about fwup</a>, we have explored and
tested using QEMU based machines. Now it's time to change the target and use a
real machine.</p>
<p>Nowadays, raspberrypi is an accessible development platform for prototyping and
why not for real use cases too.</p>
<p>On Yocto side, there is a stable layer called
<a href="https://github.com/agherzan/meta-raspberrypi" target="_blank" rel="noopener noreferrer">meta-raspberrypi</a> which
implements many of raspberrypi boards.</p>
<p>The end goal is to update the target board using NervesCloud, the
<a href="https://meta-erlang.github.io/blog/2025/01/26/index/">same way that was done using QEMU based machines</a>.</p>
<p>The focus of this post is about how to prepare a working Yocto setup for
raspberry context. I'll not show a demonstration this time, reserving it for the
next blog posts ;)</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ypoe-setup">YP/OE Setup<a href="https://meta-erlang.github.io/blog/2025/03/21/index/#ypoe-setup" class="hash-link" aria-label="Direct link to YP/OE Setup" title="Direct link to YP/OE Setup">​</a></h3>
<p>I'll try to simplify the YP/OE setup to just tree small steps:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>This is the same steps taken for the previous blog post called
<a href="https://meta-erlang.github.io/blog/2025/01/26/index/">fwup for A/B image upgrades on QEMU machines with NervesCloud, part III</a>.
But now, with one additional layer called
<a href="https://github.com/agherzan/meta-raspberrypi" target="_blank" rel="noopener noreferrer">meta-raspberrypi</a>.</p><p>Also, removing the meta-qemu-bsp.</p></div></div>
<ol>
<li>
<p>Cloning all repositories for master release:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/openembedded/meta-openembedded.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/fwup-home/meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/joaohf/meta-fwup-examples</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-axon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/joaohf/meta-nerves-hub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/agherzan/meta-raspberrypi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-openembedded/meta-oe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-fwup-examples</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-nerves-hub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-raspberrypi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-axon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-build-environment">Configuring the build environment<a href="https://meta-erlang.github.io/blog/2025/03/21/index/#configuring-the-build-environment" class="hash-link" aria-label="Direct link to Configuring the build environment" title="Direct link to Configuring the build environment">​</a></h3>
<p>For this use case, the quickest way is edit and add the <em>conf/local.conf</em>
configuration file.</p>
<p>We start enabling some
<a href="https://docs.yoctoproject.org/5.0.7/dev-manual/building.html#building-images-for-multiple-targets-using-multiple-configurations" target="_blank" rel="noopener noreferrer">multiconfig configurations</a>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">BBMULTICONFIG ?= "\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    raspberrypi0-wifi-nerves-hub-link \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    raspberrypi4-64-nerves-hub-link \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    raspberrypi5-nerves-hub-link \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The layer meta-axon provides some samples for
<a href="https://github.com/meta-erlang/meta-axon/tree/master/conf/multiconfig" target="_blank" rel="noopener noreferrer">raspberry configurations with nerves-hub enabled</a>.</p>
<p>multiconfig is useful because it simplify bitbake configurations when we have
many target boards. On my test setup I'm building for raspberrypi 0, 4 and 5.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-images">Building images<a href="https://meta-erlang.github.io/blog/2025/03/21/index/#building-images" class="hash-link" aria-label="Direct link to Building images" title="Direct link to Building images">​</a></h3>
<p>Next, we need to build images:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake multiconfig:raspberrypi4-64-nerves-hub-link:core-image-base</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake multiconfig:raspberrypi5-nerves-hub-link:core-image-base</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake multiconfig:raspberrypi0-wifi-nerves-hub-link:core-image-base</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>core-image-base is being used here. It's suitable for raspberrypi.</p></div></div>
<p>After the above commands, the result are the following files:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tmp-raspberrypi0-wifi-glibc-nerves-hub-link/deploy/images/raspberrypi0-wifi/core-image-base-raspberrypi0-wifi.rootfs.fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-raspberrypi4-64-glibc-nerves-hub-link/deploy/images/raspberrypi4-64/core-image-base-raspberrypi4-64.rootfs.fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-raspberrypi5-glibc-nerves-hub-link/deploy/images/raspberrypi5/core-image-base-raspberrypi5.rootfs.fwup</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And are ready to flash into a bootable device.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flashing-image">Flashing image<a href="https://meta-erlang.github.io/blog/2025/03/21/index/#flashing-image" class="hash-link" aria-label="Direct link to Flashing image" title="Direct link to Flashing image">​</a></h3>
<p>Before running fwup commands:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake fwup-native -caddto_recipe_sysroot</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For each fwup image, and using <code>fwup</code> for flashing (one sdcard for each image):</p>
<p>rpi0:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">oe-run-native fwup-native \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  fwup -a -d /dev/sdc \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -t complete \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -i tmp-raspberrypi0-wifi-glibc-nerves-hub-link/deploy/images/raspberrypi0-wifi/core-image-base-raspberrypi0-wifi.rootfs.fwup</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>rpi4:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">oe-run-native fwup-native \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  fwup -a -d /dev/sdc \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -t complete \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -i tmp-raspberrypi4-64-glibc-nerves-hub-link/deploy/images/raspberrypi4-64/core-image-base-raspberrypi4-64.rootfs.fwup</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>rpi5:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">oe-run-native fwup-native \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  fwup -a -d /dev/sdc \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -t complete \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -i tmp-raspberrypi5-glibc-nerves-hub-link/deploy/images/raspberrypi5/core-image-base-raspberrypi5.rootfs.fwup</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="and-booting">And booting<a href="https://meta-erlang.github.io/blog/2025/03/21/index/#and-booting" class="hash-link" aria-label="Direct link to And booting" title="Direct link to And booting">​</a></h3>
<p>Just put the sdcard into raspiberrypi and boot. It should work as expected.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>I promised, for the next blog post I'll share a full demonstration</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="some-important-details-not-discussed-before">Some important details not discussed before<a href="https://meta-erlang.github.io/blog/2025/03/21/index/#some-important-details-not-discussed-before" class="hash-link" aria-label="Direct link to Some important details not discussed before" title="Direct link to Some important details not discussed before">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="meta-nerves-hub">meta-nerves-hub<a href="https://meta-erlang.github.io/blog/2025/03/21/index/#meta-nerves-hub" class="hash-link" aria-label="Direct link to meta-nerves-hub" title="Direct link to meta-nerves-hub">​</a></h3>
<p>The <a href="https://github.com/joaohf/meta-nerves-hub" target="_blank" rel="noopener noreferrer">meta-nerves-hub</a> layer has a
recipe for
<a href="https://github.com/joaohf/meta-nerves-hub/tree/master/recipes-extended/nerves-hub-link_2.5.2.bb" target="_blank" rel="noopener noreferrer">nerves-hub-link_2.5.2.bb</a>.
This recipe installs a standalone nerves-hub-link. I've tested the version 2.5.2
and it works for my initial goals.</p>
<p>However, the later nerves-hub-link versions are not prepared to run as
standalone application anymore. It needs to be part of a BEAM application in
order to be properly configured.</p>
<p>I've tested recent versions and ended up with nerves-hub-link fighting with
linux network stack; for instance trying to configure it where it should not or
using others ways to detect configurations.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>It's up to you when design Yocto based linux distributions select what network
manager best fits to your needs. Yocto gives to you many options as well a
default one.</p></div></div>
<p>So, the next organic step will be to implement a BEAM application that uses
nerves-hub-link. That would be a kind of nerves-hub-link-agent. I just want to
start it and play nice with linux network configuration stack.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusions">Conclusions<a href="https://meta-erlang.github.io/blog/2025/03/21/index/#conclusions" class="hash-link" aria-label="Direct link to Conclusions" title="Direct link to Conclusions">​</a></h2>
<p>So, this blog post was more to make a milestone for this trip. And we are
getting closer to get Yocto based linux distro full integrated with NervesCloud
without thinking too much.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>fwup</category>
            <category>rpi</category>
        </item>
        <item>
            <title><![CDATA[fwup for A/B image upgrades on QEMU machines with NervesCloud, part III]]></title>
            <link>https://meta-erlang.github.io/blog/2025/01/26/index/</link>
            <guid>https://meta-erlang.github.io/blog/2025/01/26/index/</guid>
            <pubDate>Sun, 26 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[This blog post shows how to use NervesCloud in order]]></description>
            <content:encoded><![CDATA[<p>This blog post shows how to use <a href="https://nervescloud.com/" target="_blank" rel="noopener noreferrer">NervesCloud</a> in order
to upgrade and manage linux images based on Yocto Project.</p>
<p>We will run this demonstration with QEMU ARM based machine prepared as a result
of previous blog post called
<a href="https://meta-erlang.github.io/blog/2024/12/20/index/">fwup for A/B image upgrades on QEMU machines with fwup, part II</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-nervescloud">What is NervesCloud<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#what-is-nervescloud" class="hash-link" aria-label="Direct link to What is NervesCloud" title="Direct link to What is NervesCloud">​</a></h2>
<p><a href="https://nervescloud.com/" target="_blank" rel="noopener noreferrer">NervesCloud</a> is an instance of
<a href="https://github.com/nerves-hub" target="_blank" rel="noopener noreferrer">NervesHub</a> based on cloud. It could be
considered NervesCloud as a SaaS for NervesHub. In that way, instead you having
to install and manage your own instance of NervesHub for
<a href="https://nerves-project.org/" target="_blank" rel="noopener noreferrer">Nerves devices</a> management, NervesCloud takes care
of all the infrastructure and provides to you the benefits without worry with
details.</p>
<p>In this demonstration, we will use NervesCloud with a development account called
<em>Experiments</em>. As NervesCloud is a multi-tenant system, anyone can have an
account for real or development purposes.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>It's not part of this demonstration how to setup a NervesCloud account. However,
I would like to say thank you to NervesCloud team to take care of these details.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="preparing-a-key-pair-for-firmware-signing">Preparing a key pair for firmware signing<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#preparing-a-key-pair-for-firmware-signing" class="hash-link" aria-label="Direct link to Preparing a key pair for firmware signing" title="Direct link to Preparing a key pair for firmware signing">​</a></h3>
<p>NervesCloud works with signed firmware images files. It's mandatory to signed
these images before uploading into NervesCloud.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>I expected that you have a working Elixir environment for the following steps.</p></div></div>
<p>Clone <a href="https://github.com/nerves-hub/nerves_hub_cli" target="_blank" rel="noopener noreferrer">nerves_hub_cli</a> project:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://github.com/nerves-hub/nerves_hub_cli</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd nerves_hub_cli</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's start configuring two environment variable that nerver_hub_cli tool will
use:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">export NERVES_HUB_ORG=Experiments</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export NERVES_HUB_URI=https://devices.nervescloud.com</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, we need to create a key pair for signed fw files later. For that, we use
the subcommand <code>nerves_hub.key create</code>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mix  nerves_hub.key create QemuMachines1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NervesHub server: devices.nervescloud.com:443</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NervesHub organization: Experiments</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Creating a firmware signing key pair named 'QemuMachines1'.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The private key is stored locally and must be protected by a password.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">If you are sharing the firmware signing private key with others,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">please choose an appropriate password.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Signing key password for 'QemuMachines1':</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Firmware public key written to '/home/joaohf/.nerves-hub/keys/Experiments/QemuMachines1.pub'.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Password-protected firmware private key written to '/home/joaohf/.nerves-hub/keys/Experiments/QemuMachines1.priv'.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Registering the firmware signing public key 'QemuMachines1' with NervesHub.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:35:09.524 [info] POST https://devices.nervescloud.com/api/orgs/Experiments/keys -&gt; 201 (578.459 ms)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:35:09.528 [debug]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt;&gt;&gt; REQUEST &gt;&gt;&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(no query)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Authorization: token nhu_xyz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%{name: "QemuMachines1", key: "xyz"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;&lt;&lt; RESPONSE &lt;&lt;&lt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">date: Sun, 09 Feb 2025 22:35:08 GMT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">content-length: 86</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vary: accept-encoding</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">content-type: application/json; charset=utf-8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cache-control: max-age=0, private, must-revalidate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">strict-transport-security: max-age=31536000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x-request-id: GCKrFDWwXjoGnjQAHQLx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server: Fly/1ab217aa (2025-02-07)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">via: 1.1 fly.io</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fly-request-id: 01JKPDMBHQP83WW1971PCXC0FZ-gig</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%{"data" =&gt; %{"key" =&gt; "xyz", "name" =&gt; "QemuMachines1"}}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success. Key information:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name:       QemuMachines1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public key: xyz</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The main outcome here is that the command <code>nerves_hub.key create</code> has created a
valide key pair called QemuMachines1. We also need to export this key pair to
something that Yocto can read later. For that, we use the command
<code>nerves_hub.key export</code>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mix nerves_hub.key export QemuMachines1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NervesHub server: devices.nervescloud.com:443</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NervesHub organization: Experiments</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Local signing key password for 'QemuMachines1':</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Fwup keys exported to: /home/joaohf/.nerves-hub/nerves_hub-fwup-keys-Experiments-QemuMachines1.tar.gz</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That is great, the key pair QemuMachines1 is ready. We just need one small step
in order to extract two files from the tar.gz file:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdir /tmp/exported_keys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar zxf ~/.nerves-hub/nerves_hub-fwup-keys-Experiments-QemuMachines1.tar.gz -C /tmp/exported_keys</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And finally, we have the keys as expected:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ls -l /tmp/exported_keys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 joaohf joaohf 88 fev  9 19:36 QemuMachines1.priv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 joaohf joaohf 44 fev  9 19:36 QemuMachines1.pub</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Keep QemuMachines1.priv and QemuMachines1.pub files around. We will need to
configure Yocto in order to make fwup signed firmwares automatically.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="upgradedowngrade-demonstration">Upgrade/Downgrade demonstration<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#upgradedowngrade-demonstration" class="hash-link" aria-label="Direct link to Upgrade/Downgrade demonstration" title="Direct link to Upgrade/Downgrade demonstration">​</a></h2>
<p>As always, I like to describe all steps. In case someone wants to try it. My
target here is to play with NervesCloud for upgrade -&gt; downgrade -&gt; upgrade
cycle.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ypoe-setup">YP/OE Setup<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#ypoe-setup" class="hash-link" aria-label="Direct link to YP/OE Setup" title="Direct link to YP/OE Setup">​</a></h3>
<p>I'll try to simplify the YP/OE setup to just tree small steps:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>This is the same steps taken for the previous blog post called
<a href="https://meta-erlang.github.io/blog/2024/12/20/index/">fwup for A/B image upgrades on QEMU machines with fwup, part II</a>.
But now, with one additional layer called
<a href="https://github.com/joaohf/meta-nerves-hub" target="_blank" rel="noopener noreferrer">meta-nerves_hub</a>.</p></div></div>
<ol>
<li>
<p>Cloning all repositories for master release:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/openembedded/meta-openembedded.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/fwup-home/meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/joaohf/meta-fwup-examples</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-qemu-bsp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-axon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/joaohf/meta-nerves-hub</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-openembedded/meta-oe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-qemu-bsp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-fwup-examples</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-nerves-hub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-axon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-build-environment">Configuring the build environment<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#configuring-the-build-environment" class="hash-link" aria-label="Direct link to Configuring the build environment" title="Direct link to Configuring the build environment">​</a></h3>
<p>For this use case, the quickest way is edit and add the <em>conf/local.conf</em>
configuration file.</p>
<p>We start defining the MACHINE and DISTRO:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE = "qemuarm64-uboot"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRO = "poky"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The machine <em>qemuarm64-uboot</em> is provided by
<a href="https://github.com/meta-erlang/meta-qemu-bsp" target="_blank" rel="noopener noreferrer">meta-qemu-bsp</a> layer. That
machine uses u-boot as bootloader.</p>
<p>As YP/OE supports many types of image outputs, we want to be specific here and
pick only the <em>fwup</em> type.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># enable support for making fwup images</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_CLASSES += "image_types_fwup"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_FSTYPES = "fwup fwup.qcow2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configure-nervescloud-product-name">Configure NervesCloud product name<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#configure-nervescloud-product-name" class="hash-link" aria-label="Direct link to Configure NervesCloud product name" title="Direct link to Configure NervesCloud product name">​</a></h3>
<p>Edit the file <em>conf/local.conf</em> and overwrite the variable <code>FWUP_META_PRODUCT</code>
with the contents of NervesHub Cloud product. In my case the product name is
<em>YoctoFwup</em>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># NervesHub product name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FWUP_META_PRODUCT = "YoctoFwup"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configure-private-and-public-keys-for-fwup-tool">Configure private and public keys for fwup tool<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#configure-private-and-public-keys-for-fwup-tool" class="hash-link" aria-label="Direct link to Configure private and public keys for fwup tool" title="Direct link to Configure private and public keys for fwup tool">​</a></h3>
<p>The bbclass image<em>types_fwup.bbclass takes care of signing fwup images when the
variables <code>FWUP_PRIVATE_KEY_FILE</code> and <code>FWUP_PUBLIC_KEY_FILE</code> are available. For
this demonstration, we need to make signed .fw (firmware update files) images.
Let's add these two variables to _conf/local.conf</em> too:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FWUP_PRIVATE_KEY_FILE = "/tmp/exported_keys/QemuMachines1.priv"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FWUP_PUBLIC_KEY_FILE = "/tmp/exported_keys/QemuMachines1.pub"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That is all for this step.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="build-fwup-firmware">Build fwup firmware<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#build-fwup-firmware" class="hash-link" aria-label="Direct link to Build fwup firmware" title="Direct link to Build fwup firmware">​</a></h3>
<p>In this experiment we will build two images. And, for each build, the variable
<code>FWUP_META_VERSION</code> will be changed.</p>
<p>Let's start creating an image that represents the version 1.0.1. Edit the file
<em>conf/local.conf</em> and add the following:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 1st build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FWUP_META_VERSION = "1.0.1"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, we need to build a new image:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake multiconfig:qemuarm64-uboot-nerves-hub-link:core-image-full-cmdline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After this build, let's copy the signed fwup firmware image (*signed.fw) to a
temporary folder. For better organization, rename it adding the version "1.0.1":</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cp tmp-qemuarm64-uboot-glibc-nerves-hub-link/deploy/images/qemuarm64-uboot/core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126203524.fw \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  /tmp/core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126203524-1.0.1.signed.fw</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Ok. We got the version 1.0.1. Now, let's prepare the version 1.2.0.</p>
<p>Still in build folder, edit the file <em>conf/local.conf</em> and change the variable
<code>FWUP_META_VERSION</code>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 2nd build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FWUP_META_VERSION = "1.2.0"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Build the new image:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake multiconfig:qemuarm64-uboot-nerves-hub-link:core-image-full-cmdline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And when finished, copy the fwup firmware (*signed.fw) to a temporary folder.
Add to the filename the version "1.2.0":</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cp tmp-qemuarm64-uboot-glibc-nerves-hub-link/deploy/images/qemuarm64-uboot/core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126211722.fw \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  /tmp/core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126211722.1.2.0.signed.fw</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The final result is like that:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ls -l /tmp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 229596347 jan 26 18:02 core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126203524-1.0.1.signed.fw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 229596346 jan 26 18:23 core-image-full-cmdline-qemuarm64-uboot.rootfs-20250126211722.1.2.0.signed.fw</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are two signed fwup firmware images ready to be uploaded into Nerves
Cloud.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="fwup-firmware-upload">fwup firmware upload<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#fwup-firmware-upload" class="hash-link" aria-label="Direct link to fwup firmware upload" title="Direct link to fwup firmware upload">​</a></h3>
<p>The procedures to upload the fwup image is very simple. Inside the NervesCloud
web interface, go to 'Firmware' menu and use the button 'Upload Firmware' to
start uploading a new firmware file.</p>
<p>We'll need to upload both images (1.0.1 and 1.2.0) for the next exercises. The
final Firmware list pages should be something like that:</p>
<p><img decoding="async" loading="lazy" alt="alt Firmware listing" src="https://meta-erlang.github.io/assets/images/nhc_firmware_listing-d14863c8144ee28d8c00a79c581c9c56.png" title="Firmwares uploaded" width="1213" height="463" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="playing-with-upgrades">Playing with upgrades<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#playing-with-upgrades" class="hash-link" aria-label="Direct link to Playing with upgrades" title="Direct link to Playing with upgrades">​</a></h3>
<p>Now, it's time to observe and play with some upgrades and downgrades.</p>
<p>First, let's start runqemu with our last image build:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu  nographic serialstdio slirp \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">multiconfig:qemuarm64-uboot-nerves-hub-link:core-image-full-cmdline \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wic.qcow2 qemuparams="-m 1024"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In my case, the parameter <code>-m 1024</code> was necessary because my development images
were a bit oversized.</p></div></div>
<p>Inside QEMU instance, start nerves_cloud_link application:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/usr/lib/nerves-hub-link/bin/nerves_hub_link start_iex</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In NervesCloud web interface, check with the device has listed there:</p>
<p><img decoding="async" loading="lazy" alt="alt Device up" src="https://meta-erlang.github.io/assets/images/nhc_device_10_connected-7529f0457aa0a7c2c2858645a2286110.png" title="Device up with 1.2.0 version" width="1236" height="457" class="img_ev3q"></p>
<p>The 'Firmware' column should be pointing to '1.2.0' version (because this
version was the latest build).</p>
<p>For upgrade and downgrade using NervesCloud, there are some options like
creating a Deployment or send an update command to a specific device. In this
experiment, let's send update command.</p>
<p>We want to test the following scenarios:</p>
<ul>
<li>
<p>downgrade 1.2.0 -&gt; 1.0.1</p>
<p>Select the device that we want to work, in my case the device is '10'. And on
device administration page, select the firmware version that we want to send.
In this case it will be the version 1.0.1. And click on "Send update" button.</p>
<p><img decoding="async" loading="lazy" alt="alt Sending firmware" src="https://meta-erlang.github.io/assets/images/nhc-send-update-to-1.0.1-36d46e43cae67b1e90f7bd976ebc1142.png" title="Sensing firmware 1.0.1" width="1240" height="872" class="img_ev3q"></p>
<p>While NervesCloud is sending the new firmware to device, on QEMU console we
can check that nerves_hub_link is working as expected:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">22:01:38.452 [info] [NervesHubLink] Resuming download attempt number 0 https://files.nervescloud.com/firmware/38/a6fd8354-ecc6-50c9-e337-5c72d8c105d5.fw?X-Amz-Algorithm=AWS4-HMAC-SHA256</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:01:38.469 [info] [NervesHubLink] Downloading firmware: https://files.nervescloud.com/firmware/38/a6fd8354-ecc6-50c9-e337-5c72d8c105d5.fw?X-Amz-Algorithm=AWS4-HMAC-SHA256</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:01:38.472 [notice]     :alarm_handler: {:set, {NervesHubLink.UpdateInProgress, []}}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:01:38.482 [debug] [NervesHubLink] FWUP PROG: 0%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:01:39.627 [warning] [NervesHubLink] FWUP WARN: Upgrading partition B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:01:40.114 [debug] [NervesHubLink] FWUP PROG: 1%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:01:40.551 [debug] [NervesHubLink] FWUP PROG: 2%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:01:40.552 [debug] [NervesHubLink] FWUP PROG: 3%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">....</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">....</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">....</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:02:09.478 [debug] [NervesHubLink] FWUP PROG: 100%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:02:09.481 [info] [NervesHubLink] FWUP SUCCESS: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:02:09.482 [info] [NervesHubLink] FWUP Finished</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:02:09.483 [notice]     :alarm_handler: {:clear, NervesHubLink.UpdateInProgress}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:02:09.484 [info] Elixir.Nerves.Runtime.Power : device told to reboot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:02:09.488 [error] Heart: Erlang heart isn't running. Check vm.args.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22:02:09.731 [warning] [NervesTime] Stopping RTC NervesTime.FileTime: :shutdown</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The device will update and reboot. When QEMU instance is back, start
nerves_hub_link again and check the expected version in NervesCloud web
interface:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The manual start is OK for this experiment. Just execute nerves_hub_link again
on QEMU console:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/usr/lib/nerves-hub-link/bin/nerves_hub_link start_iex</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div>
<p><img decoding="async" loading="lazy" alt="alt Device updated" src="https://meta-erlang.github.io/assets/images/nhc_device_updated_to_101-2e26a42c06f4d40fbc19a1b7c841b74b.png" title="Device updated to 1.0.1 version" width="1246" height="439" class="img_ev3q"></p>
<p>Very good, the downgrade has been completed.</p>
</li>
<li>
<p>upgrade 1.0.1 -&gt; 1.2.0</p>
<p>Now, it's time to perform an upgrade from 1.0.1 to 1.2.0 version. Following
the same steps above, but selecting the version 1.2.0 this time, the device
will be updated to 1.2.0 version:</p>
<p><img decoding="async" loading="lazy" alt="alt Device updated" src="https://meta-erlang.github.io/assets/images/nhc_update_device_10_to_120-832e164c694fbb93e0ae6accf4753b00.png" title="Update to 1.2.0 version" width="1224" height="867" class="img_ev3q"></p>
<p>When QEMU is back, we can check which version NervesCloud will show:</p>
<p><img decoding="async" loading="lazy" alt="alt Device updated" src="https://meta-erlang.github.io/assets/images/nhc_device_updated_to_120-d8295165fe5dbb5332540b5b4a4aa649.png" title="Device updated to 1.2.0 version" width="1250" height="321" class="img_ev3q"></p>
</li>
</ul>
<p>We can play with this dancing many times. Proving that upgrade/downgrade works
as expected.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="some-low-level-details-introducing-meta-nerves-hub">Some low level details: introducing meta-nerves-hub<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#some-low-level-details-introducing-meta-nerves-hub" class="hash-link" aria-label="Direct link to Some low level details: introducing meta-nerves-hub" title="Direct link to Some low level details: introducing meta-nerves-hub">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="meta-nerves-hub">meta-nerves-hub<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#meta-nerves-hub" class="hash-link" aria-label="Direct link to meta-nerves-hub" title="Direct link to meta-nerves-hub">​</a></h3>
<p><a href="https://github.com/joaohf/meta-nerves-hub" target="_blank" rel="noopener noreferrer">meta-nerves-hub</a> layer is a new
layer introduced to keep common application and configurations for
<a href="https://github.com/nerves-hub" target="_blank" rel="noopener noreferrer">NervesHub</a> and
<a href="https://github.com/nerves-project" target="_blank" rel="noopener noreferrer">Nerves Project</a> working with Yocto Project.
The purpose is to bring essential and base components for anyone that wants to
use YP/Openembedded in your products.</p>
<p>meta-nerves-hub has a recipe called
<a href="https://github.com/joaohf/meta-nerves-hub/tree/master/recipes-extended/nerves-hub-link_2.5.2.bb" target="_blank" rel="noopener noreferrer">nerves-hub-link_2.5.2.bb</a>
which builds nerves-hub-link application. I had to apply two patches for
nerves-hub-link source code in order to make it work well when building inside
Yocto environment:</p>
<ul>
<li>
<p>The first one is
<a href="https://github.com/joaohf/meta-nerves-hub/blob/master/recipes-extended/nerves-hub-link/nerves-hub-link/0001-Use-MIX_TARGET_INCLUDE_ERTS-for-include-ERTS-release.patch" target="_blank" rel="noopener noreferrer">0001-Use-MIX_TARGET_INCLUDE_ERTS-for-include-ERTS-release.patch</a></p>
</li>
<li>
<p>And the second one was about using KVBackend from UbootEnv instead memory:
<a href="https://github.com/joaohf/meta-nerves-hub/blob/master/recipes-extended/nerves-hub-link/nerves-hub-link/0001-Use-UbootEnv-as-kv_backend.patch" target="_blank" rel="noopener noreferrer">0001-Use-UbootEnv-as-kv_backend.patch</a></p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="extending-nerves-hub-link-recipe">extending nerves-hub-link recipe<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#extending-nerves-hub-link-recipe" class="hash-link" aria-label="Direct link to extending nerves-hub-link recipe" title="Direct link to extending nerves-hub-link recipe">​</a></h3>
<p>The nerves-hub-link recipe is not intend for use as standalone. It's purpose is
for development and demonstration. When running nerves-hub-link it's necessary
to configure it with the correct
<a href="https://github.com/nerves-hub/nerves_hub_link?tab=readme-ov-file#connecting-your-device-to-nerveshub" target="_blank" rel="noopener noreferrer">shared secret credentials</a>.</p>
<p>To get quick results, I've extended
<a href="https://github.com/meta-erlang/meta-axon/tree/master/dynamic-layers/meta-nerves-hub/recipes-extended/nerves-hub-link/nerves-hub-link_2.5.2.bbappend" target="_blank" rel="noopener noreferrer">nerves-hub-link from meta-axon layer</a>
with the correct shared secret credentials used by my development instance on
NervesCloud.</p>
<p>For a real use of nerves-hub-link, the correct way would be creating a new
Elixir application that has nerves-hub-link as dependency and make all the
configuration needed.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The NervesCloud team are working on a pre-build agent model, which will simplify
setup and configuration.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusions">Conclusions<a href="https://meta-erlang.github.io/blog/2025/01/26/index/#conclusions" class="hash-link" aria-label="Direct link to Conclusions" title="Direct link to Conclusions">​</a></h2>
<p>I am having so much fun playing with fwup and NervesCloud that I will keep
improving this environment. Just to recap the adventures so far:</p>
<ul>
<li><a href="https://meta-erlang.github.io/blog/2024/09/24/index/">fwup for A/B image upgrades, part I</a></li>
<li><a href="https://meta-erlang.github.io/blog/2024/12/20/index/">fwup for A/B image upgrades on QEMU machines with fwup, part II</a></li>
</ul>
<p>It is all about enabling features and managing what is feasible or not. Of
course, implementing the missing parts. When building products with Yocto
Project, it is a bit like playing a
<a href="https://en.wikipedia.org/wiki/Open_world" target="_blank" rel="noopener noreferrer">open-world video game</a>. You have to
have a target in mind.</p>
<p>My plan is to continue adding more fwup configurations into meta-fwup-examples
layer in order to support more BSP layers and well know boards like raspberrypi.
Also, trying to use some other processor architectures like: riscv, ppc, mips
all running on QEMU and Yocto Project. I will stay in this loop until get
something stable.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>fwup</category>
            <category>qemu</category>
        </item>
        <item>
            <title><![CDATA[fwup for A/B image upgrades on QEMU machines with fwup, part II]]></title>
            <link>https://meta-erlang.github.io/blog/2024/12/20/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/12/20/index/</guid>
            <pubDate>Fri, 20 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This blog post describes all parts involved in order to use QEMU machines with]]></description>
            <content:encoded><![CDATA[<p>This blog post describes all parts involved in order to use QEMU machines with
Yocto images for testing and developing A/B image upgrades. Moreover, this blog
post could be considered an extension for the
<a href="https://meta-erlang.github.io/blog/2024/09/24/index/">fwup for A/B image upgrades, part I</a> blog post.</p>
<p>The <a href="https://github.com/fwup-home/fwup" target="_blank" rel="noopener noreferrer">fwup</a> tool and
<a href="https://github.com/fwup-home/meta-fwup" target="_blank" rel="noopener noreferrer">meta-fwup</a> have been introduced in the
previous blog post and serve as a base knowledge for this post.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="objectives-and-tools">Objectives and Tools<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#objectives-and-tools" class="hash-link" aria-label="Direct link to Objectives and Tools" title="Direct link to Objectives and Tools">​</a></h2>
<p>When I was writing and testing the post
<a href="https://meta-erlang.github.io/blog/2024/09/24/index/">fwup for A/B image upgrades, part I</a>, it was very
tedious have to wait the test cycle which basically was:</p>
<ol>
<li>Make one change</li>
<li>Build a new image</li>
<li>Burn the image into sdcard</li>
<li>Plug the sdcard on the target real board</li>
<li>Power on</li>
<li>Test</li>
<li>Power off</li>
<li>Get the results</li>
<li>Go to step #1</li>
</ol>
<p>I've spent too much time waiting for feedback. Since then, I've been thinking
how it would be possible to speed up my test cycle.</p>
<p>Maybe buying more target boards or reduce the final image footprint or buy a
faster build machine. None of them would help much the situation.</p>
<p>Then, I remember that one of the greatest feature from Yocto Project is the
integration with <a href="https://www.qemu.org/" target="_blank" rel="noopener noreferrer">QEMU</a> emulator. Yocto brings some
ready-to-use
<a href="https://git.yoctoproject.org/poky/tree/README.qemu.md" target="_blank" rel="noopener noreferrer">qemu machines</a> that one
could use in order to run an image made with Yocto Project and spending no
money.</p>
<p>However, some pieces were missing:</p>
<ul>
<li>The qemu default machines are not prepared for using u-boot as boot loader</li>
<li>u-boot does not know how to load environment variables from virtio block
devices</li>
<li>lack of qemu device-tree files (.dtb) when booting qemu machines</li>
</ul>
<p>It was clear that without some patches my idea of short test cycle would not be
feasible.</p>
<p>So, this blog post continues the story about
<a href="https://github.com/fwup-home/fwup" target="_blank" rel="noopener noreferrer">fwup tool</a> in Yocto world. There are two
important sections:</p>
<ul>
<li>One showing a practical use case with all steps necessary to test the A/B
upgrades with fwup on qemu u-boot.</li>
<li>A second one describing the patches and layers that I've created for booting
qemu machines with u-boot and Yocto images.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-ab-upgrades-with-qemu-u-boot-machines">Use case: A/B upgrades with QEMU u-boot machines<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#use-case-ab-upgrades-with-qemu-u-boot-machines" class="hash-link" aria-label="Direct link to Use case: A/B upgrades with QEMU u-boot machines" title="Direct link to Use case: A/B upgrades with QEMU u-boot machines">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ypoe-setup">YP/OE setup<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#ypoe-setup" class="hash-link" aria-label="Direct link to YP/OE setup" title="Direct link to YP/OE setup">​</a></h3>
<p>I'll try to simplify the YP/OE setup to just tree small steps:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The YP documentation is very good. I strong recommend its reading. For this
section the release version used is
<a href="https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html" target="_blank" rel="noopener noreferrer">master</a>.</p><p>One important point is to double check the
<a href="https://docs.yoctoproject.org/ref-manual/system-requirements.html#required-packages-for-the-build-host." target="_blank" rel="noopener noreferrer">Required Packages for the Build Host</a></p></div></div>
<ol>
<li>
<p>Cloning all repositories for master release:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/openembedded/meta-openembedded.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/fwup-home/meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-qemu-bsp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/joaohf/meta-fwup-examples</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-openembedded/meta-oe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-qemu-bsp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-fwup-examples</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-build-environment">Configuring the build environment<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#configuring-the-build-environment" class="hash-link" aria-label="Direct link to Configuring the build environment" title="Direct link to Configuring the build environment">​</a></h3>
<p>For this use case, the quickest way is edit and add the <em>conf/local.conf</em>
configuration file.</p>
<p>We start defining the MACHINE and DISTRO:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE = "qemuarm64-uboot"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRO = "poky"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The machine <em>qemuarm64-uboot</em> is provided by
<a href="https://github.com/meta-erlang/meta-qemu-bsp" target="_blank" rel="noopener noreferrer">meta-qemu-bsp</a> layer. That
machine uses u-boot as bootloader.</p>
<p>As YP/OE supports many types of image outputs, we want to be specific here and
pick only the <em>fwup</em> type.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># enable support for making fwup images</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_CLASSES += "image_types_fwup"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_FSTYPES = "fwup fwup.qcow2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The fwup type is provided by the bbclass
<a href="https://github.com/fwup-home/meta-fwup/blob/master/classes/image_types_fwup.bbclass" target="_blank" rel="noopener noreferrer">image_types_fwup.bbclass</a>.
It relies on wic image generator and uses their build artifacts for bootloader
and rootfs.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-an-image">Building an image<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#building-an-image" class="hash-link" aria-label="Direct link to Building an image" title="Direct link to Building an image">​</a></h3>
<p>Now that the configuration is over. Let's start a build:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake core-image-full-cmdline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>For this example, and demonstration purposes, we'll use the image called
<a href="https://git.yoctoproject.org/poky/tree/meta/recipes-core/images/core-image-full-cmdline.bb" target="_blank" rel="noopener noreferrer">core-image-full-cmdline</a>.</p></div></div>
<p>Once the build has finished, let's inspect the build outputs:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cd tmp/deploy/images/qemuarm64-uboot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ls -lh core-image-full-cmdline*.fw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 2 joaohf joaohf 71M dez 27 16:20 core-image-full-cmdline-qemuarm64-uboot.rootfs-20241227191846.fw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx 2 joaohf joaohf  64 dez 27 16:20 core-image-full-cmdline-qemuarm64-uboot.rootfs.fw -&gt; core-image-full-cmdline-qemuarm64-uboot.rootfs-20241227191846.fw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ls -lh core-image-full-cmdline*fwup*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 2 joaohf joaohf 1,1G dez 27 16:20 core-image-full-cmdline-qemuarm64-uboot.rootfs-20241227191846.fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 2 joaohf joaohf 199M dez 27 17:36 core-image-full-cmdline-qemuarm64-uboot.rootfs-20241227191846.fwup.qcow2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx 2 joaohf joaohf   66 dez 27 16:20 core-image-full-cmdline-qemuarm64-uboot.rootfs.fwup -&gt; core-image-full-cmdline-qemuarm64-uboot.rootfs-20241227191846.fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx 2 joaohf joaohf   72 dez 27 16:20 core-image-full-cmdline-qemuarm64-uboot.rootfs.fwup.qcow2 -&gt; core-image-full-cmdline-qemuarm64-uboot.rootfs-20241227191846.fwup.qcow2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The folder <em>tmp/deploy/images/qemuarm64-uboot</em> has many files generated from the
build tasks. We are interested on some files only:</p>
<ul>
<li>The first one with file extension .fw, is the firmware image made by fwup.
We'll use this file for A/B upgrades.</li>
<li>And the second file is the <a href="https://en.wikipedia.org/wiki/Qcow" target="_blank" rel="noopener noreferrer">qcow2</a> Yocto
image suitable for using it with QEMU when running the command <code>runqemu</code>.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="running-qemu-images-with-runqemu-script">Running QEMU images with runqemu script<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#running-qemu-images-with-runqemu-script" class="hash-link" aria-label="Direct link to Running QEMU images with runqemu script" title="Direct link to Running QEMU images with runqemu script">​</a></h3>
<p>The <a href="https://git.yoctoproject.org/poky/tree/scripts/runqemu" target="_blank" rel="noopener noreferrer">runqemu script</a> is
the official way for running QEMU with the image previously created. The scripts
accepts many QEMU parameters.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>For more details about using QEMU with Yocto, check out the official
documentation:
<a href="https://docs.yoctoproject.org/dev-manual/qemu.html" target="_blank" rel="noopener noreferrer">Using the Quick EMUlator (QEMU)</a></p></div></div>
<p>For this tutorial the follow command will be used:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu core-image-full-cmdline nographic serialstdio wic.qcow2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It starts QEMU without graphic support and with serial console attached to
stdio. The <em>wic.qcow2</em> says to runqemu that we want to boot using the
<em>core-image-full-cmdline-qemuarm64-uboot.rootfs.fwup.qcow2</em> image.</p>
<p>After running the runqemu command, we got:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ runqemu core-image-full-cmdline nographic serialstdio slirp wic.qcow2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">runqemu - INFO - Running bitbake -e  core-image-full-cmdline...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">runqemu - INFO - Continuing with the following parameters:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE: [qemuarm64-uboot]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FSTYPE: [wic.qcow2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ROOTFS: [/data-work/yocto/work/fwup/build/tmp/deploy/images/qemuarm64-uboot/core-image-full-cmdline-qemuarm64-uboot.rootfs.wic.qcow2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONFFILE: [/data-work/yocto/work/fwup/build/tmp/deploy/images/qemuarm64-uboot/core-image-full-cmdline-qemuarm64-uboot.rootfs.qemuboot.conf]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">runqemu - INFO - Setting up tap interface under sudo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">runqemu - INFO - Network configuration: ip=192.168.7.2::192.168.7.1:255.255.255.0::eth0:off:8.8.8.8 net.ifnames=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">runqemu - INFO - Running /data-work/yocto/work/fwup/build/tmp/work/x86_64-linux/qemu-helper-native/1.0/recipe-sysroot-native/usr/bin/qemu-system-aarch64 -device virtio-net-pci,netdev=net0,mac=52:54:00:1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2:34:02 -netdev tap,id=net0,ifname=tap0,script=no,downscript=no -object rng-random,filename=/dev/urandom,id=rng0 -device virtio-rng-pci,rng=rng0 -drive id=disk0,file=/data-work/yocto/work/fwup/build/tmp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/deploy/images/qemuarm64-uboot/core-image-full-cmdline-qemuarm64-uboot.rootfs.wic.qcow2,if=none,format=qcow2 -device virtio-blk-device,drive=disk0 -device qemu-xhci -device usb-tablet -device usb-kbd  -</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">machine virt -cpu cortex-a57 -smp 4 -m 256 -serial mon:stdio -serial null -nographic -device virtio-gpu-pci -bios /data-work/yocto/work/fwup/build/tmp/deploy/images/qemuarm64-uboot/u-boot.bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">runqemu - INFO - Host uptime: 26648.54</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">U-Boot 2024.10-dirty (Oct 07 2024 - 14:54:35 +0000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DRAM:  256 MiB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Core:  52 devices, 14 uclasses, devicetree: board</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Flash: 64 MiB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Loading Environment from VIRTIO_BLK... OK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">In:    serial,usbkbd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Out:   serial,vidconsole</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Err:   serial,vidconsole</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Bus xhci_pci: Register 8001040 NbrPorts 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting the controller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">USB XHCI 1.00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">scanning bus xhci_pci for devices... 3 USB Device(s) found</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Net:   eth0: virtio-net#32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hit any key to stop autoboot:  0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Saving Environment to VIRTIO_BLK... OK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">board_name=[qemu-arm] ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">21881344 bytes read in 8 ms (2.5 GiB/s)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">loading qemu.dtb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1048576 bytes read in 0 ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">debug: [console=ttyAMA0 root=/dev/vda2] ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">debug: [bootz 0x40200000 - 0x49000000] ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## Flattened Device Tree blob at 49000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   Booting using the fdt blob at 0x49000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Working FDT set to 49000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   Loading Device Tree to 000000004d491000, end 000000004d593fff ... OK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Working FDT set to 4d491000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting kernel ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x411fd070]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[    0.000000] Linux version 6.12.3-yocto-standard (oe-user@oe-host) (aarch64-poky-linux-gcc (GCC) 14.2.0, GNU ld (GNU Binutils) 2.43.1.20241111) #1 SMP PREEMPT Thu Dec 12 17:25:00 UTC 2024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Poky (Yocto Project Reference Distro) 5.1 qemuarm64-uboot ttyAMA0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">qemuarm64-uboot login:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That log above shows some very interesting points:</p>
<ul>
<li>QEMU was configure with <em>-bios</em> parameter:<!-- -->
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-bios /build/tmp/deploy/images/qemuarm64-uboot/u-boot.bin</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->Which means u-boot will be used as bootloader for linux kernel.</li>
<li>we can check that u-boot support for virtio block device is working as
expected:<!-- -->
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Loading Environment from VIRTIO_BLK... OK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Saving Environment to VIRTIO_BLK... OK</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>When logged on qemu instance, it's necessary to run the command:
<code>ifconfig eth0 192.168.7.2 netmask 255.255.255.0</code> to setup a IP address to eth0
interface.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="inspecting-a-partition">Inspecting A partition<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#inspecting-a-partition" class="hash-link" aria-label="Direct link to Inspecting A partition" title="Direct link to Inspecting A partition">​</a></h3>
<ul>
<li>
<p>partition layout:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# sfdisk -l /dev/vda</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disk /dev/vda: 1.02 GiB, 1096941568 bytes, 2142464 sectors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Units: sectors of 1 * 512 = 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sector size (logical/physical): 512 bytes / 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disklabel type: dos</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disk identifier: 0x00000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Device     Boot   Start     End Sectors   Size Id Type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/vda1  *       8192   93035   84844  41.4M  c W95 FAT32 (LBA)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/vda2         93036 1117585 1024550 500.3M 83 Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/vda3       1117586 2142135 1024550 500.3M 83 Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/vda4       2142136 3190711 1048576   512M 83 Linux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>uname</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# uname -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Linux qemuarm64-uboot 6.12.3-yocto-standard #1 SMP PREEMPT Thu Dec 12 17:25:00 UTC 2024 aarch64 GNU/Linux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>uboot variables:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# fw_printenv nerves_fw_active nerves_fw_validated nerves_fw_booted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_active=a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_validated=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_booted=1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="moving-to-b-partition">Moving to B partition<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#moving-to-b-partition" class="hash-link" aria-label="Direct link to Moving to B partition" title="Direct link to Moving to B partition">​</a></h3>
<p>Alright, partition A looks fine. Now, we want to run an upgrade using the fwup
firmware image.</p>
<p>From the build machine:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cd build/tmp/deploy/images/qemuarm64-uboot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ cat core-image-full-cmdline-qemuarm64-uboot.rootfs.fw | ssh root@192.168.7.2 'fwup -v -a -U -d /dev/vda -t upgrade.b'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, nerves_fw_active) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, nerves_fw_validated) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, a.nerves_fw_platform) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, a.nerves_fw_architecture) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: Upgrading partition B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100% [====================================] 73.74 MB in / 570.79 MB out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Elapsed time: 9.758 s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The important argument is the <code>-t upgrade.b</code> telling to fwup which partition
will be upgraded.</p>
<p>Let's also inspect u-boot environment variables. Because the task upgrade.b
should changed something there:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# fw_printenv nerves_fw_active nerves_fw_validated nerves_fw_booted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_active=b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_validated=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_booted=0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Indeed, the <em>nerves_fw_active</em> variable has changed.</p>
<p>Inside qemu, reboot the system using the <code>reboot</code> command in order to change the
partition.</p>
<p>Once the system come back, let's inspect the u-boot environment variables to
check if those variables are pointing to the B partition now.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# fw_printenv nerves_fw_active nerves_fw_validated nerves_fw_booted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_active=b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_validated=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_booted=1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And they are ok. Not only still pointing to B partition as well validated and
booted.</p>
<p>The lsblk output also proves that vda3 is mounted as root partition:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# lsblk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vda    253:0    0     1G  0 disk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-vda1 253:1    0  41.4M  0 part /boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-vda2 253:2    0 500.5M  0 part</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-vda3 253:3    0 500.5M  0 part /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`-vda4 253:4    0   238K  0 part</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="moving-from-b-to-a-partition">Moving from B to A partition<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#moving-from-b-to-a-partition" class="hash-link" aria-label="Direct link to Moving from B to A partition" title="Direct link to Moving from B to A partition">​</a></h3>
<p>Ok, looks like partition B is up and running too.</p>
<p>Now, it's time to run a second upgrade and moving back to A partition.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cd build/tmp/deploy/images/qemuarm64-uboot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ cat core-image-full-cmdline-qemuarm64-uboot.rootfs.fw | ssh root@192.168.7.2 'fwup -v -a -U -d /dev/vda -t upgrade.a'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, nerves_fw_active) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, nerves_fw_validated) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, b.nerves_fw_platform) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, b.nerves_fw_architecture) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: Upgrading partition A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100% [====================================] 73.74 MB in / 570.79 MB out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Elapsed time: 8.515 s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Again, checking u-boot variables:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# fw_printenv nerves_fw_active nerves_fw_validated nerves_fw_booted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_active=a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_validated=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_booted=0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And rebooting the system using <code>reboot</code> command in order to change the partition
to A. After the reboot, let's check what is the state of u-boot variables:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# fw_printenv nerves_fw_active nerves_fw_validated nerves_fw_booted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_active=a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_validated=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nerves_fw_booted=1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The lsblk output should point vda2 mounted as root partition:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemuarm64-uboot:~# lsblk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vda    253:0    0     1G  0 disk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-vda1 253:1    0  41.4M  0 part /boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-vda2 253:2    0 500.5M  0 part /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-vda3 253:3    0 500.5M  0 part</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`-vda4 253:4    0   238K  0 part</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It worked as expected. The system is using a rootfs from partition A.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="low-level-details">Low level details<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#low-level-details" class="hash-link" aria-label="Direct link to Low level details" title="Direct link to Low level details">​</a></h2>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>A bit more Yocto vocabulary.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="meta-qemu-bsp-layer">meta-qemu-bsp layer<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#meta-qemu-bsp-layer" class="hash-link" aria-label="Direct link to meta-qemu-bsp layer" title="Direct link to meta-qemu-bsp layer">​</a></h3>
<p>The <a href="https://github.com/meta-erlang/meta-qemu-bsp" target="_blank" rel="noopener noreferrer">meta-qemu-bsp layer</a> is a BSP
(board support package) type layer. The target is to bring some machines
extended from default Yocto QEMU machines.</p>
<p>By default, Yocto brings the following QEMU machines:</p>
<ul>
<li>ARM (qemuarm + qemuarm64)</li>
<li>x86 (qemux86 + qemux86-64)</li>
<li>PowerPC (qemuppc only)</li>
<li>MIPS (qemumips + qemumips64)</li>
</ul>
<p>These machines don't work with u-boot for instance. In order to enable u-boot,
some configuration are necessary. Thus, the following machine proveded by
meta-qemu-bsp layer were created:</p>
<ul>
<li><a href="https://github.com/meta-erlang/meta-qemu-bsp/blob/master/conf/machine/qemuarm-uboot.conf" target="_blank" rel="noopener noreferrer">qemuarm-uboot</a></li>
<li><a href="https://github.com/meta-erlang/meta-qemu-bsp/blob/master/conf/machine/qemuarm64-uboot.conf" target="_blank" rel="noopener noreferrer">qemuarm64-uboot</a></li>
</ul>
<p>A WIC file is also provided:
<a href="https://github.com/meta-erlang/meta-qemu-bsp/blob/master/wic/qemuarm-uboot-directdisk.wks" target="_blank" rel="noopener noreferrer">qemuarm-uboot-directdisk.wks</a>
and it is used when creating wic images.</p>
<p>The meta-qemu-bsp layer was design to use with any other Yocto layer. It's not
specific for fwup use cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="patching-u-boot">Patching u-boot<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#patching-u-boot" class="hash-link" aria-label="Direct link to Patching u-boot" title="Direct link to Patching u-boot">​</a></h3>
<p>The u-boot bootloader was not prepared to load environment variables from virtio
block device. So, a patch called
<a href="https://github.com/meta-erlang/meta-qemu-bsp/blob/master/recipes-bsp/u-boot/files/0001-Load-and-save-environment-from-virtio-block-device.patch" target="_blank" rel="noopener noreferrer">Load and save environment from virtio block device</a>
was developed.</p>
<p>It allows u-boot to load environment variables from virtio block device reading
data from a specific offset and size. As u-boot already provides support for
<a href="https://docs.u-boot.org/en/stable/develop/driver-model/virtio.html" target="_blank" rel="noopener noreferrer">virtio</a>,
the bits needed to load variables from virtio was easy to implement.</p>
<p>So far, this patch was not submited to u-boot upstream project.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="fwup-examples-layer">fwup examples layer<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#fwup-examples-layer" class="hash-link" aria-label="Direct link to fwup examples layer" title="Direct link to fwup examples layer">​</a></h3>
<p>A new layer called
<a href="https://github.com/joaohf/meta-fwup-examples" target="_blank" rel="noopener noreferrer">meta-fwup-examples</a> was developed
to hold fwup examples for Yocto images.</p>
<p>The process of enabling Yocto images to use fwup is not so smooth and it depends
on details like:</p>
<ul>
<li>partition layout</li>
<li>boot load paramenters</li>
<li>boot load environment scripts</li>
<li>fwup tasks</li>
<li>custom logics</li>
</ul>
<p>Then, each of these details is a combination that works for a specific target
board. Having a dedicated layer with working fwup examples helps for
demonstration and new implementations.</p>
<p>The meta-fwup-examples is also a repository of .fwup description files:</p>
<ul>
<li><a href="https://github.com/joaohf/meta-fwup-examples/blob/master/fwup/qemuarm-uboot.fwup" target="_blank" rel="noopener noreferrer">qemuarm-uboot.fwup</a></li>
<li><a href="https://github.com/joaohf/meta-fwup-examples/blob/master/fwup/qemuarm64-uboot.fwup" target="_blank" rel="noopener noreferrer">qemuarm64-uboot.fwup</a></li>
</ul>
<p>It's important to mention that I'm reusing and adapting .fwup files from
<a href="https://github.com/orgs/nerves-project" target="_blank" rel="noopener noreferrer">Nerves Project</a>.</p>
<p>The .fwup used for raspberrypi in
<a href="https://meta-erlang.github.io/blog/2024/09/24/index/">fwup for A/B image upgrades, part I</a> will be moved to
the layer meta-fwup-examples soon.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusions">Conclusions<a href="https://meta-erlang.github.io/blog/2024/12/20/index/#conclusions" class="hash-link" aria-label="Direct link to Conclusions" title="Direct link to Conclusions">​</a></h2>
<p>Yes, QEMU machines with u-boot enabled is feasible. And it will help me to
reduce time when testing/developing.</p>
<p>While the <a href="https://meta-erlang.github.io/blog/2024/09/24/index/">fwup for A/B image upgrades, part I</a> blog
post discussed fwup and meta-fwup details, this post explored how QEMU could be
used instead a real hardware for testing.</p>
<p>Now it's possible to move fowarding and try some
<a href="https://github.com/nerves-hub/nerves_hub_link" target="_blank" rel="noopener noreferrer">nerves_hub_link</a> high level
integration for A/B upgrades using <a href="https://www.nerves-hub.org/" target="_blank" rel="noopener noreferrer">nerves-hub</a>.</p>
<p>But that will be a topic for further blog posts.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>fwup</category>
            <category>qemu</category>
        </item>
        <item>
            <title><![CDATA[Introducing Gleam to meta-erlang layer]]></title>
            <link>https://meta-erlang.github.io/blog/2024/11/03/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/11/03/index/</guid>
            <pubDate>Sun, 03 Nov 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Gleam is a new language that runs on Erlang VM. As one the]]></description>
            <content:encoded><![CDATA[<p><a href="https://gleam.run/" target="_blank" rel="noopener noreferrer">Gleam</a> is a new language that runs on Erlang VM. As one the
aims of meta-erlang layer is to offer support to BEAM ecosystem in YP/OE
ecosystem
<a href="https://github.com/meta-erlang/meta-erlang/pull/340" target="_blank" rel="noopener noreferrer">gleam support has been added</a>
to meta-erlang.</p>
<p>I'm not a gleam programming. Actually, I recently discovered gleam (and its
purposes). And I'm still learning it. After watching the talk
<a href="https://www.youtube.com/watch?v=6I0IbJtUC3U" target="_blank" rel="noopener noreferrer">Keynote: Gleam's Journey on the BEAM - Hayleigh Thompson &amp; Louis Pilfold</a>
at Code BEAM Europe 2024, I give a try and add it to meta-erlang layer.</p>
<p>In this post I'll describe a simple experiment using the gleam example code
called <a href="https://github.com/gleam-lang/example-echo-server" target="_blank" rel="noopener noreferrer">example-echo-server</a>
as it is simple and easy to understand.</p>
<p>At the end of this post we will be ready to create more recipes for programs
written in glean that runs on Yocto based images.</p>
<p>Also, as gleam is the third language supported by meta-erlang the
<a href="https://github.com/meta-erlang/meta-erlang/releases" target="_blank" rel="noopener noreferrer">beamtools</a> will be updated
to also provide a gleam toolchain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="gleam-is-written-in-rust">gleam is written in rust<a href="https://meta-erlang.github.io/blog/2024/11/03/index/#gleam-is-written-in-rust" class="hash-link" aria-label="Direct link to gleam is written in rust" title="Direct link to gleam is written in rust">​</a></h2>
<p><a href="https://github.com/gleam-lang/gleam" target="_blank" rel="noopener noreferrer">Gleam</a> language is written in rust
programming language. It could be a challenge to get it working on Yocto.
However, the support for building rust programs by Yocto has been added many
releases ago (check it out here
<a href="https://git.yoctoproject.org/poky/tree/meta/recipes-devtools/rust" target="_blank" rel="noopener noreferrer">Yocto rust support</a>).
That means all the pieces and rust toolchain support to build gleam inside Yocto
were already there.</p>
<p>The
<a href="https://github.com/meta-erlang/meta-erlang/tree/master/recipes-devtools/gleam/gleam_1.5.1.bb" target="_blank" rel="noopener noreferrer">gleam.bb recipe</a>
is responsible for compiling gleam as native program (that is, a program that
runs on the build machine). The final gleam package will not be installed in the
target because gleam compiles to .beam modules (erlang modules). At the end a
software written in gleam will be just BEAM modules that runs on Erlang VM.</p>
<p>There is also a new bitbake class called
<a href="https://github.com/meta-erlang/meta-erlang/tree/master/classes/gleam.bbclass" target="_blank" rel="noopener noreferrer">gleam.bbclass</a>.
It is a class that every gleam recipe will use in order to fetch dependencies,
compile and packing.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="running-gleam-on-yocto-based-images">Running gleam on Yocto based images<a href="https://meta-erlang.github.io/blog/2024/11/03/index/#running-gleam-on-yocto-based-images" class="hash-link" aria-label="Direct link to Running gleam on Yocto based images" title="Direct link to Running gleam on Yocto based images">​</a></h2>
<p>Alright, the following is a step by step listing a fresh build session and run
the hello-gleam-echo-server using QEMU.</p>
<ol>
<li>
<p>Cloning all repositories for master:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/openembedded/meta-openembedded.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-openembedded/meta-oe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Open the configuration file <em>build/local.conf</em> and change the 'MACHINE'
variable to 'qemux86-64'</p>
</li>
<li>
<p>Add what we want to install, hello-gleam-echo-server:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append = " hello-gleam-echo-server curl"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's install curl too. Because we want to check if echo-server is working as
expected.</p>
</li>
<li>
<p>Build a minimal image for testing purposes:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Depending your build machine it could take some time. It's ok. Remember that
YP/OE builds everything from source code.</p>
</li>
<li>
<p>Let's test running the QEMU:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu core-image-minimal serialstdio nographic slirp</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>You should see the login prompt after running the runqemu command:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Poky (Yocto Project Reference Distro) 5.1 qemux86-64 ttyS0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">qemux86-64 login:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The login name is root</p>
</li>
<li>
<p>The command <code>systemctl status hello-gleam-echo-server</code> shows that echo-server
is disabled and not running</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# systemctl status hello-gleam-echo-server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">* hello-gleam-echo-server.service - gleam echo server example</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Loaded: loaded (/usr/lib/systemd/system/hello-gleam-echo-server.service; disabled; preset: disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Active: inactive (dead)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's start it with <code>systemctl start hello-gleam-echo-server</code></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# systemctl start hello-gleam-echo-server</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And check again with <code>systemctl status</code></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# systemctl status hello-gleam-echo-server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">* hello-gleam-echo-server.service - gleam echo server example</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Loaded: loaded (/usr/lib/systemd/system/hello-gleam-echo-server.service; disabled; preset: disabled)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Active: active (running) since Mon 2024-11-04 00:26:37 UTC; 1s ago</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Invocation: 721b391508544a27bdacd484d3f35be3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Main PID: 239 (entrypoint.sh)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   Tasks: 26 (limit: 255)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Memory: 51.1M (peak: 51.5M)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     CPU: 3.043s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  CGroup: /system.slice/hello-gleam-echo-server.service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          |-239 /bin/sh /usr/lib/hello-gleam-echo-server/entrypoint.sh run</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          |-241 /usr/lib/erlang/erts-15.1.2/bin/beam.smp -- -root /usr/lib/erlang -bindir /usr/lib/erlang/erts-15.1.2/bin -progname erl -- -- -pa /usr/lib/hello-gleam-echo-server/elli/ebin /usr/lib/hello-gleam-echo-server/gleam_e...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          `-247 erl_child_setup 1024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Nov 04 00:26:37 qemux86-64 systemd[1]: Started gleam echo server example.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That looks really good. We can see that systemd is happy and tracking the
beam.smp process.</p>
</li>
<li>
<p>Calling curl to check if echo-server is working. We want to reach the
function hello from
<a href="https://github.com/gleam-lang/example-echo-server/blob/main/src/reply/web.gleam#L32" target="_blank" rel="noopener noreferrer">web.gleam</a>
source code:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# curl -X POST -d 'Hello, Gleam!' http://localhost:3000/echo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hello, Gleam!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<p>That's amazing and it's working as expected.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hello-gleam-echo-server-explained">hello-gleam-echo-server explained<a href="https://meta-erlang.github.io/blog/2024/11/03/index/#hello-gleam-echo-server-explained" class="hash-link" aria-label="Direct link to hello-gleam-echo-server explained" title="Direct link to hello-gleam-echo-server explained">​</a></h2>
<p>A bit more about bitbake, recipes and how gleam recipes works.</p>
<p>The snippet below shows the recipe
<a href="https://github.com/meta-erlang/meta-erlang/tree/master/recipes-examples/hello-gleam-echo-server/hello-gleam-echo-server_0.1.0.bb" target="_blank" rel="noopener noreferrer">hello-gleam-echo-server</a>.
Thanks to gleam.bbclass the recipe is short and declarative.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SUMMARY = "An example Gleam web application "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SECTION = "examples"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LICENSE = "Apache-2.0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIC_FILES_CHKSUM = "file://LICENCE;md5=bd052113ed5b73a32ff7cf9f42c3265c"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">S = "${WORKDIR}/git"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCREV = "94f29a84dc82ed4e7878d4027fd27acacdb8be84"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PV = "0.1.0+git${SRCPV}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRC_URI = "git://github.com/gleam-lang/example-echo-server;branch=main;protocol=https \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           file://hello-gleam-echo-server.service"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">inherit gleam systemd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">do_install:append() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if ${@bb.utils.contains('DISTRO_FEATURES','systemd','true','false',d)}; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        install -d ${D}${systemd_unitdir}/system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        install -m 0644 ${UNPACKDIR}/hello-gleam-echo-server.service ${D}${systemd_unitdir}/system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SYSTEMD_SERVICE:${PN} = "hello-gleam-echo-server.service"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SYSTEMD_AUTO_ENABLE = "disable"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This recipe instructs bitbake to fetch the example-echo-server source code,
build it and install some systemd scripts in order to start the
example-echo-server on target machine.</p>
<p>The systemd script is very simple:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[Unit]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Description=gleam echo server example</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[Service]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WorkingDirectory=/usr/lib/hello-gleam-echo-server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ExecStart=/usr/lib/hello-gleam-echo-server/entrypoint.sh run</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[Install]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WantedBy=multi-user.target</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It just "runs" the entrypoint.sh script. The entrypoint.sh was created by gleam
tooling. The recipe takes care of installing the echo-server artifacts at
<em>/usr/lib/hello-gleam-echo-server</em>.</p>
<p>For more details, I recommend checking out the bitbake class
<a href="https://github.com/meta-erlang/meta-erlang/tree/master/classes/gleam.bbclass" target="_blank" rel="noopener noreferrer">gleam.bbclass</a>.</p>]]></content:encoded>
            <category>meta-erlang</category>
        </item>
        <item>
            <title><![CDATA[Running Erlang/OTP test suite on target with ptest]]></title>
            <link>https://meta-erlang.github.io/blog/2024/10/12/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/10/12/index/</guid>
            <pubDate>Sat, 12 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[ptest (package test) means packaging and installing runtime tests that are]]></description>
            <content:encoded><![CDATA[<p>ptest (package test) means packaging and installing runtime tests that are
included in many upstream packages. At the end of the day it runs Erlang/OTP
cross compiled test suite on the target hardware. The aim is to detect a range
of problems when running test suites on different combinations of architecture
processors and libc.</p>
<p>The Erlang/OTP howto about
<a href="https://github.com/erlang/otp/blob/master/HOWTO/TESTING.md" target="_blank" rel="noopener noreferrer">TESTING.md</a>
explains most of the details when running tests. While the Yocto's documentation
about
<a href="https://docs.yoctoproject.org/dev-manual/packages.html#testing-packages-with-ptest" target="_blank" rel="noopener noreferrer">Testing Packages With ptest</a>
explains the ptest configuration.</p>
<p>So, this post is about how to run those tests using ptest approach on Yocto
builds.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-ptest-work-">How does ptest work ?<a href="https://meta-erlang.github.io/blog/2024/10/12/index/#how-does-ptest-work-" class="hash-link" aria-label="Direct link to How does ptest work ?" title="Direct link to How does ptest work ?">​</a></h2>
<p>Recipes with ptest enabled includes a shell script called <em>run-ptest</em> with the
steps necessary to start the test suite provided by the target software (e.g.:
Erlang/OTP).</p>
<p>The run-ptest script is responsible for starting the test suite and
consolidating the test results into a single format. The format is the
<a href="https://www.gnu.org/software/automake/manual/automake.html#Simple-Tests" target="_blank" rel="noopener noreferrer">automake simple test</a>
format:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">result: testName</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Where: <em>result</em> is one of PASS, FAIL or SKIP and <em>testName</em> can be anything.</p>
<p>The erlang recipe from meta-erlang layer supports ptest. And, when activated,
the package erlang-ptest is installed into the final image. It has the erlang
test suite cross compiled and ready to be executed.</p>
<p>When ptest for erlang recipe gets executed, it finishes the erlang test suite
configuration and starts to run each test configured in run-ptest script.</p>
<p>The Erlang/OTP requires several hours to finish. Because of that, ptest for
erlang just executes a small set of all tests available (currently only
<em>emulator</em> and <em>kernel</em> tests are enabled).</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>To get a better idea about how to run Erlang/OTP test suites the documentation
<a href="https://github.com/erlang/otp/blob/master/HOWTO/TESTING.md" target="_blank" rel="noopener noreferrer">TESTING.md</a>,
specially the session Running the tests.</p></div></div>
<p>The erlang-ptest package installs the test suite and also the run-ptest script
at <em>/usr/lib/erlang/ptest</em> folder.</p>
<p>One point very important is that Erlang/OTP test suites need some tools
installed into the target image in order to execute some tests. For example, to
run emulator and kernel tests the target OS needs tmux and openssh packages.
However the erlang recipe takes care of these details.</p>
<p>Each test suite might require additional packages. As there is no documentation
describing all the requirements the best strategy is to inspect the test suite
for each Erlang/OTP application
(<a href="https://github.com/erlang/otp/tree/master/lib" target="_blank" rel="noopener noreferrer">lib/*/test</a> and
<a href="https://github.com/erlang/otp/tree/master/erts/test" target="_blank" rel="noopener noreferrer">erts/test</a> folders).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="running-erlangotp-ptest">Running Erlang/OTP ptest<a href="https://meta-erlang.github.io/blog/2024/10/12/index/#running-erlangotp-ptest" class="hash-link" aria-label="Direct link to Running Erlang/OTP ptest" title="Direct link to Running Erlang/OTP ptest">​</a></h2>
<p>Yocto provides some configuration when enabling ptest. As it is only relevant
for testing purposes.</p>
<p>A specific image feature exists that enables ptest. So, in the local.conf
configuration file:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># ptest image</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EXTRA_IMAGE_FEATURES += "ptest-pkgs"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is all that is necessary to do in order to enable ptest build.</p>
<p>As we want to install erlang in the final image, we also need to add it to the
final image. On build/local.conf configuration file:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># installing erlang and elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append:pn-core-image-minimal = " erlang erlang-modules-dev elixir elixir-modules-dev links"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The <em>links</em> package here is necessary to open HTML common test reports from
console.</p></div></div>
<p>It's ready to build the core-image-minimal image:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And, for testing purposes, run the generated image using qemu emulator:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu slirp kvm nographic serialstdio core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Logging into the running system and execute ptest for erlang:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Poky (Yocto Project Reference Distro) 5.1 qemux86-64 ttyS0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">qemux86-64 login: root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WARNING: Poky is a reference Yocto Project distribution that should be used for</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">testing and development purposes only. It is recommended that you create your</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">own distribution for production use.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# ptest-run erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The script /usr/lib/erlang/ptest/run-ptest starts execute controlled by the
application called <a href="https://git.yoctoproject.org/ptest-runner2/" target="_blank" rel="noopener noreferrer">ptest runner</a>.
After several hours we get the following results:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">START: ptest-runner</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2024-10-14T17:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BEGIN: /usr/lib/erlang/ptest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAIL: emulator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">... lots of console messages ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAIL: kernel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">... lots of console messages ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=== common test Summary ===</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Testing tests.emulator_test: TEST COMPLETE, 2112 ok, 4 failed, 82 skipped of 2198 test cases</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Testing tests.kernel_test: TEST COMPLETE, 1338 ok, 20 failed, 293 skipped of 1651 test cases</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=== Test Summary ===</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TOTAL: 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PASSED: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAILED: 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DURATION: 5822</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">END: /usr/lib/erlang/ptest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2024-10-14T01:39</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">STOP: ptest-runner</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TOTAL: 1 FAIL: 0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well, we got 4 fails for emulator tests and 20 fails for kernel tests. Not bad,
but I don't know if it is also good.</p>
<p>For further inspection, it's possible to also check output messages for each
test. The run-ptest script writes a specific log console for each test executed:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# ls /usr/lib/erlang/ptest/ -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total 14680</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r--  1 root root   236964 Oct 14 00:40 erlang_ptest_emulator_20241014-000215.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r--  1 root root 14770546 Oct 14 01:39 erlang_ptest_kernel_20241014-004016.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x  1 root root      807 Oct 14 00:01 run-ptest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x 39 root root     4096 Apr  5  2011 tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As usual when running common tests (remember Erlang/OTP test suites are just
common tests), the HTML reports were written at
<em>/usr/lib/erlang/ptest/tests/test_server/index.html</em>. Opening it with links
command to check the results:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">links /usr/lib/erlang/ptest/tests/test_server/index.html</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ptest produces a lot of data to inspect.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="running-elixir-ptest">Running Elixir ptest<a href="https://meta-erlang.github.io/blog/2024/10/12/index/#running-elixir-ptest" class="hash-link" aria-label="Direct link to Running Elixir ptest" title="Direct link to Running Elixir ptest">​</a></h2>
<p>The steps for running elixir ptest are almost the same for erlang. We just call
ptest-run with the argument elixir:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# ptest-run elixir</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The above command runs elixir ptest and reports some results:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">START: ptest-runner</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2024-10-18T02:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BEGIN: /usr/lib/elixir/ptest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PASS: erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAIL: stdlib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PASS: ex_unit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAIL: logger</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PASS: eex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAIL: mix</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAIL: iex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=== Test Summary ===</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TOTAL: 7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PASSED: 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FAILED: 4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DURATION: 148</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">END: /usr/lib/elixir/ptest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2024-10-18T02:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">STOP: ptest-runner</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TOTAL: 1 FAIL: 0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For further inspection, it's possible to also check output messages for each
test. The run-ptest script writes a specific log console for each test executed:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# ls /usr/lib/elixir/ptest/ -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total 64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x 6 root root  4096 Apr  5  2011 elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 root root   840 Oct 18 02:28 elixir_ptest_eex_20241018-022812.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 root root   323 Oct 18 02:27 elixir_ptest_erlang_20241018-022744.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 root root  1156 Oct 18 02:28 elixir_ptest_ex_unit_20241018-022806.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 root root  4230 Oct 18 02:30 elixir_ptest_iex_20241018-023005.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 root root  2648 Oct 18 02:28 elixir_ptest_logger_20241018-022810.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 root root 11243 Oct 18 02:30 elixir_ptest_mix_20241018-022814.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 1 root root 16895 Oct 18 02:28 elixir_ptest_stdlib_20241018-022745.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x 1 root root   950 Oct 18 02:27 run-ptest</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Again, ptest produces a lot of data to inspect.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-running-ptest-for-erlangotp-on-yocto-builds-is-important-">Why running ptest for Erlang/OTP on Yocto builds is important ?<a href="https://meta-erlang.github.io/blog/2024/10/12/index/#why-running-ptest-for-erlangotp-on-yocto-builds-is-important-" class="hash-link" aria-label="Direct link to Why running ptest for Erlang/OTP on Yocto builds is important ?" title="Direct link to Why running ptest for Erlang/OTP on Yocto builds is important ?">​</a></h2>
<p>Now that we know what is ptest. Given the following question:</p>
<blockquote>
<p>How do we know that a cross compiled Erlang/OTP build really works on the
target hardware ?</p>
</blockquote>
<p>The answer could be: testing it using tests provided by Erlang/OTP source code.</p>
<p>So, ptest is great for detecting problems.</p>
<p>As ptest has the ability of running Erlang/OTP test suites on the final image
and reporting the results, we can get a baseline when comparing tests executed
on different combinations of processor architectures and C standard libraries
(libc) or any other aspect like different linux kernel versions. It's possible
to detect regressions or find weak spots not covered by tests in a specific
platform.</p>
<p>Also, the mechanism of executing those tests is simple. The user does not need
to be an Erlang expert to check that something is not ok on some platform.</p>]]></content:encoded>
            <category>meta-erlang</category>
        </item>
        <item>
            <title><![CDATA[Anatomy of erlang and elixir packages for YP/OE]]></title>
            <link>https://meta-erlang.github.io/blog/2024/10/06/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/10/06/index/</guid>
            <pubDate>Sun, 06 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Usually, when designing a linux distribution using YP/OE we want a slim image]]></description>
            <content:encoded><![CDATA[<p>Usually, when designing a linux distribution using YP/OE we want a slim image
with only what we need to run a specific application (or applications). In this
post we'll discuss a bit about erlang and elixir packages that meta-erlang layer
provides.</p>
<p>It's important to know how the packages are divided into smaller ones in order
to offer a better composition when creating linux distributions with YP/OE.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="environment-setup">Environment setup<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#environment-setup" class="hash-link" aria-label="Direct link to Environment setup" title="Direct link to Environment setup">​</a></h2>
<ol>
<li>
<p>Cloning all repositories for master branch:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/openembedded/meta-openembedded.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch master https://github.com/meta-erlang/meta-axon</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-openembedded/meta-oe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-axon</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Configure the <code>conf/local.conf</code> and enable multiconfig builds:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># debug-tweaks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EXTRA_IMAGE_FEATURES ?= "debug-tweaks"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">USER_CLASSES ?= "buildhistory buildstats"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BUILDHISTORY_COMMIT = "1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PACKAGE_CLASSES = "package_ipk"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PATCHRESOLVE = "noop"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INHERIT += "rm_work"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RM_WORK_EXCLUDE = "erlang erlang-native nativesdk-erlang"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># diskmon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BB_DISKMON_DIRS = "\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STOPTASKS,${TMPDIR},1G,100K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STOPTASKS,${DL_DIR},1G,100K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STOPTASKS,${SSTATE_DIR},1G,100K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    STOPTASKS,/tmp,100M,100K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HALT,${TMPDIR},100M,1K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HALT,${DL_DIR},100M,1K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HALT,${SSTATE_DIR},100M,1K \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HALT,/tmp,10M,1K"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># general config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SDKMACHINE = "x86_64"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONNECTIVITY_CHECK_URIS = "https://www.google.com/"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># qemu configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PACKAGECONFIG:append:pn-qemu-system-native = " sdl"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PACKAGECONFIG:append:pn-qemu-system-native = " gtk+"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># systemd only</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INIT_MANAGER = "systemd"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE ??= "qemuarm"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRO ??= "poky"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BBMULTICONFIG ?= "qemux86-64-erlang-elixir qemuarm64-erlang-elixir qemuarm-erlang-elixir qemux86-erlang-elixir qemux86-64-x32-erlang-elixir"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># To disable QA checks for https://github.com/meta-erlang/meta-erlang/issues/328</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ERROR_QA:remove = "buildpaths"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="multiconfig-build">multiconfig build<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#multiconfig-build" class="hash-link" aria-label="Direct link to multiconfig build" title="Direct link to multiconfig build">​</a></h2>
<p>YP/OE provides a smart way to build the same image (or different images) for
multiple targets. It is called multiconfig build and it is fully described at
<a href="https://docs.yoctoproject.org/dev-manual/building.html?highlight=multiconfig#building-images-for-multiple-targets-using-multiple-configurations" target="_blank" rel="noopener noreferrer">Building Images for Multiple Targets Using Multiple Configurations</a>.</p>
<p>Four our context, don't forget to checkout the section
<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#environment-setup">Environment setup</a>, we need to compare the erlang and
elixir packages using different processor architectures (<em>MACHINES</em> in YP/OE
language).</p>
<p>We can build five targets using the command below:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemux86-64-erlang-elixir:core-image-minimal \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemux86-erlang-elixir:core-image-minimal \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemuarm-erlang-elixir:core-image-minimal \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemuarm64-erlang-elixir:core-image-minimal \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    multiconfig:qemux86-64-x32-erlang-elixir:core-image-minimal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The multiconfig build was configured to create a specific TMPDIR for each
processor architecture. Then, the final results at build folder will be one
folder for each architecture:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemuarm64-glibc-erlang-elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemuarm-glibc-erlang-elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemux86-64-glibc-erlang-elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemux86-64-glibc-x32-erlang-elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp-qemux86-glibc-erlang-elixir</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That way, it's easy to navigate into the final output files.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introspection-with-buildhistory">Introspection with buildhistory<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#introspection-with-buildhistory" class="hash-link" aria-label="Direct link to Introspection with buildhistory" title="Direct link to Introspection with buildhistory">​</a></h2>
<p>The buildhistory is a YP/OE feature that writes some meta data into a git
repository for further inspection. Then, it's possible check and interact with
files using standard linux tools like find and grep to collect insights. Using
buildhistory is a shortcut because we can inspect how files would be installed
into the final image, without having to burn the image and boot it on a real (or
virtual) target.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Check out the
<a href="https://docs.yoctoproject.org/5.0.3/dev-manual/build-quality.html?highlight=buildhistory#enabling-and-disabling-build-history" target="_blank" rel="noopener noreferrer">Enabling and Disabling Build History</a>
instructions for how to enable buildhistory.</p></div></div>
<p>In this post we are interested in check the size of erlang and elixir packages.</p>
<p>After a success build and from the YP/OE build folder, it's possible to explore
the buildhistory git repository:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd buildhistory/packages/cortexa57-poky-linux/erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find -name latest -print0 | xargs -0 grep PKGSIZE | sort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd -</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd buildhistory/packages/cortexa57-poky-linux/elixir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find -name latest -print0 | xargs -0 grep PKGSIZE | sort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>PKGSIZE</code> gives to us the size in bytes of the final packages generated by
erlang and elixir recipes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ypoe-packaging-for-erlang-and-elixir-recipes">YP/OE packaging for erlang and elixir recipes<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#ypoe-packaging-for-erlang-and-elixir-recipes" class="hash-link" aria-label="Direct link to YP/OE packaging for erlang and elixir recipes" title="Direct link to YP/OE packaging for erlang and elixir recipes">​</a></h2>
<p>The nature of Erlang/OTP is to isolate erlang modules into applications. The
Erlang/OTP source code embraces this philosophy and it is natural to transform
each application into an installed package (IPK, DEB, RPM). For that,
meta-erlang uses a simple script that creates a recipe manifest (see
<a href="https://github.com/meta-erlang/meta-erlang/blob/cb94887c108b63c6cba290cb019468f246df5ea4/scripts/contrib/erlang/generate-manifest#L76" target="_blank" rel="noopener noreferrer">erlang recipe manifest</a>
for details).</p>
<p>An erlang recipe manifest, for example
<a href="https://github.com/meta-erlang/meta-erlang/blob/cb94887c108b63c6cba290cb019468f246df5ea4/recipes-devtools/erlang/erlang-27.1-manifest.inc" target="_blank" rel="noopener noreferrer">erlang-27.1-manifest.inc</a>,
declares each Erlang/OTP application. For each application there are five
packages:</p>
<ul>
<li><code>application_name-doc</code>: documentation, man pages and examples</li>
<li><code>application_name-dbg</code>: debug symbols, if any</li>
<li><code>application_name-dev</code>: development C headers, shared libraries (*.so)</li>
<li><code>application_name-staticdev</code>: static libraries (*.a)</li>
<li><code>application_name</code>: BEAM modules and files from <code>priv</code> folder</li>
</ul>
<p>Where <code>application_name</code> is the name of the application like: kernel, stdlib,
sasl, ...</p>
<p>This separation is necessary because YP/OE splits the package of any recipe into
doc, dbg, dev and staticdev. Then, the user have more control about what will be
installed into the final image.</p>
<p>The elixir recipe follows the same way, but simpler (check out the
<a href="https://github.com/meta-erlang/meta-erlang/blob/cb94887c108b63c6cba290cb019468f246df5ea4/recipes-devtools/elixir/elixir.inc" target="_blank" rel="noopener noreferrer">elixir.inc</a>
include file).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="special-metapackages">Special metapackages<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#special-metapackages" class="hash-link" aria-label="Direct link to Special metapackages" title="Direct link to Special metapackages">​</a></h3>
<p>As there are many packages for erlang and elixir, sometimes we need to setup a
development environment will all erlang and elixir packages installed. Or a
minimum set of packages. There are a couple of metapackages created for that
purpose:</p>
<ul>
<li>erlang-modules: install <em>all</em> Erlang/OTP applications</li>
<li>erlang-modules-dev: install <em>all</em> Erlang/OTP applications development packages</li>
<li>elixir-modules: install <em>all</em> elixir applications</li>
<li>elixir-modules-dev: install <em>all</em> elixir applications development packages</li>
<li>erlang: install the minimal Erlang/OTP applications</li>
<li>elixir: install the minimal elixir applications</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="where-the-files-get-installed-">Where the files get installed ?<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#where-the-files-get-installed-" class="hash-link" aria-label="Direct link to Where the files get installed ?" title="Direct link to Where the files get installed ?">​</a></h3>
<p>The best way to awnser this is to take a look into buildhistory data.</p>
<p>At the build folder there is a folder called buildhistory. That folder is split
by images and packages. And for each architecture, there is a specific folder.
So, let's check the first 20 lines from file: files-in-packages.txt for
erlang-erts package:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">head -n 20 buildhistory/packages/core2-32-poky-linux/erlang/erlang-erts/files-in-package.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               22 ./usr/bin/epmd -&gt; ../lib/erlang/bin/epmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               21 ./usr/bin/erl -&gt; ../lib/erlang/bin/erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               25 ./usr/bin/escript -&gt; ../lib/erlang/bin/escript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               25 ./usr/bin/run_erl -&gt; ../lib/erlang/bin/run_erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               24 ./usr/bin/to_erl -&gt; ../lib/erlang/bin/to_erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drwxr-xr-x root       root             4096 ./usr/lib/erlang/bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx root       root               21 ./usr/lib/erlang/bin/epmd -&gt; ../erts-15.1/bin/epmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root             1474 ./usr/lib/erlang/bin/erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root           140752 ./usr/lib/erlang/bin/erl_call</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root            38456 ./usr/lib/erlang/bin/escript</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             6860 ./usr/lib/erlang/bin/no_dot_erlang.boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root            25996 ./usr/lib/erlang/bin/run_erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root             1745 ./usr/lib/erlang/bin/start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             6885 ./usr/lib/erlang/bin/start.boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- root       root             6885 ./usr/lib/erlang/bin/start_clean.boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rwxr-xr-x root       root             1244 ./usr/lib/erlang/bin/start_erl</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="erlang-package-sizes">erlang package sizes<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#erlang-package-sizes" class="hash-link" aria-label="Direct link to erlang package sizes" title="Direct link to erlang package sizes">​</a></h2>
<p>When installing the metapackage called <code>erlang</code> the following packages will be
automatically installed:</p>
<ul>
<li>erlang-erts</li>
<li>erlang-kernel</li>
<li>erlang-stdlib</li>
<li>erlang-sasl</li>
</ul>
<p>These packages are the basic ones needed in order to run Erlang programs.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Actually, your application is in charge of making a proper Erlang/OTP
release. Installing the package <code>erlang</code> is an option if you need it installed
into standard locations. Otherwise, your application should produce a valide
release with a builtin ERTS inside.</p></div></div>
<p>The following charts are listed below to get a view about the size of those
basic erlang packages.</p>
<p>The difference between each build, besides the processor architecture, is the
size in bytes of the package erlang-erts. That makes sense because that package
is the ERTS (which is architecture dependent, like word size). On other hand,
the packages kernel, stdlib, sasl have the same size across all builds.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemux86">qemux86<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemux86" class="hash-link" aria-label="Direct link to qemux86" title="Direct link to qemux86">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:qemux86-erlang-elixir:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemux86-64">qemux86-64<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemux86-64" class="hash-link" aria-label="Direct link to qemux86-64" title="Direct link to qemux86-64">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:qemux86-64-erlang-elixir:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemux86-64-with-x32-psabi">qemux86-64 with x32 psABI<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemux86-64-with-x32-psabi" class="hash-link" aria-label="Direct link to qemux86-64 with x32 psABI" title="Direct link to qemux86-64 with x32 psABI">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:x86_64_x32-poky-linux-gnux32:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Enabling x32 psABI should be considered if your application needs to
handle 64-bit features, but you can't afford wasting space with addressing. See
the blog post <a href="https://meta-erlang.github.io/blog/2023/09/02/index/">Exploring x32 psABI for Erlang/OTP</a>.</p><p>The package size difference in bytes between x32 build and a normal x86-64
is 4615556.</p></div></div>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemuarm64">qemuarm64<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemuarm64" class="hash-link" aria-label="Direct link to qemuarm64" title="Direct link to qemuarm64">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:qemuarm64-erlang-elixir:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="qemuarm">qemuarm<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#qemuarm" class="hash-link" aria-label="Direct link to qemuarm" title="Direct link to qemuarm">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake -c build multiconfig:qemuarm-erlang-elixir:core-image-minimal</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="elixir-package-sizes">elixir package sizes<a href="https://meta-erlang.github.io/blog/2024/10/06/index/#elixir-package-sizes" class="hash-link" aria-label="Direct link to elixir package sizes" title="Direct link to elixir package sizes">​</a></h2>
<p>When installing the metapackage called <code>elixir</code> the following packages will be
automatically installed:</p>
<ul>
<li>erlang (see <a href="https://meta-erlang.github.io/blog/2024/10/06/index/#erlang-package-sizes">erlang package size for details</a>)</li>
<li>erlang-compiler</li>
</ul>
<p>That is because elixir package needs erlang (erts, kernel, stdlib and sasl)
installed. And, the erlang compiler is also a requirement.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Again, your application should manage a release for best results.
Installing the package <code>elixir</code> only makes sense for testing purposes.</p></div></div>
<p>The following table summarizes the packages sizes per processor architecture.</p>
<table><thead><tr><th>Processor architecture</th><th>Package size in bytes</th></tr></thead><tbody><tr><td>core2-32-poky-linux (qemux86)</td><td>5760108</td></tr><tr><td>core2-64-poky-linux (qemux86-64)</td><td>5760368</td></tr><tr><td>qemux86-64-x32-erlang-elixir</td><td>5763392</td></tr><tr><td>cortexa57-poky-linux (qemuarm64)</td><td>5760476</td></tr><tr><td>cortexa15t2hf-neon-poky-linux-gnueabi</td><td>5764076</td></tr></tbody></table>
<p>There are slight size differences. It should not as there is no architecture
dependency on elixir beam files.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>x32</category>
        </item>
        <item>
            <title><![CDATA[fwup for A/B image upgrades, part I]]></title>
            <link>https://meta-erlang.github.io/blog/2024/09/24/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/09/24/index/</guid>
            <pubDate>Tue, 24 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This blog post is a tutorial about how to make A/B software updates with fwup]]></description>
            <content:encoded><![CDATA[<p>This blog post is a tutorial about how to make A/B software updates with fwup
tool and Yocto Project.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="objectives-and-tools">Objectives and Tools<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#objectives-and-tools" class="hash-link" aria-label="Direct link to Objectives and Tools" title="Direct link to Objectives and Tools">​</a></h2>
<p>A short sentence as requirement for this tutorial is:</p>
<blockquote>
<p>I wish to make an image using Yocto Project and be able to run software
updates using A/B approach.</p>
</blockquote>
<p>There are many references on the Internet for A/B software updates. It's a
well-known approach with many different implementations. In short it's strategy
to minimize downtime when changing the firmware of embedded devices. While the
new software gets written to the unused slot and the current slot is still
running. When everything are ready to swap, the system gets restarted. Booting
using the unused slot (now it becomes the current slot).</p>
<p>So, in this blog post we are going to play with A/B software updates using fwup
tool.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-fwup-">What is fwup ?<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#what-is-fwup-" class="hash-link" aria-label="Direct link to What is fwup ?" title="Direct link to What is fwup ?">​</a></h2>
<p>The best <a href="https://github.com/fwup-home/fwup" target="_blank" rel="noopener noreferrer">fwup</a> definition is from its
official project home:</p>
<blockquote>
<p>fwup is a configurable image-based software update utility for embedded
Linux-based systems. It primarily supports software upgrade strategies that
update entire root filesystem images at once. This includes strategies like
swapping back and forth between A and B partitions, recovery partitions, and
various trial update/failback scenarios. All software update information is
combined into a ZIP archive that may optionally be cryptographically signed.
fwup has minimal dependencies and runtime requirements. Scripts are
intentionally limited to make failure scenarios easier to reason about.
Distribution of software update archives is not a feature. Users can call out
to fwup to run upgrades from external media, stream them from the network, or
script them using a tool like Ansible if so desired.</p>
</blockquote>
<p>In practice, fwup is simple and easy to use.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ypoe-setup">YP/OE setup<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#ypoe-setup" class="hash-link" aria-label="Direct link to YP/OE setup" title="Direct link to YP/OE setup">​</a></h2>
<p>I'll try to simplify the YP/OE setup to just tree small steps:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The YP documentation is very good. I strong recommend its reading. For this
section the release version used is
<a href="https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html" target="_blank" rel="noopener noreferrer">scarthgap</a>.</p><p>One important point is to double check the
<a href="https://docs.yoctoproject.org/ref-manual/system-requirements.html#required-packages-for-the-build-host." target="_blank" rel="noopener noreferrer">Required Packages for the Build Host</a></p></div></div>
<ol>
<li>
<p>Cloning all repositories for scarthgap release:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap git://git.yoctoproject.org/poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/openembedded/meta-openembedded.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/fwup-home/meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/meta-erlang/meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/meta-erlang/meta-axon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git clone --branch scarthgap https://github.com/agherzan/meta-raspberrypi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Source the init build environment script:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd poky</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source oe-init-build-env ../build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Add the needed layers:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-openembedded/meta-oe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-erlang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-axon</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-fwup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bitbake-layers add-layer ../meta-raspberrypi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<p>Why five layers are needed ? Because the YP/OE approach is to isolate components
into layer in order to maximize the software reusability.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-the-build-environment">Configuring the build environment<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#configuring-the-build-environment" class="hash-link" aria-label="Direct link to Configuring the build environment" title="Direct link to Configuring the build environment">​</a></h2>
<p>For this tutorial, the quickest way is edit and add the <em>conf/local.conf</em>
configuration file.</p>
<p>We start defining the MACHINE and DISTRO:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE = "raspberrypi0-wifi"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DISTRO = "poky"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The layer
<a href="https://meta-raspberrypi.readthedocs.io/en/latest/readme.html" target="_blank" rel="noopener noreferrer">meta-raspberry</a>
provides the machine <em>raspberrypi0-wifi</em> which is what I'm using for this
demonstration as my current development board is a raspberry pi 0.</p>
<p>Next, we need to enable some raspberry features like UART and USB host support
(it's important to get some network connectivity):</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://meta-raspberrypi.readthedocs.io/en/latest/extra-build-config.html#enable-uart</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENABLE_UART = "1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://meta-raspberrypi.readthedocs.io/en/latest/extra-build-config.html#enable-usb-host-support</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENABLE_DWC2_PERIPHERAL = "1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># add some package to allow networking</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append = " raspi2go kernel-module-libcomposite kernel-module-g-ether kernel-module-dwc2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As YP/OE supports many types of image outputs, we want to be specific here and
pick only the <em>fwup</em> type.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># enable support for making fwup images</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_CLASSES += "image_types_fwup"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_FSTYPES = "fwup"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The fwup type is provided by the bbclass
<a href="https://github.com/fwup-home/meta-fwup/blob/master/classes/image_types_fwup.bbclass" target="_blank" rel="noopener noreferrer">image_types_fwup.bbclass</a>.
It relies on wic image generator and uses their build artifacts for bootloader
and rootfs.</p>
<p>Ok, now we also want to include Erlang/OTP and Elixir. As meta-erlang provides
many versions, I recommend to stick with a specific one. In our case the latest
1.17.x and 27.0.x are good:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># select specific elixir and erlang versions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_elixir = "1.17%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_elixir-native = "1.17%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_nativesdk-elixir = "1.17%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_erlang = "27.0%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_erlang-native = "27.0%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_nativesdk-erlang = "27.0%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Finally, add erlang and elixir to the image:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># add erlang and elixir into image</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append = " erlang elixir"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now that the configuration is over. Let's start a build:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake core-image-full-cmdline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>It might take some time for the first build. As YP/OE will build everything from
scratch. The next builds should be faster.</p></div></div>
<p>Once the build has finished, let's inspect the build outputs:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd tmp/deploy/images/raspberrypi0-wifi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ls -l core-image-full-cmdline*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-r--r-- 2 builder builder 68465478 Sep 24 21:19 core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx 2 builder builder       66 Sep 24 21:19 core-image-full-cmdline-raspberrypi0-wifi.rootfs.fw -&gt; core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The folder <em>tmp/deploy/images/raspberrypi0-wifi</em> has many files generated from
the build tasks. We are interested only the final .fw file. In this case we the
file <em>core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw</em> is
what we need.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="deploying-fw-images">Deploying .fw images<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#deploying-fw-images" class="hash-link" aria-label="Direct link to Deploying .fw images" title="Direct link to Deploying .fw images">​</a></h2>
<p>Before deploying, let's understand a bit the image partition layout created by
YP/OE and fwup tool:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | MBR                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | Firmware configuration data|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | (formatted as uboot env)   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p0*: Boot A (FAT32)        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | zImage, bootcode.bin,      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | config.txt, etc.           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p0*: Boot B (FAT32)        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p1*: Rootfs A (ext4)       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p1*: Rootfs B (ext4)       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># | p2: Application (ext4)     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># +----------------------------+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There is a total of three partitions. Where partition p0 and p1 have been
divided by half each one. It's not clear to get this idea. So, I recommend you
to take a look into fwup configuration file used by this tutorial,
<a href="https://github.com/meta-erlang/meta-axon/blob/master/fwup/core-image-full-cmdline.raspberrypi0-wifi.fwup" target="_blank" rel="noopener noreferrer">core-image-full-cmdline.raspberrypi0-wifi.fwup</a>.
That file has been adapted from the original
<a href="https://github.com/nerves-project/nerves_system_rpi0/blob/main/fwup.conf" target="_blank" rel="noopener noreferrer">nerves_system_rpi0 fwup configuration</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="burn-a-complete-image">burn a complete image<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#burn-a-complete-image" class="hash-link" aria-label="Direct link to burn a complete image" title="Direct link to burn a complete image">​</a></h3>
<p>My target sdcard has 16GB there is enough space for the core-image-full-cmdline
image. To start using it we need write a <em>complete</em> image to the sdcard. By
complete image also means the the partition A will be used when the board gets
booted.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ sudo fwup -a -d /dev/sda -t complete -i core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100% [====================================] 68.46 MB in / 382.20 MB out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Elapsed time: 55.932 s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When I inserted the sdcard into my workstation, my host Linux recognized it as
<em>/dev/sda</em> device, using sudo when calling fwup took almost 56 seconds to write
382 MB to the sdcard.</p>
<p>That is all we need to get the sdcard and boot it into raspberry board.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The next output is just the partition layout for a real board booted from the
sdcard.</p></div></div>
<p>And in fact, it works as expected:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# sfdisk -l /dev/mmcblk0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disk /dev/mmcblk0: 14.84 GiB, 15931539456 bytes, 31116288 sectors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Units: sectors of 1 * 512 = 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sector size (logical/physical): 512 bytes / 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disklabel type: dos</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disk identifier: 0x00000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Device         Boot   Start      End  Sectors  Size Id Type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/mmcblk0p1 *         63   266302   266240  130M  c W95 FAT32 (LBA)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/mmcblk0p2       532543  1011774   479232  234M 83 Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/mmcblk0p3      1491007 31116287 29625281 14.1G 83 Linux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Checking erl and iex versions:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Eshell V15.0.1 (press Ctrl+G to abort, type help(). for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User switch command (type h for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --&gt; q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# iex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Interactive Elixir (1.17.1) - press Ctrl+C to exit (type h() ENTER for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">iex(1)&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="move-to-b-partition">move to B partition<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#move-to-b-partition" class="hash-link" aria-label="Direct link to move to B partition" title="Direct link to move to B partition">​</a></h3>
<p>Still using the image
core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw, I want to
test the B upgrade path. For that, the easiest way is to call fwup (which has
been installed into the image) passing some usual flags for this
<a href="https://github.com/fwup-home/fwup?tab=readme-ov-file#whats-something-cool-that-you-can-do-with-fwup" target="_blank" rel="noopener noreferrer">kind of operation</a>:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The instructions for setting board's network stack using USB is not part of the
scope of this tutorial.</p></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240924200317.fw | ssh root@192.168.7.7 'fwup -v -a -U -d /dev/mmcblk0 -t upgrade.b'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-partition-offset(1, 532543) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, a.nerves_fw_platform) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, a.nerves_fw_architecture) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: Upgrading partition B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100% [====================================] 68.46 MB in / 381.82 MB out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Elapsed time: 1 min 30 s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The important argument is the <code>-t upgrade.b</code> telling to fwup which partition
will be upgraded.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>In my setup I called <code>reboot</code> to get raspberry rebooted.</p></div></div>
<p>Checking erl and iex versions:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Eshell V15.0.1 (press Ctrl+G to abort, type help(). for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User switch command (type h for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --&gt; q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# iex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Interactive Elixir (1.17.1) - press Ctrl+C to exit (type h() ENTER for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">iex(1)&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The versions are still 1.17.x and 27.0.x, as expected.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="move-from-b-to-a-partition">move from B to A partition<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#move-from-b-to-a-partition" class="hash-link" aria-label="Direct link to move from B to A partition" title="Direct link to move from B to A partition">​</a></h3>
<p>For testing purposes, let's change the Elixir preferred version from 1.17.x to
1.16.x. For that, edit the local.conf file and change the
<code>PREFERRED_VERSION_elixir*</code> variables:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tee -a &lt;&lt;EOF conf/local.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># select specific elixir and erlang versions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_elixir = "1.16%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_elixir-native = "1.16%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PREFERRED_VERSION_nativesdk-elixir = "1.16%"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Running the build again:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake core-image-full-cmdline</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The result will be a new core-image-full-cmdline-raspberrypi0-wifi.rootfs-*.fw
filename which is ready to be used:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat core-image-full-cmdline-raspberrypi0-wifi.rootfs-20240920190231.fw | ssh root@192.168.7.7 'fwup -v -a -U -d /dev/mmcblk0 -t upgrade.a'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-partition-offset(1, 1011775) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, b.nerves_fw_platform) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: require-uboot-variable(uboot-env, b.nerves_fw_architecture) -&gt; met</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fwup: Upgrading partition A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100% [====================================] 68.46 MB in / 381.82 MB out</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Success!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Elapsed time: 1 min 30 s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Rebooting the board and checking the iex version, we get:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# erl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Eshell V15.0.1 (press Ctrl+G to abort, type help(). for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User switch command (type h for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --&gt; q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@raspberrypi0-wifi:~# iex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">warning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (whiche</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 27 [erts-15.0.1] [source] [32-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Interactive Elixir (1.16.3) - press Ctrl+C to exit (type h() ENTER for help)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That works! Erlang/OTP 27 and Elixir 1.16.3.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusions">Conclusions<a href="https://meta-erlang.github.io/blog/2024/09/24/index/#conclusions" class="hash-link" aria-label="Direct link to Conclusions" title="Direct link to Conclusions">​</a></h2>
<p>The <a href="https://github.com/fwup-home/fwup" target="_blank" rel="noopener noreferrer">fwup</a> tool has shown as a feasibly
approach for image A/B software upgrades. It is integrated into YP/OE ecosystem
through <a href="https://github.com/fwup-home/meta-fwup" target="_blank" rel="noopener noreferrer">meta-fwup</a> layer and ready to
try.</p>
<p>fwup is also used by Nerves Project together with others Elixir components in
order to provide a full
<a href="https://en.wikipedia.org/wiki/Over-the-air_update" target="_blank" rel="noopener noreferrer">OTA updates</a>.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>fwup</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 27.0]]></title>
            <link>https://meta-erlang.github.io/blog/2024/05/31/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/05/31/index/</guid>
            <pubDate>Fri, 31 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>scarthgap</td><td>25.3.2.12, 26.2.5, 27.0</td></tr><tr><td>master</td><td>25.3.2.12, 26.2.5, 27.0</td></tr></tbody></table>
<p>And the following Elixir releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Elixir version</th></tr></thead><tbody><tr><td>scarthgap</td><td>1.13.4, 1.14.4, 1.15.7, 1.16.3</td></tr><tr><td>master</td><td>1.13.4, 1.14.4, 1.15.7, 1.16.3</td></tr></tbody></table>
<p>I was planing to also add Erlang/OTP 27.0 to LTS kirkstone release. However it
is not feasible as Erlang/OTP 27 uses autoconf 2.72 and kirkstone uses 2.71.
Thus, there is an incompatible related to build system.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[livebook server]]></title>
            <link>https://meta-erlang.github.io/blog/2024/04/28/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/04/28/index/</guid>
            <pubDate>Sun, 28 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://meta-erlang.github.io/blog/2024/04/28/index/#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">​</a></h2>
<p>From <a href="https://livebook.dev/" target="_blank" rel="noopener noreferrer">livebook.dev</a> website:</p>
<blockquote>
<p>Automate code &amp; data workflows with interactive notebooks.</p>
</blockquote>
<p>Livebook is getting famous for modern notebooks. It helps a lot for several
tasks and to solve issues where documentation and code have to walk together.</p>
<p>Live book has been added to the standard beamtools SDK. That is very handy
because one can start livebook quickly and it will work with all SDK tools. That
means, we don't need to install anything else. It's all integrated.</p>
<p>If one more tool is needed, it's just a matter of including it into SDK and it
will be ready to use.</p>
<p>The following section is a step by step in order to install livebook in any
modern Linux server.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="livebook-as-a-linux-systemd-service">livebook as a Linux systemd service<a href="https://meta-erlang.github.io/blog/2024/04/28/index/#livebook-as-a-linux-systemd-service" class="hash-link" aria-label="Direct link to livebook as a Linux systemd service" title="Direct link to livebook as a Linux systemd service">​</a></h3>
<p>All commands as sudo:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wget -O /tmp/x86_64-beamtools-nativesdk-standalone-5.0.2-erlang-27.0-elixir-1.17.1.sh https://github.com/meta-erlang/meta-erlang/releases/download/beamtools-0.9.1/x86_64-beamtools-nativesdk-standalone-5.0.2-erlang-27.0-elixir-1.17.1.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chmod +x /tmp/x86_64-beamtools-nativesdk-standalone-5.0.2-erlang-27.0-elixir-1.17.1.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">adduser --group livebook livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdir /home/livebook/sdk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/tmp/x86_64-beamtools-nativesdk-standalone-5.0.2-erlang-27.0-elixir-1.17.1.sh -y -d /home/livebook/sdk/5.0.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chown -R livebook:livebook /home/livebook/sdk/5.0.2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Create a file at /etc/livebook/livebook.conf with permission livebook<!-- -->:livebook<!-- -->
and the following configuration:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_DEFAULT_RUNTIME=standalone</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_IP=0.0.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_PORT=8080</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_PASSWORD=livebook-instance</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIVEBOOK_HOME=/home/livebook</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Create a systemd service file at /lib/systemd/system/livebook.service with the
following:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[Unit]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Description=Livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[Service]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type=simple</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User=livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Group=livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Environment=SHELL=/bin/sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Environment=HOME=/home/livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EnvironmentFile=/etc/livebook/livebook.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WorkingDirectory=/home/livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ExecStart=/home/livebook/livebook.sh start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ExecStop=/home/livebook/livebook.sh stop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Restart=on-failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[Install]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WantedBy=multi-user.target</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Create a file /home/livebook/livebook.sh, change permission to
livebook<!-- -->:livebook<!-- -->.</p>
<p>With the following contents:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Load SDK environment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">source /home/livebook/sdk/5.0.2/environment-setup-x86_64-pokysdk-linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Start/Stop livebook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">livebook $@</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In order to start and stop livebook, it's all about systemctl commands:</p>
<ul>
<li>start: <code>systemctl start livebook</code></li>
<li>stop: <code>systemctl stop livebook</code></li>
<li>check status: <code>systemctl status livebook</code></li>
</ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>livebook</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.17, 25.3.2.12, 26.2.5, 27.0-rc3]]></title>
            <link>https://meta-erlang.github.io/blog/2024/04/21/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/04/21/index/</guid>
            <pubDate>Sun, 21 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>kirkstone</td><td>24.3.4.17, 25.3.2.12, 26.2.5</td></tr><tr><td>master</td><td>25.3.2.12, 26.2.5, 27.0-rc3</td></tr></tbody></table>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.16, 25.3.2.10, 26.2.3]]></title>
            <link>https://meta-erlang.github.io/blog/2024/03/17/index/</link>
            <guid>https://meta-erlang.github.io/blog/2024/03/17/index/</guid>
            <pubDate>Sun, 17 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.16</td></tr><tr><td>kirkstone</td><td>24.3.4.16, 25.3.2.10, 26.2.3</td></tr><tr><td>master</td><td>25.3.2.10, 26.2.3</td></tr></tbody></table>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.15, 25.3.2.8, 26.2.1]]></title>
            <link>https://meta-erlang.github.io/blog/2023/12/25/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/12/25/index/</guid>
            <pubDate>Mon, 25 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.15</td></tr><tr><td>kirkstone</td><td>24.3.4.15, 25.3.2.8, 26.2.1</td></tr><tr><td>master</td><td>25.3.2.8, 26.2.1</td></tr></tbody></table>
<p>In additional to those new versions, now it's possible to read Erlang/OTP
documentation in Erlang shell. The docs .chunk files get generated during build
time and one could easily install it by adding the package <em>erlang-modules-dev</em>.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[meta-erlang meets atomvm]]></title>
            <link>https://meta-erlang.github.io/blog/2023/11/02/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/11/02/index/</guid>
            <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">​</a></h2>
<p>From <a href="https://www.atomvm.net/" target="_blank" rel="noopener noreferrer">atomvm.net</a> website, atomvm is:</p>
<blockquote>
<p>AtomVM is a lightweight implementation of the the Bogdan Erlang Abstract
Machine (aka, the BEAM), a virtual machine that can execute byte-code
instructions compiled from Erlang or Elixir source code. AtomVM supports a
limited but functional subset of the BEAM opcodes, and also includes a small
subset of the Erlang/OTP standard libraries, all optimized to run on tiny
micro-controllers. With AtomVM, you can write your IoT applications in a
functional programming language, using a modern actor-based concurrency model,
making them vastly easier to write and understand!</p>
</blockquote>
<p>One of the atomvm goals is the possibility to run BEAM code on really small
systems like MCUs.</p>
<p>For a while, I was wondering what could be the benefits of integrating atomvm
into meta-erlang recipes. It didn't look to make any sense for me. Then, I
started playing with that just to see if I was able to run an atomvm program in
Qemu emulation.</p>
<p>Suddenly, I ended up with all pieces to run atomvm programs integrated with
meta-erlang. So this post is about how it is possible to use atomvm in Linux
images based on YP/OE.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="atomvm-recipe">atomvm recipe<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#atomvm-recipe" class="hash-link" aria-label="Direct link to atomvm recipe" title="Direct link to atomvm recipe">​</a></h3>
<p>The
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/atomvm_0.6.0-alpha1.bb" target="_blank" rel="noopener noreferrer">atomvm.bb</a>
recipe is very simple because the atomvm project is based on CMake and YP has
support to it.</p>
<p>However, I had to make a specific recipe to isolate the tool packbeam. The
packbeam tool lives inside atomvm source code I've created a recipe called
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/packbeam_0.6.0-alpha1.bb" target="_blank" rel="noopener noreferrer">packbeam.bb</a>
which compiles packbeam as native (that is runs on build host machine). That was
necessary because the atomvm recipe crosscompile the atomvm and packbeam is used
by CMake to pack all .beam files to create .avm files.</p>
<p>To make atomvm recipe works, I applied a patch
(<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-devtools/atomvm/files/0001-Remove-PackBEAM-dependency-rules.patch" target="_blank" rel="noopener noreferrer">0001-Remove-PackBEAM-dependency-rules.patch</a>)
to disable the packbeam dependency internally. That allows me to use my packbeam
tool from sysroot-native instead.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>The mentioned patch works for my needs but is not target for sending a PR to
atomvm project.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="atomvm-examples">atomvm examples<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#atomvm-examples" class="hash-link" aria-label="Direct link to atomvm examples" title="Direct link to atomvm examples">​</a></h3>
<p>There is the <a href="https://github.com/atomvm/atomvm_examples" target="_blank" rel="noopener noreferrer">atomvm_examples</a>
project that provides great source of ideas and examples. I wish to create some
recipes to build and pack each example. So I started with the
<a href="https://github.com/atomvm/atomvm_examples/tree/master/erlang/system_info" target="_blank" rel="noopener noreferrer">system_info</a>.</p>
<p>The following code is the
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/recipes-examples/atomvm-examples/atomvm-examples-system-info_0.1.0.bb" target="_blank" rel="noopener noreferrer">atomvm-examples-system-info_0.1.0.bb</a>
recipe. And should be enough for any Erlang project build which uses
<a href="https://github.com/atomvm/atomvm_rebar3_plugin" target="_blank" rel="noopener noreferrer">atomvm_rebar3_plugin</a>.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SUMMARY = "Collects and displays various information about AtomVM and the environment in which it is running."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SECTION = "examples"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LICENSE = "Apache-2.0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIC_FILES_CHKSUM = "file://LICENSE;md5=745e8b23501916820b8a509f8e3ba3d4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ATOMVM_EXAMPLE = "erlang/system_info"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">S = "${WORKDIR}/system_info"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCREV = "8e54aaf475a74b59a20f914e575202b1810a7954"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PV = "0.1.0+git${SRCPV}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRC_URI = "git://github.com/atomvm/atomvm_examples;branch=master;subpath=${ATOMVM_EXAMPLE};protocol=https"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">inherit atomvm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>inherit atomvm</code> inherits the
<a href="https://github.com/meta-erlang/meta-erlang/blob/master/classes/atomvm.bbclass" target="_blank" rel="noopener noreferrer">atomvm.bbclass</a>
which implements rebar3 commands to compile and create avm files.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="build-and-run-session">Build and run session<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#build-and-run-session" class="hash-link" aria-label="Direct link to Build and run session" title="Direct link to Build and run session">​</a></h3>
<p>To build the atomvm-examples-system-info recipe, we call bitbake like that:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake atomvm-examples-system-info</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, we want to run system_info application inside Qemu. The first step is to
install the atomvm-examples-system-info in the final image.</p>
<p>In <em>conf/local.conf</em> file add the recipe name to the IMAGE_INSTALL variable:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">IMAGE_INSTALL:append:pn-core-image-minimal = " atomvm-examples-system-info"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When building the core-image-minimal image and running it with Qemu:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu core-image-minimal slirp nographic serialstdio</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Inside the Qemu, let's run our first atomvm program:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# uname -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Linux qemux86-64 6.5.7-yocto-standard #1 SMP PREEMPT_DYNAMIC Thu Oct 19 14:51:09 UTC 2023 x86_64 GNU/Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# atomvm /usr/share/atomvm-examples-system-info/system_info.avm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Unsupported line_ref tag: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SystemInfo:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">===========</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">atom_count: 162</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port_count: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">process_count: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">system_architecture: &lt;&lt;"Linux--x86_64"&gt;&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">word_size: 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PlatformInfo:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ProcessInfo:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Pid: &lt;0.1.0&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">heap_size: 51</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">memory: 848</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message_queue_len: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stack_size: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Return value: ok</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That works as expected.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-outcomes-and-questions">Integration outcomes and questions<a href="https://meta-erlang.github.io/blog/2023/11/02/index/#integration-outcomes-and-questions" class="hash-link" aria-label="Direct link to Integration outcomes and questions" title="Direct link to Integration outcomes and questions">​</a></h3>
<p>The recipes created so far covers running atomvm for generic unix (Linux in my
case). Well, if you can afford running Erlang/Elixir on Linux, then there is no
selling point to use atomvm. That is true if we look at the current state of
atomvm project for generic unix platform.</p>
<p>Maybe in the future we can see extensions to generic unix allowing it to talk
with i2c, gpio, spi on Linux for example, then atomvm and meta-erlang starts to
cover a lot of possibilities. Projects like
<a href="https://github.com/eclipse/mraa" target="_blank" rel="noopener noreferrer">Eclipse Mraa</a> could be integrated with atomvm
providing all the low level access for low speed IO.</p>
<p>There is another idea for meta-erlang and atomvm which is the heterogeneous
system with a combination of:</p>
<ul>
<li>Linux based images running on the "application processing unit" (CPU)</li>
<li>and "real-time processing unit" (MCU) running an atomvm program.</li>
</ul>
<p>meta-erlang could build atomvm images for MCU as well for CPU. The seeds for
this integration was described in this talk
<a href="https://www.youtube.com/watch?v=mFgiIXv7b5U" target="_blank" rel="noopener noreferrer">One Build to Rule Them All: Building FreeRTOS &amp; Linux Using Yocto - Alejandro Hernandez</a>
(the pdf is
<a href="https://elinux.org/images/9/9f/ELC_Europe_2019_Presentation_AlejandroHernandez_FreeRTOS_ToUpload.pdf" target="_blank" rel="noopener noreferrer">here</a>).
In that talk Alejandro shows how YP/OE projects can build MCU target images.
Using the same principles also works for meta-erlang.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>atomvm</category>
        </item>
        <item>
            <title><![CDATA[Exploring x32 psABI for Erlang/OTP]]></title>
            <link>https://meta-erlang.github.io/blog/2023/09/02/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/09/02/index/</guid>
            <pubDate>Sat, 02 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Intro]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://meta-erlang.github.io/blog/2023/09/02/index/#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">​</a></h2>
<p>According to <a href="https://en.wikipedia.org/wiki/X32_ABI" target="_blank" rel="noopener noreferrer">Wikipedia X32 ABI</a> page:</p>
<blockquote>
<p>The x32 ABI is an application binary interface (ABI) and one of the interfaces
of the Linux kernel. The x32 ABI provides 32-bit integers, long and pointers
(ILP32) on Intel and AMD 64-bit hardware. The ABI allows programs to take
advantage of the benefits of x86-64 instruction set (larger number of CPU
registers, better floating-point performance, faster position-independent
code, shared libraries, function parameters passed via registers, faster
syscall instruction) while using 32-bit pointers and thus avoiding the
overhead of 64-bit pointers.</p>
</blockquote>
<p>So, I'm wondering if it would be possible to enable x32 support in Erlang/OTP
build. That way, I could make a Yocto image for x32 that runs on x86-64
machines.</p>
<p>Here is some references about the subject:</p>
<ul>
<li><a href="https://docs.yoctoproject.org/dev-manual/x32-psabi.html" target="_blank" rel="noopener noreferrer">Yocto, Using x32 psABI</a></li>
<li><a href="https://sites.google.com/site/x32abi/home?authuser=0" target="_blank" rel="noopener noreferrer">x32-abi</a></li>
<li><a href="http://linuxplumbersconf.org/2011/ocw//system/presentations/531/original/x32-LPC-2011-0906.pptx" target="_blank" rel="noopener noreferrer">X32 – A Native 32bit ABI For X86-64</a></li>
<li><a href="https://wiki.debian.org/X32Port" target="_blank" rel="noopener noreferrer">Debian x32 port</a></li>
<li><a href="https://raw.githubusercontent.com/wiki/hjl-tools/x86-psABI/x86-64-psABI-1.0.pdf" target="_blank" rel="noopener noreferrer">System V Application Binary Interface AMD64 Architecture Processor Supplement (With LP64 and ILP32 Programming Models</a></li>
</ul>
<p>In fact, x32 seems to be around since 2011/2012 and has been integrated in many
platforms. Like Ubuntu, Debian, Gentoo.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-erlangotp-using-x32-toolchain">Building Erlang/OTP using x32 toolchain<a href="https://meta-erlang.github.io/blog/2023/09/02/index/#building-erlangotp-using-x32-toolchain" class="hash-link" aria-label="Direct link to Building Erlang/OTP using x32 toolchain" title="Direct link to Building Erlang/OTP using x32 toolchain">​</a></h2>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>A toolchain with x32 support is necessary. However, it's not easy to find one.
Instead projects like <a href="https://crosstool-ng.github.io/" target="_blank" rel="noopener noreferrer">crosstool-NG</a> and
<a href="https://www.yoctoproject.org/" target="_blank" rel="noopener noreferrer">Yocto Project</a> have tools to make a toolchain
with x32 support enabled.</p></div></div>
<p>In order to follow this experiment, you can download a specific toolchain with
x32 enabled here:
<a href="https://github.com/meta-erlang/meta-erlang.github.io/releases/tag/x32-toolchain" target="_blank" rel="noopener noreferrer">poky-glibc-x86_64-core-image-minimal-x86_64_x32-qemux86-64-toolchain-4.2.sh</a>.</p>
<p>It will be necessary to install it in a temporary folder like the steps below:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">chmod +x poky-glibc-x86_64-core-image-minimal-x86_64_x32-qemux86-64-toolchain-4.2.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">poky-glibc-x86_64-core-image-minimal-x86_64_x32-qemux86-64-toolchain-4.2.sh -y -d /tmp/poky/4.2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Following the Erlang/OTP
<a href="https://github.com/erlang/otp/blob/master/HOWTO/INSTALL-CROSS.md" target="_blank" rel="noopener noreferrer">INSTALL-CROSS.md</a>
document, we first need to build a Bootstrap System:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd $ERL_TOP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./configure --enable-bootstrap-only</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, we have to source the toolchain environment configurations:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">. /tmp/poky/4.2/environment-setup-x86_64_x32-poky-linux-gnux32</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After sourcering the environment variable, the shell gets configured with some
extra variables using during the build:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">x86_64-poky-linux-gnux32-gcc -mx32 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> -fstack-protector-strong \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> --sysroot=/tmp/poky/4.2/sysroots/x86_64_x32-poky-linux-gnux32</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It's important to not the GCC flag
<a href="https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html#index-mx32" target="_blank" rel="noopener noreferrer">-mx32</a>:</p>
<blockquote>
<p>The -mx32 option sets int, long, and pointer types to 32 bits, and generates
code for the x86-64 architecture.</p>
</blockquote>
<p>Finally, start the second part of Erlang/OTP build, which is the Cross Build:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./configure  $CONFIGURE_FLAGS  --disable-silent-rules --disable-dependency-tracking \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	--with-ssl-rpath=no --disable-static  --without-javac --without-dynamic-trace --without-observer --without-odbc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Installing the build output and inspecting the <code>erlexec</code> binary to see what it
looks like:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">make install DESTDIR=/tmp/e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">file /tmp/e/usr/local/lib/erlang/erts-14.0.2/bin/erlexec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">erlexec: ELF 32-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /libx32/ld-linux-x32.so.2, BuildID[sha1]=013e32ef8c57686a59a812ca452f09d677ff8e37, for GNU/Linux 5.15.0, with debug_info, not stripped</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well, the build is correct. But I couldn't test this build in my machine.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="enabling-erlang-for-yocto">Enabling Erlang for Yocto<a href="https://meta-erlang.github.io/blog/2023/09/02/index/#enabling-erlang-for-yocto" class="hash-link" aria-label="Direct link to Enabling Erlang for Yocto" title="Direct link to Enabling Erlang for Yocto">​</a></h2>
<p>In the previous section we just build Erlang/OTP using a toolchain with x32
support. Now, it's time to build Erlang/OTP inside the Yocto project and test
the results using qemu instance.</p>
<p>Enabling it for Yocto is simple, just adding the follow snippet in your
local.conf file:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MACHINE = "qemux86-64"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DEFAULTTUNE = "x86-64-x32"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">baselib = "${@d.getVar('BASE_LIB:tune-' + (d.getVar('DEFAULTTUNE') or 'INVALID')) or 'lib'}"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then, building erlang:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bitbake erlang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>For those that want to check all configure and compiler flags, I'm including the
links to those logs:</p><ul>
<li><a href="https://meta-erlang.github.io/assets/log.do_configure" target="_blank" rel="noopener noreferrer">Configure log output</a></li>
<li><a href="https://meta-erlang.github.io/assets/log.do_compile" target="_blank" rel="noopener noreferrer">Compile log output</a></li>
</ul></div></div>
<p>The build failed in one point related to ASM code in
<a href="https://github.com/erlang/otp/blob/maint-26/erts/lib_src/pthread/ethread.c#L193" target="_blank" rel="noopener noreferrer">erts/lib_src/pthread/ethread.c</a>.
Looks like an ASM incompatibility issue. In order to address it here is
<a href="https://github.com/joaohf/otp/commit/6cd15d5888a536af97f5d8e26b2db2e379fa7eab" target="_blank" rel="noopener noreferrer">a patch</a>
that just adds one more compiler check to pick up the correct ifdef branch.</p>
<p>Afer that, the build runs as expected. And testing it using QEMU shows exactly
what I had in mind:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">runqemu core-image-minimal-qemux86-64.ext4 slirp nographic serialstdio</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>check the current kernel</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# uname -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Linux qemux86-64 6.1.32-yocto-standard #1 SMP PREEMPT_DYNAMIC Mon Jun  5 13:43:33 UTC 2023 x86_64 GNU/Linux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>check /proc/cpuinfo to see the 'lm' (long mode)</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@qemux86-64:~# grep -o -w 'lm' /proc/cpuinfo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>check Erlang shell</li>
</ul>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Erlang/OTP 26 [erts-14.0.2] [source] [32-bit] [smp:4:4] [ds:4:4:10] [async-threads:1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Eshell V14.0.2 (press Ctrl+G to abort, type help(). for help)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1&gt; application:ensure_all_started(crypto).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{ok,[crypto]}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well, looks like we are running Erlang/OTP 32-bits in a x86_64 machine. Also, it
was able to correct load the crypto (with ssl libraries compiled for x32 too).
By the way, there is a second
<a href="https://github.com/joaohf/otp/commit/e63b5b703ffa0005bf6a8f4d3bcec18f786bda92" target="_blank" rel="noopener noreferrer">patch need to proper compile the crypto application</a>.</p>
<p>Some raised questions for further investigations:</p>
<ul>
<li>What tests are necessary to prove that the x32 Erlang build is safe ?</li>
<li>Are there any other code change in order to fit the x32 build ?</li>
<li>Would <a href="https://www.erlang.org/doc/apps/erts/beamasm#faq" target="_blank" rel="noopener noreferrer">BeamAsm</a> be available
for x32 ?</li>
</ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>x32</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.13, 25.3.2.3, 26.0.2]]></title>
            <link>https://meta-erlang.github.io/blog/2023/07/01/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/07/01/index/</guid>
            <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.13</td></tr><tr><td>kirkstone</td><td>24.3.4.13, 25.3.2.3, 26.0.2</td></tr><tr><td>mickledore</td><td>25.3.2.3, 26.0.2</td></tr></tbody></table>
<p>In additional to those new versions, a new
<a href="https://meta-erlang.github.io/docs/guides/guides-beamtools/" target="_blank" rel="noopener noreferrer">beamtools</a> is
available
<a href="https://github.com/meta-erlang/meta-erlang/releases/tag/beamtools-0.7.0" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>This new version was made with
<a href="https://docs.yoctoproject.org/dev/migration-guides/migration-4.2.html" target="_blank" rel="noopener noreferrer">Yocto mickledore</a>
release and brings Erlang/OTP 26.0.2 and Elixir 1.15.2.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New meta-erlang branch mickledore]]></title>
            <link>https://meta-erlang.github.io/blog/2023/06/09/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/06/09/index/</guid>
            <pubDate>Fri, 09 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Yocto Project has released a new]]></description>
            <content:encoded><![CDATA[<p>Yocto Project has <a href="https://wiki.yoctoproject.org/wiki/Releases" target="_blank" rel="noopener noreferrer">released</a> a new
<a href="https://docs.yoctoproject.org/dev/migration-guides/migration-4.2.html" target="_blank" rel="noopener noreferrer">version 4.2 (Mickledore)</a>.
As consequence meta-erlang brings a new branch mickledore updating most of the
recipes. mickledore release is not a LTS release and community support will be
available until November 2023.</p>
<p>We've also upgraded to the latest Erlang/OTP and Elixir releases supporting the
following new Erlang/OTP releases:</p>
<ul>
<li>Erlang/OTP 26.0.1</li>
<li>Erlang/OTP 25.3.2.2</li>
<li>Elixir 1.14.4</li>
</ul>
<p>It's worth mentioning the meta-erlang master has also been updated.</p>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
        <item>
            <title><![CDATA[New Erlang releases 24.3.4.11, 25.3.2 and recipe updates]]></title>
            <link>https://meta-erlang.github.io/blog/2023/05/07/index/</link>
            <guid>https://meta-erlang.github.io/blog/2023/05/07/index/</guid>
            <pubDate>Sun, 07 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We've added support for the following new Erlang/OTP releases:]]></description>
            <content:encoded><![CDATA[<p>We've added support for the following new Erlang/OTP releases:</p>
<table><thead><tr><th>meta-erlang branch</th><th>Erlang/OTP version</th></tr></thead><tbody><tr><td>dunfell</td><td>24.3.4.11</td></tr><tr><td>kirkstone</td><td>24.3.4.11, 25.3.2</td></tr><tr><td>langdale</td><td>25.3.2</td></tr></tbody></table>
<p>Removed recipes:</p>
<ul>
<li>For langdale the recipes ejabberd and emqx have been removed due the lack of
supporting cross-compilation build in a stable way.</li>
</ul>
<p>Updated recipes:</p>
<ul>
<li>For langdale the following recipes have been updated: lux, vernemq, yaws,
tsung, riak, couchdb. It is important to mention about langdale
<a href="https://wiki.yoctoproject.org/wiki/Releases" target="_blank" rel="noopener noreferrer">EOL in May 2023</a>. So, this
branch will not receive updates.</li>
</ul>
<p>It has been decided:</p>
<ul>
<li>Dropped support to Erlang/OTP 24 in langdale. Due the lack of deterministic
build flags in 24. Elixir 1.12 has also been dropped (because it dependes on
Erlang/OTP 24).</li>
</ul>]]></content:encoded>
            <category>meta-erlang</category>
            <category>news</category>
        </item>
    </channel>
</rss>